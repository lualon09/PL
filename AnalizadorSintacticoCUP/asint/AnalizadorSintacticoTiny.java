
//----------------------------------------------------
// The following code was generated by CUP v0.11b beta 20140220
// Sun Mar 24 18:48:28 WET 2024
//----------------------------------------------------

package asint;

import java_cup.runtime.*;
import alex.AnalizadorLexicoTiny;
import alex.UnidadLexica;
import alex.TokenValue;
import errors.GestionErroresTiny;
import java.util.ArrayList;
import ast.Types.*;
import ast.Expressions.*;
import ast.Expressions.Accesses.*;
import ast.Definitions.*;
import ast.Instructions.*;
import ast.*;
import java_cup.runtime.ComplexSymbolFactory.Location;

/** CUP v0.11b beta 20140220 generated parser.
  * @version Sun Mar 24 18:48:28 WET 2024
  */
public class AnalizadorSintacticoTiny extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public AnalizadorSintacticoTiny() {super();}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintacticoTiny(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintacticoTiny(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\176\000\002\002\003\000\002\002\004\000\002\030" +
    "\004\000\002\030\004\000\002\030\004\000\002\030\004" +
    "\000\002\030\004\000\002\030\002\000\002\031\005\000" +
    "\002\031\007\000\002\031\005\000\002\036\006\000\002" +
    "\036\006\000\002\032\010\000\002\032\010\000\002\033" +
    "\010\000\002\033\010\000\002\037\004\000\002\037\003" +
    "\000\002\035\007\000\002\035\007\000\002\034\011\000" +
    "\002\042\003\000\002\042\002\000\002\041\005\000\002" +
    "\041\003\000\002\040\005\000\002\040\006\000\002\044" +
    "\004\000\002\044\004\000\002\044\002\000\002\056\003" +
    "\000\002\056\003\000\002\056\003\000\002\056\003\000" +
    "\002\056\003\000\002\056\004\000\002\045\007\000\002" +
    "\045\007\000\002\020\005\000\002\046\005\000\002\046" +
    "\004\000\002\046\004\000\002\051\004\000\002\051\004" +
    "\000\002\021\006\000\002\047\003\000\002\047\002\000" +
    "\002\050\005\000\002\050\003\000\002\055\003\000\002" +
    "\055\003\000\002\055\003\000\002\055\003\000\002\043" +
    "\005\000\002\052\007\000\002\052\011\000\002\053\007" +
    "\000\002\053\014\000\002\053\007\000\002\054\012\000" +
    "\002\054\011\000\002\054\012\000\002\054\011\000\002" +
    "\057\011\000\002\057\010\000\002\057\002\000\002\060" +
    "\005\000\002\061\012\000\002\061\010\000\002\061\002" +
    "\000\002\062\006\000\002\062\006\000\002\004\005\000" +
    "\002\004\003\000\002\005\005\000\002\005\003\000\002" +
    "\006\005\000\002\006\003\000\002\007\005\000\002\007" +
    "\003\000\002\007\003\000\002\010\005\000\002\010\003" +
    "\000\002\011\005\000\002\011\003\000\002\012\004\000" +
    "\002\012\003\000\002\013\004\000\002\013\003\000\002" +
    "\014\003\000\002\014\003\000\002\014\003\000\002\014" +
    "\003\000\002\014\003\000\002\014\003\000\002\014\006" +
    "\000\002\022\005\000\002\022\002\000\002\023\003\000" +
    "\002\023\003\000\002\024\003\000\002\024\003\000\002" +
    "\024\003\000\002\024\003\000\002\025\003\000\002\025" +
    "\003\000\002\026\003\000\002\026\003\000\002\026\003" +
    "\000\002\027\003\000\002\027\003\000\002\017\004\000" +
    "\002\003\003\000\002\003\003\000\002\003\003\000\002" +
    "\003\003\000\002\003\011\000\002\003\004\000\002\015" +
    "\004\000\002\015\004\000\002\015\003\000\002\016\003" +
    "\000\002\016\006\000\002\016\005\000\002\016\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0102\000\024\002\ufffa\004\021\005\022\006\010\051" +
    "\007\062\014\063\023\064\015\066\006\001\002\000\024" +
    "\002\ufffa\004\021\005\022\006\010\051\007\062\014\063" +
    "\023\064\015\066\006\001\002\000\004\002\001\001\002" +
    "\000\010\011\uff8d\027\210\066\uff8d\001\002\000\004\066" +
    "\200\001\002\000\050\003\uff8e\011\uff8e\016\uff8e\017\uff8e" +
    "\020\uff8e\021\uff8e\022\uff8e\023\uff8e\024\uff8e\025\uff8e\030" +
    "\uff8e\032\uff8e\033\uff8e\034\uff8e\036\uff8e\037\uff8e\040\uff8e" +
    "\043\uff8e\066\uff8e\001\002\000\004\002\177\001\002\000" +
    "\024\002\ufffa\004\021\005\022\006\010\051\007\062\014" +
    "\063\023\064\015\066\006\001\002\000\024\002\ufffa\004" +
    "\021\005\022\006\010\051\007\062\014\063\023\064\015" +
    "\066\006\001\002\000\004\066\170\001\002\000\004\017" +
    "\162\001\002\000\006\011\026\066\154\001\002\000\024" +
    "\002\ufffa\004\021\005\022\006\010\051\007\062\014\063" +
    "\023\064\015\066\006\001\002\000\024\002\ufffa\004\021" +
    "\005\022\006\010\051\007\062\014\063\023\064\015\066" +
    "\006\001\002\000\050\003\uff90\011\uff90\016\uff90\017\uff90" +
    "\020\uff90\021\uff90\022\uff90\023\uff90\024\uff90\025\uff90\030" +
    "\uff90\032\uff90\033\uff90\034\uff90\036\uff90\037\uff90\040\uff90" +
    "\043\uff90\066\uff90\001\002\000\050\003\uff8f\011\uff8f\016" +
    "\uff8f\017\uff8f\020\uff8f\021\uff8f\022\uff8f\023\uff8f\024\uff8f" +
    "\025\uff8f\030\uff8f\032\uff8f\033\uff8f\034\uff8f\036\uff8f\037" +
    "\uff8f\040\uff8f\043\uff8f\066\uff8f\001\002\000\014\004\021" +
    "\005\022\006\010\064\015\066\024\001\002\000\050\003" +
    "\uff8d\011\uff8d\016\uff8d\017\uff8d\020\uff8d\021\uff8d\022\uff8d" +
    "\023\uff8d\024\uff8d\025\uff8d\030\uff8d\032\uff8d\033\uff8d\034" +
    "\uff8d\036\uff8d\037\uff8d\040\uff8d\043\uff8d\066\uff8d\001\002" +
    "\000\006\011\026\066\027\001\002\000\050\003\uff8b\011" +
    "\uff8b\016\uff8b\017\uff8b\020\uff8b\021\uff8b\022\uff8b\023\uff8b" +
    "\024\uff8b\025\uff8b\030\uff8b\032\uff8b\033\uff8b\034\uff8b\036" +
    "\uff8b\037\uff8b\040\uff8b\043\uff8b\066\uff8b\001\002\000\004" +
    "\036\030\001\002\000\034\011\062\014\064\015\055\026" +
    "\032\027\051\033\054\041\060\061\031\065\053\066\034" +
    "\067\063\070\037\071\052\001\002\000\004\027\150\001" +
    "\002\000\032\011\062\014\064\015\055\026\032\027\051" +
    "\033\054\041\060\061\031\066\034\067\063\070\037\071" +
    "\052\001\002\000\054\003\uffa8\007\uffa8\010\uffa8\011\uffa8" +
    "\012\uffa8\013\uffa8\016\uffa8\017\uffa8\020\uffa8\021\uffa8\022" +
    "\uffa8\023\uffa8\024\uffa8\025\uffa8\030\uffa8\032\uffa8\034\uffa8" +
    "\036\uffa8\037\uffa8\040\uffa8\043\uffa8\001\002\000\062\003" +
    "\uff87\007\uff87\010\uff87\011\uff87\012\uff87\013\uff87\016\uff87" +
    "\017\uff87\020\uff87\021\uff87\022\uff87\023\uff87\024\uff87\025" +
    "\uff87\027\140\030\uff87\031\uff87\032\uff87\034\uff87\036\uff87" +
    "\037\uff87\040\uff87\042\uff87\043\uff87\001\002\000\054\003" +
    "\uffaa\007\uffaa\010\uffaa\011\uffaa\012\uffaa\013\uffaa\016\uffaa" +
    "\017\uffaa\020\uffaa\021\uffaa\022\uffaa\023\uffaa\024\uffaa\025" +
    "\uffaa\030\uffaa\032\uffaa\034\uffaa\036\uffaa\037\uffaa\040\uffaa" +
    "\043\uffaa\001\002\000\054\003\uffac\007\uffac\010\uffac\011" +
    "\uffac\012\uffac\013\uffac\016\uffac\017\uffac\020\uffac\021\uffac" +
    "\022\uffac\023\uffac\024\uffac\025\uffac\030\uffac\032\uffac\034" +
    "\uffac\036\uffac\037\uffac\040\uffac\043\uffac\001\002\000\054" +
    "\003\uffa6\007\uffa6\010\uffa6\011\uffa6\012\uffa6\013\uffa6\016" +
    "\uffa6\017\uffa6\020\uffa6\021\uffa6\022\uffa6\023\uffa6\024\uffa6" +
    "\025\uffa6\030\uffa6\032\uffa6\034\uffa6\036\uffa6\037\uffa6\040" +
    "\uffa6\043\uffa6\001\002\000\042\003\uffb0\016\uffb0\017\uffb0" +
    "\020\uffb0\021\uffb0\022\uffb0\023\uffb0\024\uffb0\025\uffb0\030" +
    "\uffb0\032\uffb0\034\uffb0\036\uffb0\037\uffb0\040\uffb0\043\uffb0" +
    "\001\002\000\054\003\uffae\007\uffae\010\uffae\011\120\012" +
    "\121\013\117\016\uffae\017\uffae\020\uffae\021\uffae\022\uffae" +
    "\023\uffae\024\uffae\025\uffae\030\uffae\032\uffae\034\uffae\036" +
    "\uffae\037\uffae\040\uffae\043\uffae\001\002\000\046\003\uffb1" +
    "\007\112\010\113\016\uffb1\017\uffb1\020\uffb1\021\uffb1\022" +
    "\uffb1\023\uffb1\024\uffb1\025\uffb1\030\uffb1\032\uffb1\034\uffb1" +
    "\036\uffb1\037\uffb1\040\uffb1\043\uffb1\001\002\000\042\003" +
    "\uffb3\016\104\017\107\020\110\021\106\022\uffb3\023\uffb3" +
    "\024\uffb3\025\uffb3\030\uffb3\032\uffb3\034\uffb3\036\uffb3\037" +
    "\uffb3\040\uffb3\043\uffb3\001\002\000\032\003\uffb5\022\100" +
    "\023\102\024\uffb5\025\uffb5\030\uffb5\032\uffb5\034\uffb5\036" +
    "\uffb5\037\uffb5\040\uffb5\043\uffb5\001\002\000\026\003\uffb7" +
    "\024\076\025\uffb7\030\uffb7\032\uffb7\034\uffb7\036\uffb7\037" +
    "\uffb7\040\uffb7\043\uffb7\001\002\000\010\003\137\025\074" +
    "\040\136\001\002\000\060\003\uff88\007\uff88\010\uff88\011" +
    "\uff88\012\uff88\013\uff88\016\uff88\017\uff88\020\uff88\021\uff88" +
    "\022\uff88\023\uff88\024\uff88\025\uff88\030\uff88\031\132\032" +
    "\uff88\034\uff88\036\uff88\037\uff88\040\uff88\042\131\043\uff88" +
    "\001\002\000\054\003\uffa4\007\uffa4\010\uffa4\011\uffa4\012" +
    "\uffa4\013\uffa4\016\uffa4\017\uffa4\020\uffa4\021\uffa4\022\uffa4" +
    "\023\uffa4\024\uffa4\025\uffa4\030\uffa4\032\uffa4\034\uffa4\036" +
    "\uffa4\037\uffa4\040\uffa4\043\uffa4\001\002\000\034\011\062" +
    "\014\064\015\055\026\032\027\051\033\054\041\060\061" +
    "\031\065\053\066\034\067\063\070\037\071\052\001\002" +
    "\000\054\003\uffa5\007\uffa5\010\uffa5\011\uffa5\012\uffa5\013" +
    "\uffa5\016\uffa5\017\uffa5\020\uffa5\021\uffa5\022\uffa5\023\uffa5" +
    "\024\uffa5\025\uffa5\030\uffa5\032\uffa5\034\uffa5\036\uffa5\037" +
    "\uffa5\040\uffa5\043\uffa5\001\002\000\014\004\021\005\022" +
    "\006\010\064\015\066\024\001\002\000\034\011\062\014" +
    "\064\015\055\026\032\027\051\033\054\041\060\061\031" +
    "\065\053\066\034\067\063\070\037\071\052\001\002\000" +
    "\030\011\uff92\014\uff92\015\uff92\027\uff92\033\uff92\041\uff92" +
    "\061\uff92\066\uff92\067\uff92\070\uff92\071\uff92\001\002\000" +
    "\054\003\uffa2\007\uffa2\010\uffa2\011\uffa2\012\uffa2\013\uffa2" +
    "\016\uffa2\017\uffa2\020\uffa2\021\uffa2\022\uffa2\023\uffa2\024" +
    "\uffa2\025\uffa2\030\uffa2\032\uffa2\034\uffa2\036\uffa2\037\uffa2" +
    "\040\uffa2\043\uffa2\001\002\000\030\011\062\014\064\015" +
    "\055\027\051\033\054\041\060\061\031\066\034\067\063" +
    "\070\037\071\052\001\002\000\012\011\062\027\051\041" +
    "\060\066\065\001\002\000\054\003\uffa3\007\uffa3\010\uffa3" +
    "\011\uffa3\012\uffa3\013\uffa3\016\uffa3\017\uffa3\020\uffa3\021" +
    "\uffa3\022\uffa3\023\uffa3\024\uffa3\025\uffa3\030\uffa3\032\uffa3" +
    "\034\uffa3\036\uffa3\037\uffa3\040\uffa3\043\uffa3\001\002\000" +
    "\012\011\062\027\051\041\060\066\065\001\002\000\054" +
    "\003\uffa7\007\uffa7\010\uffa7\011\uffa7\012\uffa7\013\uffa7\016" +
    "\uffa7\017\uffa7\020\uffa7\021\uffa7\022\uffa7\023\uffa7\024\uffa7" +
    "\025\uffa7\030\uffa7\032\uffa7\034\uffa7\036\uffa7\037\uffa7\040" +
    "\uffa7\043\uffa7\001\002\000\030\011\uff93\014\uff93\015\uff93" +
    "\027\uff93\033\uff93\041\uff93\061\uff93\066\uff93\067\uff93\070" +
    "\uff93\071\uff93\001\002\000\060\003\uff87\007\uff87\010\uff87" +
    "\011\uff87\012\uff87\013\uff87\016\uff87\017\uff87\020\uff87\021" +
    "\uff87\022\uff87\023\uff87\024\uff87\025\uff87\030\uff87\031\uff87" +
    "\032\uff87\034\uff87\036\uff87\037\uff87\040\uff87\042\uff87\043" +
    "\uff87\001\002\000\054\003\uff8a\007\uff8a\010\uff8a\011\uff8a" +
    "\012\uff8a\013\uff8a\016\uff8a\017\uff8a\020\uff8a\021\uff8a\022" +
    "\uff8a\023\uff8a\024\uff8a\025\uff8a\030\uff8a\032\uff8a\034\uff8a" +
    "\036\uff8a\037\uff8a\040\uff8a\043\uff8a\001\002\000\054\003" +
    "\uff89\007\uff89\010\uff89\011\uff89\012\uff89\013\uff89\016\uff89" +
    "\017\uff89\020\uff89\021\uff89\022\uff89\023\uff89\024\uff89\025" +
    "\uff89\030\uff89\032\uff89\034\uff89\036\uff89\037\uff89\040\uff89" +
    "\043\uff89\001\002\000\054\003\uffa9\007\uffa9\010\uffa9\011" +
    "\uffa9\012\uffa9\013\uffa9\016\uffa9\017\uffa9\020\uffa9\021\uffa9" +
    "\022\uffa9\023\uffa9\024\uffa9\025\uffa9\030\uffa9\032\uffa9\034" +
    "\uffa9\036\uffa9\037\uffa9\040\uffa9\043\uffa9\001\002\000\010" +
    "\025\074\034\uff9f\037\072\001\002\000\034\011\062\014" +
    "\064\015\055\026\032\027\051\033\054\041\060\061\031" +
    "\065\053\066\034\067\063\070\037\071\052\001\002\000" +
    "\004\034\123\001\002\000\034\011\062\014\064\015\055" +
    "\026\032\027\051\033\054\041\060\061\031\065\053\066" +
    "\034\067\063\070\037\071\052\001\002\000\026\003\uffb8" +
    "\024\076\025\uffb8\030\uffb8\032\uffb8\034\uffb8\036\uffb8\037" +
    "\uffb8\040\uffb8\043\uffb8\001\002\000\034\011\062\014\064" +
    "\015\055\026\032\027\051\033\054\041\060\061\031\065" +
    "\053\066\034\067\063\070\037\071\052\001\002\000\032" +
    "\003\uffb6\022\100\023\102\024\uffb6\025\uffb6\030\uffb6\032" +
    "\uffb6\034\uffb6\036\uffb6\037\uffb6\040\uffb6\043\uffb6\001\002" +
    "\000\034\011\uff9e\014\uff9e\015\uff9e\026\uff9e\027\uff9e\033" +
    "\uff9e\041\uff9e\061\uff9e\065\uff9e\066\uff9e\067\uff9e\070\uff9e" +
    "\071\uff9e\001\002\000\034\011\062\014\064\015\055\026" +
    "\032\027\051\033\054\041\060\061\031\065\053\066\034" +
    "\067\063\070\037\071\052\001\002\000\034\011\uff9d\014" +
    "\uff9d\015\uff9d\026\uff9d\027\uff9d\033\uff9d\041\uff9d\061\uff9d" +
    "\065\uff9d\066\uff9d\067\uff9d\070\uff9d\071\uff9d\001\002\000" +
    "\042\003\uffb4\016\104\017\107\020\110\021\106\022\uffb4" +
    "\023\uffb4\024\uffb4\025\uffb4\030\uffb4\032\uffb4\034\uffb4\036" +
    "\uffb4\037\uffb4\040\uffb4\043\uffb4\001\002\000\032\011\uff9b" +
    "\014\uff9b\015\uff9b\026\uff9b\027\uff9b\033\uff9b\041\uff9b\061" +
    "\uff9b\066\uff9b\067\uff9b\070\uff9b\071\uff9b\001\002\000\032" +
    "\011\062\014\064\015\055\026\032\027\051\033\054\041" +
    "\060\061\031\066\034\067\063\070\037\071\052\001\002" +
    "\000\032\011\uff9a\014\uff9a\015\uff9a\026\uff9a\027\uff9a\033" +
    "\uff9a\041\uff9a\061\uff9a\066\uff9a\067\uff9a\070\uff9a\071\uff9a" +
    "\001\002\000\032\011\uff9c\014\uff9c\015\uff9c\026\uff9c\027" +
    "\uff9c\033\uff9c\041\uff9c\061\uff9c\066\uff9c\067\uff9c\070\uff9c" +
    "\071\uff9c\001\002\000\032\011\uff99\014\uff99\015\uff99\026" +
    "\uff99\027\uff99\033\uff99\041\uff99\061\uff99\066\uff99\067\uff99" +
    "\070\uff99\071\uff99\001\002\000\046\003\uffb2\007\112\010" +
    "\113\016\uffb2\017\uffb2\020\uffb2\021\uffb2\022\uffb2\023\uffb2" +
    "\024\uffb2\025\uffb2\030\uffb2\032\uffb2\034\uffb2\036\uffb2\037" +
    "\uffb2\040\uffb2\043\uffb2\001\002\000\032\011\uff98\014\uff98" +
    "\015\uff98\026\uff98\027\uff98\033\uff98\041\uff98\061\uff98\066" +
    "\uff98\067\uff98\070\uff98\071\uff98\001\002\000\032\011\uff97" +
    "\014\uff97\015\uff97\026\uff97\027\uff97\033\uff97\041\uff97\061" +
    "\uff97\066\uff97\067\uff97\070\uff97\071\uff97\001\002\000\032" +
    "\011\062\014\064\015\055\026\032\027\051\033\054\041" +
    "\060\061\031\066\034\067\063\070\037\071\052\001\002" +
    "\000\054\003\uffaf\007\uffaf\010\uffaf\011\120\012\121\013" +
    "\117\016\uffaf\017\uffaf\020\uffaf\021\uffaf\022\uffaf\023\uffaf" +
    "\024\uffaf\025\uffaf\030\uffaf\032\uffaf\034\uffaf\036\uffaf\037" +
    "\uffaf\040\uffaf\043\uffaf\001\002\000\032\011\062\014\064" +
    "\015\055\026\032\027\051\033\054\041\060\061\031\066" +
    "\034\067\063\070\037\071\052\001\002\000\032\011\uff94" +
    "\014\uff94\015\uff94\026\uff94\027\uff94\033\uff94\041\uff94\061" +
    "\uff94\066\uff94\067\uff94\070\uff94\071\uff94\001\002\000\032" +
    "\011\uff96\014\uff96\015\uff96\026\uff96\027\uff96\033\uff96\041" +
    "\uff96\061\uff96\066\uff96\067\uff96\070\uff96\071\uff96\001\002" +
    "\000\032\011\uff95\014\uff95\015\uff95\026\uff95\027\uff95\033" +
    "\uff95\041\uff95\061\uff95\066\uff95\067\uff95\070\uff95\071\uff95" +
    "\001\002\000\054\003\uffad\007\uffad\010\uffad\011\uffad\012" +
    "\uffad\013\uffad\016\uffad\017\uffad\020\uffad\021\uffad\022\uffad" +
    "\023\uffad\024\uffad\025\uffad\030\uffad\032\uffad\034\uffad\036" +
    "\uffad\037\uffad\040\uffad\043\uffad\001\002\000\054\003\uffa1" +
    "\007\uffa1\010\uffa1\011\uffa1\012\uffa1\013\uffa1\016\uffa1\017" +
    "\uffa1\020\uffa1\021\uffa1\022\uffa1\023\uffa1\024\uffa1\025\uffa1" +
    "\030\uffa1\032\uffa1\034\uffa1\036\uffa1\037\uffa1\040\uffa1\043" +
    "\uffa1\001\002\000\010\025\074\034\uff9f\037\072\001\002" +
    "\000\004\034\uffa0\001\002\000\044\003\uff91\011\026\016" +
    "\uff91\017\uff91\020\uff91\021\uff91\022\uff91\023\uff91\024\uff91" +
    "\025\uff91\030\uff91\032\uff91\034\uff91\036\uff91\037\uff91\040" +
    "\uff91\043\uff91\001\002\000\006\025\074\030\130\001\002" +
    "\000\060\003\uff84\007\uff84\010\uff84\011\uff84\012\uff84\013" +
    "\uff84\016\uff84\017\uff84\020\uff84\021\uff84\022\uff84\023\uff84" +
    "\024\uff84\025\uff84\030\uff84\031\uff84\032\uff84\034\uff84\036" +
    "\uff84\037\uff84\040\uff84\042\uff84\043\uff84\001\002\000\004" +
    "\066\135\001\002\000\034\011\062\014\064\015\055\026" +
    "\032\027\051\033\054\041\060\061\031\065\053\066\034" +
    "\067\063\070\037\071\052\001\002\000\006\025\074\032" +
    "\134\001\002\000\060\003\uff86\007\uff86\010\uff86\011\uff86" +
    "\012\uff86\013\uff86\016\uff86\017\uff86\020\uff86\021\uff86\022" +
    "\uff86\023\uff86\024\uff86\025\uff86\030\uff86\031\uff86\032\uff86" +
    "\034\uff86\036\uff86\037\uff86\040\uff86\042\uff86\043\uff86\001" +
    "\002\000\060\003\uff85\007\uff85\010\uff85\011\uff85\012\uff85" +
    "\013\uff85\016\uff85\017\uff85\020\uff85\021\uff85\022\uff85\023" +
    "\uff85\024\uff85\025\uff85\030\uff85\031\uff85\032\uff85\034\uff85" +
    "\036\uff85\037\uff85\040\uff85\042\uff85\043\uff85\001\002\000" +
    "\024\002\ufff4\004\ufff4\005\ufff4\006\ufff4\051\ufff4\062\ufff4" +
    "\063\ufff4\064\ufff4\066\ufff4\001\002\000\024\002\ufff3\004" +
    "\ufff3\005\ufff3\006\ufff3\051\ufff3\062\ufff3\063\ufff3\064\ufff3" +
    "\066\ufff3\001\002\000\036\011\062\014\064\015\055\026" +
    "\032\027\051\030\uffd2\033\054\041\060\061\031\065\053" +
    "\066\034\067\063\070\037\071\052\001\002\000\004\030" +
    "\146\001\002\000\010\025\074\030\uffd0\037\144\001\002" +
    "\000\004\030\uffd3\001\002\000\034\011\062\014\064\015" +
    "\055\026\032\027\051\033\054\041\060\061\031\065\053" +
    "\066\034\067\063\070\037\071\052\001\002\000\004\030" +
    "\uffd1\001\002\000\054\003\uffd4\007\uffd4\010\uffd4\011\uffd4" +
    "\012\uffd4\013\uffd4\016\uffd4\017\uffd4\020\uffd4\021\uffd4\022" +
    "\uffd4\023\uffd4\024\uffd4\025\uffd4\030\uffd4\032\uffd4\034\uffd4" +
    "\036\uffd4\037\uffd4\040\uffd4\043\uffd4\001\002\000\054\003" +
    "\uffab\007\uffab\010\uffab\011\uffab\012\uffab\013\uffab\016\uffab" +
    "\017\uffab\020\uffab\021\uffab\022\uffab\023\uffab\024\uffab\025" +
    "\uffab\030\uffab\032\uffab\034\uffab\036\uffab\037\uffab\040\uffab" +
    "\043\uffab\001\002\000\004\030\151\001\002\000\054\003" +
    "\uffda\007\uffda\010\uffda\011\uffda\012\uffda\013\uffda\016\uffda" +
    "\017\uffda\020\uffda\021\uffda\022\uffda\023\uffda\024\uffda\025" +
    "\uffda\030\uffda\032\uffda\034\uffda\036\uffda\037\uffda\040\uffda" +
    "\043\uffda\001\002\000\004\002\uffff\001\002\000\004\002" +
    "\ufffb\001\002\000\010\003\156\036\157\040\155\001\002" +
    "\000\104\002\ufff9\003\ufff9\004\ufff9\005\ufff9\006\ufff9\011" +
    "\ufff9\014\ufff9\015\ufff9\026\ufff9\027\ufff9\033\ufff9\034\ufff9" +
    "\040\ufff9\041\ufff9\044\ufff9\045\ufff9\046\ufff9\047\ufff9\051" +
    "\ufff9\052\ufff9\053\ufff9\055\ufff9\057\ufff9\060\ufff9\061\ufff9" +
    "\062\ufff9\063\ufff9\064\ufff9\065\ufff9\066\ufff9\067\ufff9\070" +
    "\ufff9\071\ufff9\001\002\000\104\002\ufff7\003\ufff7\004\ufff7" +
    "\005\ufff7\006\ufff7\011\ufff7\014\ufff7\015\ufff7\026\ufff7\027" +
    "\ufff7\033\ufff7\034\ufff7\040\ufff7\041\ufff7\044\ufff7\045\ufff7" +
    "\046\ufff7\047\ufff7\051\ufff7\052\ufff7\053\ufff7\055\ufff7\057" +
    "\ufff7\060\ufff7\061\ufff7\062\ufff7\063\ufff7\064\ufff7\065\ufff7" +
    "\066\ufff7\067\ufff7\070\ufff7\071\ufff7\001\002\000\034\011" +
    "\062\014\064\015\055\026\032\027\051\033\054\041\060" +
    "\061\031\065\053\066\034\067\063\070\037\071\052\001" +
    "\002\000\006\025\074\040\161\001\002\000\104\002\ufff8" +
    "\003\ufff8\004\ufff8\005\ufff8\006\ufff8\011\ufff8\014\ufff8\015" +
    "\ufff8\026\ufff8\027\ufff8\033\ufff8\034\ufff8\040\ufff8\041\ufff8" +
    "\044\ufff8\045\ufff8\046\ufff8\047\ufff8\051\ufff8\052\ufff8\053" +
    "\ufff8\055\ufff8\057\ufff8\060\ufff8\061\ufff8\062\ufff8\063\ufff8" +
    "\064\ufff8\065\ufff8\066\ufff8\067\ufff8\070\ufff8\071\ufff8\001" +
    "\002\000\014\004\021\005\022\006\010\064\015\066\024" +
    "\001\002\000\006\011\026\016\164\001\002\000\004\031" +
    "\165\001\002\000\004\067\166\001\002\000\004\032\167" +
    "\001\002\000\050\003\uff8c\011\uff8c\016\uff8c\017\uff8c\020" +
    "\uff8c\021\uff8c\022\uff8c\023\uff8c\024\uff8c\025\uff8c\030\uff8c" +
    "\032\uff8c\033\uff8c\034\uff8c\036\uff8c\037\uff8c\040\uff8c\043" +
    "\uff8c\066\uff8c\001\002\000\004\036\171\001\002\000\014" +
    "\004\021\005\022\006\010\064\015\066\024\001\002\000" +
    "\010\003\174\011\026\040\173\001\002\000\024\002\uffee" +
    "\004\uffee\005\uffee\006\uffee\051\uffee\062\uffee\063\uffee\064" +
    "\uffee\066\uffee\001\002\000\024\002\uffed\004\uffed\005\uffed" +
    "\006\uffed\051\uffed\062\uffed\063\uffed\064\uffed\066\uffed\001" +
    "\002\000\004\002\ufffd\001\002\000\004\002\ufffc\001\002" +
    "\000\004\002\000\001\002\000\004\033\201\001\002\000" +
    "\014\004\021\005\022\006\010\064\015\066\024\001\002" +
    "\000\016\004\021\005\022\006\010\034\uffef\064\015\066" +
    "\024\001\002\000\004\034\204\001\002\000\006\003\206" +
    "\040\205\001\002\000\024\002\ufff2\004\ufff2\005\ufff2\006" +
    "\ufff2\051\ufff2\062\ufff2\063\ufff2\064\ufff2\066\ufff2\001\002" +
    "\000\024\002\ufff1\004\ufff1\005\ufff1\006\ufff1\051\ufff1\062" +
    "\ufff1\063\ufff1\064\ufff1\066\ufff1\001\002\000\004\034\ufff0" +
    "\001\002\000\006\030\uffea\066\213\001\002\000\004\030" +
    "\uffeb\001\002\000\004\030\223\001\002\000\004\043\217" +
    "\001\002\000\006\030\uffe8\037\215\001\002\000\004\066" +
    "\213\001\002\000\004\030\uffe9\001\002\000\016\004\021" +
    "\005\022\006\010\041\220\064\015\066\024\001\002\000" +
    "\014\004\021\005\022\006\010\064\015\066\024\001\002" +
    "\000\010\011\026\030\uffe7\037\uffe7\001\002\000\010\011" +
    "\026\030\uffe6\037\uffe6\001\002\000\004\035\224\001\002" +
    "\000\014\004\021\005\022\006\010\064\015\066\024\001" +
    "\002\000\006\011\026\033\227\001\002\000\024\002\uffec" +
    "\004\uffec\005\uffec\006\uffec\051\uffec\062\uffec\063\uffec\064" +
    "\uffec\066\uffec\001\002\000\050\003\244\004\021\005\022" +
    "\006\010\011\062\027\051\033\227\034\uffe3\041\060\044" +
    "\230\045\251\046\253\047\236\052\235\053\241\057\233" +
    "\060\232\064\015\066\234\001\002\000\004\027\u0100\001" +
    "\002\000\054\003\uffcf\004\uffcf\005\uffcf\006\uffcf\011\uffcf" +
    "\027\uffcf\033\uffcf\034\uffcf\040\uffcf\041\uffcf\044\uffcf\045" +
    "\uffcf\046\uffcf\047\uffcf\052\uffcf\053\uffcf\055\uffcf\057\uffcf" +
    "\060\uffcf\064\uffcf\066\uffcf\001\002\000\004\027\373\001" +
    "\002\000\040\003\371\011\062\014\064\015\055\026\032" +
    "\027\051\033\054\040\367\041\060\061\031\065\053\066" +
    "\034\067\063\070\037\071\052\001\002\000\016\011\uff8d" +
    "\027\140\031\uff87\036\uff87\042\uff87\066\uff8d\001\002\000" +
    "\004\027\343\001\002\000\004\027\335\001\002\000\004" +
    "\034\334\001\002\000\054\003\244\004\021\005\022\006" +
    "\010\011\062\027\051\033\227\034\uffe3\040\uffe3\041\060" +
    "\044\230\045\251\046\253\047\236\052\235\053\241\055" +
    "\uffe3\057\233\060\232\064\015\066\234\001\002\000\004" +
    "\027\305\001\002\000\054\003\uffe0\004\uffe0\005\uffe0\006" +
    "\uffe0\011\uffe0\027\uffe0\033\uffe0\034\uffe0\040\uffe0\041\uffe0" +
    "\044\uffe0\045\uffe0\046\uffe0\047\uffe0\052\uffe0\053\uffe0\055" +
    "\uffe0\057\uffe0\060\uffe0\064\uffe0\066\uffe0\001\002\000\004" +
    "\036\301\001\002\000\004\040\300\001\002\000\054\003" +
    "\uffde\004\uffde\005\uffde\006\uffde\011\uffde\027\uffde\033\uffde" +
    "\034\uffde\040\uffde\041\uffde\044\uffde\045\uffde\046\uffde\047" +
    "\uffde\052\uffde\053\uffde\055\uffde\057\uffde\060\uffde\064\uffde" +
    "\066\uffde\001\002\000\054\003\uffe2\004\uffe2\005\uffe2\006" +
    "\uffe2\011\uffe2\027\uffe2\033\uffe2\034\uffe2\040\uffe2\041\uffe2" +
    "\044\uffe2\045\uffe2\046\uffe2\047\uffe2\052\uffe2\053\uffe2\055" +
    "\uffe2\057\uffe2\060\uffe2\064\uffe2\066\uffe2\001\002\000\054" +
    "\003\uffcd\004\uffcd\005\uffcd\006\uffcd\011\uffcd\027\uffcd\033" +
    "\uffcd\034\uffcd\040\uffcd\041\uffcd\044\uffcd\045\uffcd\046\uffcd" +
    "\047\uffcd\052\uffcd\053\uffcd\055\uffcd\057\uffcd\060\uffcd\064" +
    "\uffcd\066\uffcd\001\002\000\054\003\uffdf\004\uffdf\005\uffdf" +
    "\006\uffdf\011\uffdf\027\uffdf\033\uffdf\034\uffdf\040\uffdf\041" +
    "\uffdf\044\uffdf\045\uffdf\046\uffdf\047\uffdf\052\uffdf\053\uffdf" +
    "\055\uffdf\057\uffdf\060\uffdf\064\uffdf\066\uffdf\001\002\000" +
    "\004\027\267\001\002\000\006\003\266\040\265\001\002" +
    "\000\004\027\261\001\002\000\054\003\uffe1\004\uffe1\005" +
    "\uffe1\006\uffe1\011\uffe1\027\uffe1\033\uffe1\034\uffe1\040\uffe1" +
    "\041\uffe1\044\uffe1\045\uffe1\046\uffe1\047\uffe1\052\uffe1\053" +
    "\uffe1\055\uffe1\057\uffe1\060\uffe1\064\uffe1\066\uffe1\001\002" +
    "\000\054\003\244\004\021\005\022\006\010\011\062\027" +
    "\051\033\227\034\uffe3\040\uffe3\041\060\044\230\045\251" +
    "\046\253\047\236\052\235\053\241\055\uffe3\057\233\060" +
    "\232\064\015\066\234\001\002\000\054\003\uffcc\004\uffcc" +
    "\005\uffcc\006\uffcc\011\uffcc\027\uffcc\033\uffcc\034\uffcc\040" +
    "\uffcc\041\uffcc\044\uffcc\045\uffcc\046\uffcc\047\uffcc\052\uffcc" +
    "\053\uffcc\055\uffcc\057\uffcc\060\uffcc\064\uffcc\066\uffcc\001" +
    "\002\000\054\003\uffce\004\uffce\005\uffce\006\uffce\011\uffce" +
    "\027\uffce\033\uffce\034\uffce\040\uffce\041\uffce\044\uffce\045" +
    "\uffce\046\uffce\047\uffce\052\uffce\053\uffce\055\uffce\057\uffce" +
    "\060\uffce\064\uffce\066\uffce\001\002\000\010\034\uffe4\040" +
    "\uffe4\055\uffe4\001\002\000\034\011\062\014\064\015\055" +
    "\026\032\027\051\033\054\041\060\061\031\065\053\066" +
    "\034\067\063\070\037\071\052\001\002\000\006\025\074" +
    "\030\263\001\002\000\004\033\227\001\002\000\054\003" +
    "\uffc6\004\uffc6\005\uffc6\006\uffc6\011\uffc6\027\uffc6\033\uffc6" +
    "\034\uffc6\040\uffc6\041\uffc6\044\uffc6\045\uffc6\046\uffc6\047" +
    "\uffc6\052\uffc6\053\uffc6\055\uffc6\057\uffc6\060\uffc6\064\uffc6" +
    "\066\uffc6\001\002\000\054\003\uffd6\004\uffd6\005\uffd6\006" +
    "\uffd6\011\uffd6\027\uffd6\033\uffd6\034\uffd6\040\uffd6\041\uffd6" +
    "\044\uffd6\045\uffd6\046\uffd6\047\uffd6\052\uffd6\053\uffd6\055" +
    "\uffd6\057\uffd6\060\uffd6\064\uffd6\066\uffd6\001\002\000\054" +
    "\003\uffd5\004\uffd5\005\uffd5\006\uffd5\011\uffd5\027\uffd5\033" +
    "\uffd5\034\uffd5\040\uffd5\041\uffd5\044\uffd5\045\uffd5\046\uffd5" +
    "\047\uffd5\052\uffd5\053\uffd5\055\uffd5\057\uffd5\060\uffd5\064" +
    "\uffd5\066\uffd5\001\002\000\014\004\021\005\022\006\010" +
    "\064\015\066\024\001\002\000\034\011\062\014\064\015" +
    "\055\026\032\027\051\033\054\041\060\061\031\065\053" +
    "\066\034\067\063\070\037\071\052\001\002\000\006\025" +
    "\074\040\272\001\002\000\012\011\062\027\051\041\060" +
    "\066\065\001\002\000\004\036\274\001\002\000\034\011" +
    "\062\014\064\015\055\026\032\027\051\033\054\041\060" +
    "\061\031\065\053\066\034\067\063\070\037\071\052\001" +
    "\002\000\006\025\074\030\276\001\002\000\004\033\227" +
    "\001\002\000\054\003\uffc7\004\uffc7\005\uffc7\006\uffc7\011" +
    "\uffc7\027\uffc7\033\uffc7\034\uffc7\040\uffc7\041\uffc7\044\uffc7" +
    "\045\uffc7\046\uffc7\047\uffc7\052\uffc7\053\uffc7\055\uffc7\057" +
    "\uffc7\060\uffc7\064\uffc7\066\uffc7\001\002\000\054\003\uffdd" +
    "\004\uffdd\005\uffdd\006\uffdd\011\uffdd\027\uffdd\033\uffdd\034" +
    "\uffdd\040\uffdd\041\uffdd\044\uffdd\045\uffdd\046\uffdd\047\uffdd" +
    "\052\uffdd\053\uffdd\055\uffdd\057\uffdd\060\uffdd\064\uffdd\066" +
    "\uffdd\001\002\000\034\011\062\014\064\015\055\026\032" +
    "\027\051\033\054\041\060\061\031\065\053\066\034\067" +
    "\063\070\037\071\052\001\002\000\010\003\304\025\074" +
    "\040\303\001\002\000\054\003\ufff6\004\ufff6\005\ufff6\006" +
    "\ufff6\011\ufff6\027\ufff6\033\ufff6\034\ufff6\040\ufff6\041\ufff6" +
    "\044\ufff6\045\ufff6\046\ufff6\047\ufff6\052\ufff6\053\ufff6\055" +
    "\ufff6\057\ufff6\060\ufff6\064\ufff6\066\ufff6\001\002\000\054" +
    "\003\ufff5\004\ufff5\005\ufff5\006\ufff5\011\ufff5\027\ufff5\033" +
    "\ufff5\034\ufff5\040\ufff5\041\ufff5\044\ufff5\045\ufff5\046\ufff5" +
    "\047\ufff5\052\ufff5\053\ufff5\055\ufff5\057\ufff5\060\ufff5\064" +
    "\ufff5\066\ufff5\001\002\000\012\011\062\027\051\041\060" +
    "\066\065\001\002\000\004\030\307\001\002\000\004\033" +
    "\310\001\002\000\010\034\uffbb\054\312\056\uffbb\001\002" +
    "\000\006\034\325\056\323\001\002\000\034\011\062\014" +
    "\064\015\055\026\032\027\051\033\054\041\060\061\031" +
    "\065\053\066\034\067\063\070\037\071\052\001\002\000" +
    "\006\025\074\036\314\001\002\000\034\011\062\014\064" +
    "\015\055\026\032\027\051\033\054\041\060\061\031\065" +
    "\053\066\034\067\063\070\037\071\052\001\002\000\006" +
    "\025\074\040\316\001\002\000\012\034\uffbb\054\312\055" +
    "\317\056\uffbb\001\002\000\004\040\321\001\002\000\006" +
    "\034\uffbc\056\uffbc\001\002\000\010\034\uffbb\054\312\056" +
    "\uffbb\001\002\000\006\034\uffbd\056\uffbd\001\002\000\004" +
    "\036\327\001\002\000\004\034\326\001\002\000\054\003" +
    "\uffc2\004\uffc2\005\uffc2\006\uffc2\011\uffc2\027\uffc2\033\uffc2" +
    "\034\uffc2\040\uffc2\041\uffc2\044\uffc2\045\uffc2\046\uffc2\047" +
    "\uffc2\052\uffc2\053\uffc2\055\uffc2\057\uffc2\060\uffc2\064\uffc2" +
    "\066\uffc2\001\002\000\054\003\uffc3\004\uffc3\005\uffc3\006" +
    "\uffc3\011\uffc3\027\uffc3\033\uffc3\034\uffc3\040\uffc3\041\uffc3" +
    "\044\uffc3\045\uffc3\046\uffc3\047\uffc3\052\uffc3\053\uffc3\055" +
    "\uffc3\057\uffc3\060\uffc3\064\uffc3\066\uffc3\001\002\000\034" +
    "\011\062\014\064\015\055\026\032\027\051\033\054\041" +
    "\060\061\031\065\053\066\034\067\063\070\037\071\052" +
    "\001\002\000\010\003\332\025\074\040\331\001\002\000" +
    "\004\034\uffba\001\002\000\004\034\uffb9\001\002\000\010" +
    "\034\uffe5\040\uffe5\055\uffe5\001\002\000\066\002\uffcb\003" +
    "\uffcb\004\uffcb\005\uffcb\006\uffcb\011\uffcb\027\uffcb\033\uffcb" +
    "\034\uffcb\040\uffcb\041\uffcb\044\uffcb\045\uffcb\046\uffcb\047" +
    "\uffcb\050\uffcb\051\uffcb\052\uffcb\053\uffcb\055\uffcb\057\uffcb" +
    "\060\uffcb\062\uffcb\063\uffcb\064\uffcb\066\uffcb\001\002\000" +
    "\034\011\062\014\064\015\055\026\032\027\051\033\054" +
    "\041\060\061\031\065\053\066\034\067\063\070\037\071" +
    "\052\001\002\000\006\025\074\030\337\001\002\000\004" +
    "\033\227\001\002\000\056\003\uffca\004\uffca\005\uffca\006" +
    "\uffca\011\uffca\027\uffca\033\uffca\034\uffca\040\uffca\041\uffca" +
    "\044\uffca\045\uffca\046\uffca\047\uffca\050\341\052\uffca\053" +
    "\uffca\055\uffca\057\uffca\060\uffca\064\uffca\066\uffca\001\002" +
    "\000\004\033\227\001\002\000\054\003\uffc9\004\uffc9\005" +
    "\uffc9\006\uffc9\011\uffc9\027\uffc9\033\uffc9\034\uffc9\040\uffc9" +
    "\041\uffc9\044\uffc9\045\uffc9\046\uffc9\047\uffc9\052\uffc9\053" +
    "\uffc9\055\uffc9\057\uffc9\060\uffc9\064\uffc9\066\uffc9\001\002" +
    "\000\034\011\062\014\064\015\055\026\032\027\051\033" +
    "\054\041\060\061\031\065\053\066\034\067\063\070\037" +
    "\071\052\001\002\000\006\025\074\030\345\001\002\000" +
    "\004\033\346\001\002\000\010\034\uffbf\054\350\056\uffbf" +
    "\001\002\000\006\034\363\056\361\001\002\000\034\011" +
    "\062\014\064\015\055\026\032\027\051\033\054\041\060" +
    "\061\031\065\053\066\034\067\063\070\037\071\052\001" +
    "\002\000\006\025\074\043\352\001\002\000\052\003\244" +
    "\004\021\005\022\006\010\011\062\027\051\033\227\040" +
    "\uffe3\041\060\044\230\045\251\046\253\047\236\052\235" +
    "\053\241\055\uffe3\057\233\060\232\064\015\066\234\001" +
    "\002\000\006\040\354\055\355\001\002\000\010\034\uffbf" +
    "\054\350\056\uffbf\001\002\000\004\040\356\001\002\000" +
    "\010\034\uffbf\054\350\056\uffbf\001\002\000\006\034\uffc1" +
    "\056\uffc1\001\002\000\006\034\uffc0\056\uffc0\001\002\000" +
    "\004\043\365\001\002\000\004\034\364\001\002\000\054" +
    "\003\uffc4\004\uffc4\005\uffc4\006\uffc4\011\uffc4\027\uffc4\033" +
    "\uffc4\034\uffc4\040\uffc4\041\uffc4\044\uffc4\045\uffc4\046\uffc4" +
    "\047\uffc4\052\uffc4\053\uffc4\055\uffc4\057\uffc4\060\uffc4\064" +
    "\uffc4\066\uffc4\001\002\000\054\003\uffc5\004\uffc5\005\uffc5" +
    "\006\uffc5\011\uffc5\027\uffc5\033\uffc5\034\uffc5\040\uffc5\041" +
    "\uffc5\044\uffc5\045\uffc5\046\uffc5\047\uffc5\052\uffc5\053\uffc5" +
    "\055\uffc5\057\uffc5\060\uffc5\064\uffc5\066\uffc5\001\002\000" +
    "\050\003\244\004\021\005\022\006\010\011\062\027\051" +
    "\033\227\034\uffe3\041\060\044\230\045\251\046\253\047" +
    "\236\052\235\053\241\057\233\060\232\064\015\066\234" +
    "\001\002\000\004\034\uffbe\001\002\000\054\003\uffd8\004" +
    "\uffd8\005\uffd8\006\uffd8\011\uffd8\027\uffd8\033\uffd8\034\uffd8" +
    "\040\uffd8\041\uffd8\044\uffd8\045\uffd8\046\uffd8\047\uffd8\052" +
    "\uffd8\053\uffd8\055\uffd8\057\uffd8\060\uffd8\064\uffd8\066\uffd8" +
    "\001\002\000\006\025\074\040\372\001\002\000\054\003" +
    "\uffd7\004\uffd7\005\uffd7\006\uffd7\011\uffd7\027\uffd7\033\uffd7" +
    "\034\uffd7\040\uffd7\041\uffd7\044\uffd7\045\uffd7\046\uffd7\047" +
    "\uffd7\052\uffd7\053\uffd7\055\uffd7\057\uffd7\060\uffd7\064\uffd7" +
    "\066\uffd7\001\002\000\054\003\uffd9\004\uffd9\005\uffd9\006" +
    "\uffd9\011\uffd9\027\uffd9\033\uffd9\034\uffd9\040\uffd9\041\uffd9" +
    "\044\uffd9\045\uffd9\046\uffd9\047\uffd9\052\uffd9\053\uffd9\055" +
    "\uffd9\057\uffd9\060\uffd9\064\uffd9\066\uffd9\001\002\000\034" +
    "\011\062\014\064\015\055\026\032\027\051\033\054\041" +
    "\060\061\031\065\053\066\034\067\063\070\037\071\052" +
    "\001\002\000\006\025\074\030\375\001\002\000\006\003" +
    "\377\040\376\001\002\000\054\003\uffdc\004\uffdc\005\uffdc" +
    "\006\uffdc\011\uffdc\027\uffdc\033\uffdc\034\uffdc\040\uffdc\041" +
    "\uffdc\044\uffdc\045\uffdc\046\uffdc\047\uffdc\052\uffdc\053\uffdc" +
    "\055\uffdc\057\uffdc\060\uffdc\064\uffdc\066\uffdc\001\002\000" +
    "\054\003\uffdb\004\uffdb\005\uffdb\006\uffdb\011\uffdb\027\uffdb" +
    "\033\uffdb\034\uffdb\040\uffdb\041\uffdb\044\uffdb\045\uffdb\046" +
    "\uffdb\047\uffdb\052\uffdb\053\uffdb\055\uffdb\057\uffdb\060\uffdb" +
    "\064\uffdb\066\uffdb\001\002\000\034\011\062\014\064\015" +
    "\055\026\032\027\051\033\054\041\060\061\031\065\053" +
    "\066\034\067\063\070\037\071\052\001\002\000\006\025" +
    "\074\030\u0102\001\002\000\004\033\227\001\002\000\054" +
    "\003\uffc8\004\uffc8\005\uffc8\006\uffc8\011\uffc8\027\uffc8\033" +
    "\uffc8\034\uffc8\040\uffc8\041\uffc8\044\uffc8\045\uffc8\046\uffc8" +
    "\047\uffc8\052\uffc8\053\uffc8\055\uffc8\057\uffc8\060\uffc8\064" +
    "\uffc8\066\uffc8\001\002\000\004\002\ufffe\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0102\000\022\002\010\003\015\030\004\031\017\032" +
    "\003\033\012\034\016\035\011\001\001\000\020\003\015" +
    "\030\u0103\031\017\032\003\033\012\034\016\035\011\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\003\015\030" +
    "\175\031\017\032\003\033\012\034\016\035\011\001\001" +
    "\000\020\003\015\030\174\031\017\032\003\033\012\034" +
    "\016\035\011\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\003\015\030\152\031\017\032" +
    "\003\033\012\034\016\035\011\001\001\000\020\003\015" +
    "\030\151\031\017\032\003\033\012\034\016\035\011\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\003\024" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\040\004\045\005\044\006\043" +
    "\007\042\010\041\011\040\012\035\013\034\014\032\015" +
    "\047\016\046\017\037\020\055\021\060\027\056\001\001" +
    "\000\002\001\001\000\022\012\146\013\034\014\032\015" +
    "\047\016\046\020\055\021\060\027\056\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\026\115" +
    "\001\001\000\004\025\113\001\001\000\004\024\104\001" +
    "\001\000\004\023\100\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\040\004" +
    "\126\005\044\006\043\007\042\010\041\011\040\012\035" +
    "\013\034\014\032\015\047\016\046\017\037\020\055\021" +
    "\060\027\056\001\001\000\002\001\001\000\004\003\125" +
    "\001\001\000\040\004\070\005\044\006\043\007\042\010" +
    "\041\011\040\012\035\013\034\014\032\015\047\016\046" +
    "\017\037\020\055\021\060\027\056\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\013\067\014\032\015\047" +
    "\016\046\020\055\021\060\027\056\001\001\000\006\015" +
    "\066\016\046\001\001\000\002\001\001\000\006\015\065" +
    "\016\046\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\022\072\001\001\000\040\004\123\005" +
    "\044\006\043\007\042\010\041\011\040\012\035\013\034" +
    "\014\032\015\047\016\046\017\037\020\055\021\060\027" +
    "\056\001\001\000\002\001\001\000\036\005\074\006\043" +
    "\007\042\010\041\011\040\012\035\013\034\014\032\015" +
    "\047\016\046\017\037\020\055\021\060\027\056\001\001" +
    "\000\002\001\001\000\034\006\076\007\042\010\041\011" +
    "\040\012\035\013\034\014\032\015\047\016\046\017\037" +
    "\020\055\021\060\027\056\001\001\000\004\023\100\001" +
    "\001\000\002\001\001\000\032\007\102\010\041\011\040" +
    "\012\035\013\034\014\032\015\047\016\046\017\037\020" +
    "\055\021\060\027\056\001\001\000\002\001\001\000\004" +
    "\024\104\001\001\000\002\001\001\000\026\010\110\011" +
    "\040\012\035\013\034\014\032\015\047\016\046\020\055" +
    "\021\060\027\056\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\025\113\001\001\000\002" +
    "\001\001\000\002\001\001\000\024\011\114\012\035\013" +
    "\034\014\032\015\047\016\046\020\055\021\060\027\056" +
    "\001\001\000\004\026\115\001\001\000\022\012\121\013" +
    "\034\014\032\015\047\016\046\020\055\021\060\027\056" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\022\124" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\040\004\132" +
    "\005\044\006\043\007\042\010\041\011\040\012\035\013" +
    "\034\014\032\015\047\016\046\017\037\020\055\021\060" +
    "\027\056\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\044" +
    "\004\141\005\044\006\043\007\042\010\041\011\040\012" +
    "\035\013\034\014\032\015\047\016\046\017\037\020\055" +
    "\021\060\027\056\047\140\050\142\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\042\004\141" +
    "\005\044\006\043\007\042\010\041\011\040\012\035\013" +
    "\034\014\032\015\047\016\046\017\037\020\055\021\060" +
    "\027\056\050\144\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\040\004\157\005\044" +
    "\006\043\007\042\010\041\011\040\012\035\013\034\014" +
    "\032\015\047\016\046\017\037\020\055\021\060\027\056" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\003" +
    "\162\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\003\171\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\003\015" +
    "\031\201\037\202\001\001\000\010\003\015\031\201\037" +
    "\206\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\040" +
    "\213\041\210\042\211\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\040" +
    "\213\041\215\001\001\000\002\001\001\000\004\003\220" +
    "\001\001\000\004\003\221\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\003\224\001\001" +
    "\000\004\043\225\001\001\000\002\001\001\000\042\003" +
    "\015\015\242\016\046\021\251\031\245\036\253\043\230" +
    "\044\236\045\241\046\247\051\244\052\256\053\246\054" +
    "\255\055\254\056\237\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\040\004\367\005\044\006" +
    "\043\007\042\010\041\011\040\012\035\013\034\014\032" +
    "\015\047\016\046\017\037\020\055\021\060\027\056\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\042\003\015\015\242\016\046\021" +
    "\251\031\245\036\253\043\230\044\332\045\241\046\247" +
    "\051\244\052\256\053\246\054\255\055\254\056\237\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\042\003" +
    "\015\015\242\016\046\021\251\031\245\036\253\043\230" +
    "\044\257\045\241\046\247\051\244\052\256\053\246\054" +
    "\255\055\254\056\237\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\040\004\261\005\044\006" +
    "\043\007\042\010\041\011\040\012\035\013\034\014\032" +
    "\015\047\016\046\017\037\020\055\021\060\027\056\001" +
    "\001\000\002\001\001\000\004\043\263\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\003" +
    "\015\031\267\001\001\000\040\004\270\005\044\006\043" +
    "\007\042\010\041\011\040\012\035\013\034\014\032\015" +
    "\047\016\046\017\037\020\055\021\060\027\056\001\001" +
    "\000\002\001\001\000\006\015\272\016\046\001\001\000" +
    "\002\001\001\000\040\004\274\005\044\006\043\007\042" +
    "\010\041\011\040\012\035\013\034\014\032\015\047\016" +
    "\046\017\037\020\055\021\060\027\056\001\001\000\002" +
    "\001\001\000\004\043\276\001\001\000\002\001\001\000" +
    "\002\001\001\000\040\004\301\005\044\006\043\007\042" +
    "\010\041\011\040\012\035\013\034\014\032\015\047\016" +
    "\046\017\037\020\055\021\060\027\056\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\015" +
    "\305\016\046\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\061\310\001\001\000\004\062\323\001\001\000" +
    "\040\004\312\005\044\006\043\007\042\010\041\011\040" +
    "\012\035\013\034\014\032\015\047\016\046\017\037\020" +
    "\055\021\060\027\056\001\001\000\002\001\001\000\040" +
    "\004\314\005\044\006\043\007\042\010\041\011\040\012" +
    "\035\013\034\014\032\015\047\016\046\017\037\020\055" +
    "\021\060\027\056\001\001\000\002\001\001\000\004\061" +
    "\317\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\061\321\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\040" +
    "\004\327\005\044\006\043\007\042\010\041\011\040\012" +
    "\035\013\034\014\032\015\047\016\046\017\037\020\055" +
    "\021\060\027\056\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\040\004\335\005\044\006\043\007\042\010\041\011" +
    "\040\012\035\013\034\014\032\015\047\016\046\017\037" +
    "\020\055\021\060\027\056\001\001\000\002\001\001\000" +
    "\004\043\337\001\001\000\002\001\001\000\004\043\341" +
    "\001\001\000\002\001\001\000\040\004\343\005\044\006" +
    "\043\007\042\010\041\011\040\012\035\013\034\014\032" +
    "\015\047\016\046\017\037\020\055\021\060\027\056\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\057\346" +
    "\001\001\000\004\060\361\001\001\000\040\004\350\005" +
    "\044\006\043\007\042\010\041\011\040\012\035\013\034" +
    "\014\032\015\047\016\046\017\037\020\055\021\060\027" +
    "\056\001\001\000\002\001\001\000\042\003\015\015\242" +
    "\016\046\021\251\031\245\036\253\043\230\044\352\045" +
    "\241\046\247\051\244\052\256\053\246\054\255\055\254" +
    "\056\237\001\001\000\002\001\001\000\004\057\357\001" +
    "\001\000\002\001\001\000\004\057\356\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\042\003\015" +
    "\015\242\016\046\021\251\031\245\036\253\043\230\044" +
    "\365\045\241\046\247\051\244\052\256\053\246\054\255" +
    "\055\254\056\237\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\040\004\373\005\044\006\043\007\042\010\041\011" +
    "\040\012\035\013\034\014\032\015\047\016\046\017\037" +
    "\020\055\021\060\027\056\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\040" +
    "\004\u0100\005\044\006\043\007\042\010\041\011\040\012" +
    "\035\013\034\014\032\015\047\016\046\017\037\020\055" +
    "\021\060\027\056\001\001\000\002\001\001\000\004\043" +
    "\u0102\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$AnalizadorSintacticoTiny$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$AnalizadorSintacticoTiny$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$AnalizadorSintacticoTiny$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 
   errores = new GestionErroresTiny();
   AnalizadorLexicoTiny alex = (AnalizadorLexicoTiny)getScanner();
   alex.fijaGestionErrores(errores);

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return getScanner().next_token(); 
    }

 
   private GestionErroresTiny errores;
   public void syntax_error(Symbol unidadLexica) {
     errores.errorSintactico((UnidadLexica)unidadLexica);
   }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$AnalizadorSintacticoTiny$actions {
  private final AnalizadorSintacticoTiny parser;

  /** Constructor */
  CUP$AnalizadorSintacticoTiny$actions(AnalizadorSintacticoTiny parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintacticoTiny$do_action_part00000000(
    int                        CUP$AnalizadorSintacticoTiny$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintacticoTiny$parser,
    java.util.Stack            CUP$AnalizadorSintacticoTiny$stack,
    int                        CUP$AnalizadorSintacticoTiny$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$AnalizadorSintacticoTiny$result;

      /* select the action based on the action number */
      switch (CUP$AnalizadorSintacticoTiny$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // S ::= DECLARATIONS 
            {
              Object RESULT =null;
		DefinitionList declarations = (DefinitionList)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = new Program(declarations);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("S",0, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= S EOF 
            {
              Object RESULT =null;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		RESULT = start_val;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("$START",0, RESULT);
            }
          /* ACCEPT */
          CUP$AnalizadorSintacticoTiny$parser.done_parsing();
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // DECLARATIONS ::= DECLARATION DECLARATIONS 
            {
              DefinitionList RESULT =null;
		IDeclaration d = (IDeclaration)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		DefinitionList list = (DefinitionList)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		list.addVar(d); RESULT = list;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("DECLARATIONS",22, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // DECLARATIONS ::= CONSTVAR DECLARATIONS 
            {
              DefinitionList RESULT =null;
		DConst c = (DConst)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		DefinitionList list = (DefinitionList)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		list.addConst(c); RESULT = list;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("DECLARATIONS",22, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // DECLARATIONS ::= STRUCTDEC DECLARATIONS 
            {
              DefinitionList RESULT =null;
		DStruct s = (DStruct)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		DefinitionList list = (DefinitionList)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		list.addStruct(s); RESULT = list;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("DECLARATIONS",22, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // DECLARATIONS ::= TYPEDEFDEC DECLARATIONS 
            {
              DefinitionList RESULT =null;
		DTypedef t = (DTypedef)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		DefinitionList list = (DefinitionList)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		list.addTypedef(t); RESULT = list;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("DECLARATIONS",22, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // DECLARATIONS ::= FUNCDEC DECLARATIONS 
            {
              DefinitionList RESULT =null;
		DFunction f = (DFunction)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		DefinitionList list = (DefinitionList)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		list.addFunc(f); RESULT = list;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("DECLARATIONS",22, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // DECLARATIONS ::= 
            {
              DefinitionList RESULT =null;
		RESULT = new DefinitionList();
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("DECLARATIONS",22, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // DECLARATION ::= TYPE IDEN PUNTOYCOMA 
            {
              IDeclaration RESULT =null;
		T t = (T)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		TokenValue name = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		IDeclaration var = new IDeclaration(t, name.lexema); RESULT = var;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("DECLARATION",23, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // DECLARATION ::= TYPE IDEN IGUAL E0 PUNTOYCOMA 
            {
              IDeclaration RESULT =null;
		T t = (T)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-4)).value;
		TokenValue name = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)).value;
		E e = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		IDeclaration var = new IDeclaration(t, name.lexema, e); RESULT = var;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("DECLARATION",23, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // DECLARATION ::= TYPE IDEN error 
            {
              IDeclaration RESULT =null;
		System.out.println("Error. Missing ;"); RESULT = null;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("DECLARATION",23, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // ASIG ::= ACCESS0 IGUAL E0 PUNTOYCOMA 
            {
              IAssignation RESULT =null;
		E a = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)).value;
		E e = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		RESULT = new IAssignation((A) a, e);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ASIG",28, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // ASIG ::= ACCESS0 IGUAL E0 error 
            {
              IAssignation RESULT =null;
		System.out.println("Error. Missing ;"); RESULT = null;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ASIG",28, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // CONSTVAR ::= CONST TYPE IDEN IGUAL E0 PUNTOYCOMA 
            {
              DConst RESULT =null;
		T t = (T)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-4)).value;
		TokenValue name = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)).value;
		E e = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		RESULT = new DConst(t, name.lexema, e);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CONSTVAR",24, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // CONSTVAR ::= CONST TYPE IDEN IGUAL E0 error 
            {
              DConst RESULT =null;
		System.out.println("Error. Missing ;"); RESULT = null;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CONSTVAR",24, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // STRUCTDEC ::= STRUCT IDEN LLAP FIELDS LLCIERRE PUNTOYCOMA 
            {
              DStruct RESULT =null;
		TokenValue name = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-4)).value;
		ArrayList<IDeclaration> c = (ArrayList<IDeclaration>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		RESULT = new DStruct(name.lexema, c);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("STRUCTDEC",25, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // STRUCTDEC ::= STRUCT IDEN LLAP FIELDS LLCIERRE error 
            {
              DStruct RESULT =null;
		TokenValue name = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-4)).value;
		ArrayList<IDeclaration> c = (ArrayList<IDeclaration>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		System.out.println("Error. Missing ;"); RESULT = null;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("STRUCTDEC",25, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // FIELDS ::= DECLARATION FIELDS 
            {
              ArrayList<IDeclaration> RESULT =null;
		IDeclaration d = (IDeclaration)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		ArrayList<IDeclaration> list = (ArrayList<IDeclaration>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		list.add(d); RESULT = list;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("FIELDS",29, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // FIELDS ::= DECLARATION 
            {
              ArrayList<IDeclaration> RESULT =null;
		IDeclaration d = (IDeclaration)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		ArrayList<IDeclaration> list = new ArrayList<IDeclaration>(); list.add(d); RESULT = list;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("FIELDS",29, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // TYPEDEFDEC ::= TYPEDEF IDEN IGUAL TYPE PUNTOYCOMA 
            {
              DTypedef RESULT =null;
		TokenValue name = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)).value;
		T t = (T)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		RESULT = new DTypedef(name.lexema, t);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TYPEDEFDEC",27, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // TYPEDEFDEC ::= TYPEDEF IDEN IGUAL TYPE error 
            {
              DTypedef RESULT =null;
		System.out.println("Error. Missing ;"); RESULT = null;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TYPEDEFDEC",27, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // FUNCDEC ::= IDEN PAP PARAMS PCIERRE FLECHA TYPE BINST 
            {
              DFunction RESULT =null;
		TokenValue name = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-6)).value;
		ArrayList<Parameter> p = (ArrayList<Parameter>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-4)).value;
		T tReturn = (T)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		ArrayList<I> i = (ArrayList<I>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = new DFunction(name.lexema,i,p,tReturn);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("FUNCDEC",26, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // PARAMS ::= PARAMLIST 
            {
              ArrayList<Parameter> RESULT =null;
		ArrayList<Parameter> list = (ArrayList<Parameter>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = list;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("PARAMS",32, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // PARAMS ::= 
            {
              ArrayList<Parameter> RESULT =null;
		RESULT = new ArrayList<Parameter>();
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("PARAMS",32, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // PARAMLIST ::= PARAM COMA PARAMLIST 
            {
              ArrayList<Parameter> RESULT =null;
		Parameter p = (Parameter)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		ArrayList<Parameter> l = (ArrayList<Parameter>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		l.add(0, p); RESULT = l;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("PARAMLIST",31, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // PARAMLIST ::= PARAM 
            {
              ArrayList<Parameter> RESULT =null;
		Parameter p = (Parameter)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		ArrayList<Parameter> l = new ArrayList<Parameter>(); l.add(0, p); RESULT = l;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("PARAMLIST",31, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // PARAM ::= IDEN DOSPUNTOS TYPE 
            {
              Parameter RESULT =null;
		TokenValue name = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		T t = (T)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = new Parameter(name.lexema, t, false);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("PARAM",30, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // PARAM ::= IDEN DOSPUNTOS AMPERSAND TYPE 
            {
              Parameter RESULT =null;
		TokenValue name = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)).value;
		T t = (T)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = new Parameter(name.lexema, t, true);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("PARAM",30, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // INSTLIST ::= INST INSTLIST 
            {
              ArrayList<I> RESULT =null;
		I i = (I)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		ArrayList<I> list = (ArrayList<I>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		list.add(0,i); RESULT = list;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INSTLIST",34, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // INSTLIST ::= BLOCK INSTLIST 
            {
              ArrayList<I> RESULT =null;
		IBlock b = (IBlock)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		ArrayList<I> list = (ArrayList<I>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		list.add(0, b); RESULT = list;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INSTLIST",34, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // INSTLIST ::= 
            {
              ArrayList<I> RESULT =null;
		RESULT = new ArrayList<I>();
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INSTLIST",34, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // INST ::= DECLARATION 
            {
              I RESULT =null;
		IDeclaration d = (IDeclaration)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = d;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INST",44, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // INST ::= ASIG 
            {
              I RESULT =null;
		IAssignation a = (IAssignation)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = a;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INST",44, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // INST ::= SHOWFUNC 
            {
              I RESULT =null;
		IShow s = (IShow)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = s;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INST",44, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // INST ::= RETURNFUNC 
            {
              I RESULT =null;
		IReturn r = (IReturn)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = r; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INST",44, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // INST ::= INSTFUNCALL 
            {
              I RESULT =null;
		IFunction l = (IFunction)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = l;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INST",44, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // INST ::= error PUNTOYCOMA 
            {
              I RESULT =null;
		System.out.println("Error. Instruction not recognized"); RESULT = null;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INST",44, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // SHOWFUNC ::= SHOW PAP E0 PCIERRE PUNTOYCOMA 
            {
              IShow RESULT =null;
		E e = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		RESULT = new IShow(e);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("SHOWFUNC",35, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // SHOWFUNC ::= SHOW PAP E0 PCIERRE error 
            {
              IShow RESULT =null;
		System.out.println("Error. Missing ;"); RESULT = null;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("SHOWFUNC",35, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // READFUNC ::= READ PAP PCIERRE 
            {
              ERead RESULT =null;
		RESULT = new ERead();
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("READFUNC",14, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // RETURNFUNC ::= RETURN E0 PUNTOYCOMA 
            {
              IReturn RESULT =null;
		E e = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		RESULT = new IReturn(e);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("RETURNFUNC",36, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // RETURNFUNC ::= RETURN PUNTOYCOMA 
            {
              IReturn RESULT =null;
		RESULT = new IReturn();
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("RETURNFUNC",36, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // RETURNFUNC ::= RETURN error 
            {
              IReturn RESULT =null;
		System.out.println("Error in return."); RESULT = null;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("RETURNFUNC",36, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // INSTFUNCALL ::= CALLFUNC PUNTOYCOMA 
            {
              IFunction RESULT =null;
		EFunction f = (EFunction)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		RESULT = new IFunction(f);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INSTFUNCALL",39, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // INSTFUNCALL ::= CALLFUNC error 
            {
              IFunction RESULT =null;
		EFunction f = (EFunction)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		System.out.println("ESTO FALLA IMPORTANTE!!!!!!!!!!!!!!!"); RESULT = null;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INSTFUNCALL",39, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // CALLFUNC ::= IDEN PAP ARGS PCIERRE 
            {
              EFunction RESULT =null;
		TokenValue name = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)).value;
		ArrayList<E> a = (ArrayList<E>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		RESULT = new EFunction(name.lexema, a);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CALLFUNC",15, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // ARGS ::= ARGLIST 
            {
              ArrayList<E> RESULT =null;
		ArrayList<E> l = (ArrayList<E>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = l;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ARGS",37, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // ARGS ::= 
            {
              ArrayList<E> RESULT =null;
		RESULT = new ArrayList<E>();
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ARGS",37, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // ARGLIST ::= E0 COMA ARGLIST 
            {
              ArrayList<E> RESULT =null;
		E e = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		ArrayList<E> l = (ArrayList<E>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		l.add(0, e); RESULT = l;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ARGLIST",38, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // ARGLIST ::= E0 
            {
              ArrayList<E> RESULT =null;
		E e = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		ArrayList<E> l = new ArrayList<E>(); l.add(0, e); RESULT = l;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ARGLIST",38, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // BLOCK ::= BINST 
            {
              IBlock RESULT =null;
		ArrayList<I> list = (ArrayList<I>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = new IBlock(list);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("BLOCK",43, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // BLOCK ::= CONDITIONALS 
            {
              IBlock RESULT =null;
		IIfElse c = (IIfElse)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = c;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("BLOCK",43, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // BLOCK ::= LOOPS 
            {
              IBlock RESULT =null;
		IBlock b = (IBlock)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = b;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("BLOCK",43, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // BLOCK ::= SWITCHES 
            {
              IBlock RESULT =null;
		IBlock s = (IBlock)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = s;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("BLOCK",43, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // BINST ::= LLAP INSTLIST LLCIERRE 
            {
              ArrayList<I> RESULT =null;
		ArrayList<I> list = (ArrayList<I>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		RESULT = list;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("BINST",33, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // CONDITIONALS ::= IF PAP E0 PCIERRE BINST 
            {
              IIfElse RESULT =null;
		E e = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		ArrayList<I> list = (ArrayList<I>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = new IIfElse(e, list);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CONDITIONALS",40, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // CONDITIONALS ::= IF PAP E0 PCIERRE BINST ELSE BINST 
            {
              IIfElse RESULT =null;
		E e = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-4)).value;
		ArrayList<I> listIf = (ArrayList<I>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		ArrayList<I> listElse = (ArrayList<I>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = new IIfElse(e, listIf, listElse);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CONDITIONALS",40, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // LOOPS ::= WHILE PAP E0 PCIERRE BINST 
            {
              IBlock RESULT =null;
		E e = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		ArrayList<I> list = (ArrayList<I>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = new IWhile(e, list);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("LOOPS",41, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // LOOPS ::= FOR PAP DECLARATION E0 PUNTOYCOMA ACCESS0 IGUAL E0 PCIERRE BINST 
            {
              IBlock RESULT =null;
		IDeclaration d = (IDeclaration)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-7)).value;
		E exp = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-6)).value;
		E a = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-4)).value;
		E exp2 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		ArrayList<I> list = (ArrayList<I>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = new IFor(d, exp, new IAssignation((A) a, exp2), list);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("LOOPS",41, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // LOOPS ::= REPEAT PAP E0 PCIERRE BINST 
            {
              IBlock RESULT =null;
		E e = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		ArrayList<I> list = (ArrayList<I>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = new IRepeat(e, list);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("LOOPS",41, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // SWITCHES ::= SWITCH PAP E0 PCIERRE LLAP CASEEXP DEFAULTEXP LLCIERRE 
            {
              IBlock RESULT =null;
		E e = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-5)).value;
		ArrayList<SwitchInstruction> c = (ArrayList<SwitchInstruction>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		SwitchInstruction d = (SwitchInstruction)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		RESULT = new ISwitch(e, c, d);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("SWITCHES",42, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // SWITCHES ::= SWITCH PAP E0 PCIERRE LLAP CASEEXP LLCIERRE 
            {
              IBlock RESULT =null;
		E e = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-4)).value;
		ArrayList<SwitchInstruction> c = (ArrayList<SwitchInstruction>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		RESULT = new ISwitch(e, c);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("SWITCHES",42, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // SWITCHES ::= VALUEFOR PAP ACCESS0 PCIERRE LLAP CASEEXPVF DEFAULTEXPVF LLCIERRE 
            {
              IBlock RESULT =null;
		E a = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-5)).value;
		ArrayList<ValueforInstruction> c = (ArrayList<ValueforInstruction>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		ValueforInstruction d = (ValueforInstruction)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		RESULT = new IValuefor((A) a, c, d);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("SWITCHES",42, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // SWITCHES ::= VALUEFOR PAP ACCESS0 PCIERRE LLAP CASEEXPVF LLCIERRE 
            {
              IBlock RESULT =null;
		E a = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-4)).value;
		ArrayList<ValueforInstruction> c = (ArrayList<ValueforInstruction>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		RESULT = new IValuefor((A) a, c);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("SWITCHES",42, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // CASEEXP ::= CASE E0 DOSPUNTOS INSTLIST BREAK PUNTOYCOMA CASEEXP 
            {
              ArrayList<SwitchInstruction> RESULT =null;
		E e = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-5)).value;
		ArrayList<I> lInst = (ArrayList<I>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)).value;
		ArrayList<SwitchInstruction> l = (ArrayList<SwitchInstruction>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		l.add(0, new SwitchInstruction(lInst, e, true)); RESULT = l;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CASEEXP",45, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // CASEEXP ::= CASE E0 DOSPUNTOS INSTLIST PUNTOYCOMA CASEEXP 
            {
              ArrayList<SwitchInstruction> RESULT =null;
		E e = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-4)).value;
		ArrayList<I> lInst = (ArrayList<I>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		ArrayList<SwitchInstruction> l = (ArrayList<SwitchInstruction>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		l.add(0, new SwitchInstruction(lInst, e, false)); RESULT = l;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CASEEXP",45, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // CASEEXP ::= 
            {
              ArrayList<SwitchInstruction> RESULT =null;
		ArrayList<SwitchInstruction> l = new ArrayList<SwitchInstruction>(); RESULT = l;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CASEEXP",45, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // DEFAULTEXP ::= DEFAULT DOSPUNTOS INSTLIST 
            {
              SwitchInstruction RESULT =null;
		ArrayList<I> l = (ArrayList<I>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = new SwitchInstruction(l);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("DEFAULTEXP",46, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // CASEEXPVF ::= CASE E0 IGUAL E0 PUNTOYCOMA BREAK PUNTOYCOMA CASEEXPVF 
            {
              ArrayList<ValueforInstruction> RESULT =null;
		E e = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-6)).value;
		E result = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-4)).value;
		ArrayList<ValueforInstruction> l = (ArrayList<ValueforInstruction>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		l.add(0, new ValueforInstruction(e, result, true)); RESULT = l;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CASEEXPVF",47, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // CASEEXPVF ::= CASE E0 IGUAL E0 PUNTOYCOMA CASEEXPVF 
            {
              ArrayList<ValueforInstruction> RESULT =null;
		E e = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-4)).value;
		E result = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		ArrayList<ValueforInstruction> l = (ArrayList<ValueforInstruction>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		l.add(0, new ValueforInstruction(e, result, false)); RESULT = l;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CASEEXPVF",47, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // CASEEXPVF ::= 
            {
              ArrayList<ValueforInstruction> RESULT =null;
		ArrayList<ValueforInstruction> l = new ArrayList<ValueforInstruction>(); RESULT = l;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CASEEXPVF",47, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // DEFAULTEXPVF ::= DEFAULT IGUAL E0 PUNTOYCOMA 
            {
              ValueforInstruction RESULT =null;
		E e = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		RESULT = new ValueforInstruction(e);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("DEFAULTEXPVF",48, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // DEFAULTEXPVF ::= DEFAULT IGUAL E0 error 
            {
              ValueforInstruction RESULT =null;
		System.out.println("Error. Missing ;"); RESULT = null;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("DEFAULTEXPVF",48, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // E0 ::= E0 OR E1 
            {
              E RESULT =null;
		E op1 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		E op2 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new EBin(op1, op2, KindE.OR, new TBasics(KindT.BOOL));
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E0",2, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // E0 ::= E1 
            {
              E RESULT =null;
		E e = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = e;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E0",2, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // E1 ::= E1 AND E2 
            {
              E RESULT =null;
		E op1 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		E op2 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new EBin(op1, op2, KindE.AND, new TBasics(KindT.BOOL)); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E1",3, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // E1 ::= E2 
            {
              E RESULT =null;
		E e = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = e;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E1",3, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // E2 ::= E2 OP0 E3 
            {
              E RESULT =null;
		E op1 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		KindE operator = (KindE)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		E op2 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new EBin(op1, op2, operator, new TBasics(KindT.BOOL)); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E2",4, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // E2 ::= E3 
            {
              E RESULT =null;
		E e = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = e;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E2",4, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // E3 ::= E3 OP1 E4 
            {
              E RESULT =null;
		E op1 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		KindE operator = (KindE)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		E op2 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new EBin(op1, op2, operator, new TBasics(KindT.BOOL)); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E3",5, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // E3 ::= E4 
            {
              E RESULT =null;
		E e = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = e;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E3",5, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // E3 ::= NEWEXP 
            {
              E RESULT =null;
		ENew nexp = (ENew)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = nexp;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E3",5, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // E4 ::= E4 OP2 E5 
            {
              E RESULT =null;
		E op1 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		KindE operator = (KindE)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		E op2 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new EBin(op1, op2, operator, new TBasics(KindT.INT));
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E4",6, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // E4 ::= E5 
            {
              E RESULT =null;
		E e = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = e;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E4",6, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // E5 ::= E5 OP3 E6 
            {
              E RESULT =null;
		E op1 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		KindE operator = (KindE)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		E op2 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new EBin(op1, op2, operator, new TBasics(KindT.INT));
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E5",7, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // E5 ::= E6 
            {
              E RESULT =null;
		E e = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = e;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E5",7, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // E6 ::= NOT E6 
            {
              E RESULT =null;
		E op1 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = new EUnary(op1, KindE.NOT, new TBasics(KindT.BOOL));
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E6",8, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // E6 ::= E7 
            {
              E RESULT =null;
		E e = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = e;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E6",8, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // E7 ::= OP4 E7 
            {
              E RESULT =null;
		KindE operator = (KindE)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		E op1 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = new EUnary(op1, operator, new TArray(new TBasics(KindT.INT)));
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E7",9, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // E7 ::= E8 
            {
              E RESULT =null;
		E e = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = e;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E7",9, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // E8 ::= ENT 
            {
              E RESULT =null;
		TokenValue value = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = new EConst(value.lexema, new TBasics(KindT.INT));
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E8",10, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // E8 ::= TRUE 
            {
              E RESULT =null;
		TokenValue value = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = new EConst(value.lexema, new TBasics(KindT.BOOL));
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E8",10, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // E8 ::= FALSE 
            {
              E RESULT =null;
		TokenValue value = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = new EConst(value.lexema, new TBasics(KindT.BOOL));
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E8",10, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // E8 ::= ACCESS0 
            {
              E RESULT =null;
		E access = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = access;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E8",10, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // E8 ::= CALLFUNC 
            {
              E RESULT =null;
		EFunction callFunc = (EFunction)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = callFunc;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E8",10, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // E8 ::= READFUNC 
            {
              E RESULT =null;
		ERead read = (ERead)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = read;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E8",10, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // E8 ::= LLAP E0 E9 LLCIERRE 
            {
              E RESULT =null;
		E elem = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		ArrayList<E> elems = (ArrayList<E>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		elems.add(0, elem); RESULT = new EArray(elems);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E8",10, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // E9 ::= COMA E0 E9 
            {
              ArrayList<E> RESULT =null;
		E e = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		ArrayList<E> list = (ArrayList<E>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		list.add(0, e); RESULT = list;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E9",16, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // E9 ::= 
            {
              ArrayList<E> RESULT =null;
		ArrayList<E> l = new ArrayList<E>(); RESULT = l;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E9",16, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // OP0 ::= DISTINCT 
            {
              KindE RESULT =null;
		RESULT = KindE.DISTINCT;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OP0",17, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // OP0 ::= EQUAL 
            {
              KindE RESULT =null;
		RESULT = KindE.EQUAL;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OP0",17, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // OP1 ::= LESS 
            {
              KindE RESULT =null;
		RESULT = KindE.LESS;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OP1",18, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // OP1 ::= GREATER 
            {
              KindE RESULT =null;
		RESULT = KindE.GREATER;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OP1",18, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // OP1 ::= LEQ 
            {
              KindE RESULT =null;
		RESULT = KindE.LEQ;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OP1",18, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // OP1 ::= GREQ 
            {
              KindE RESULT =null;
		RESULT = KindE.GREQ;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OP1",18, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // OP2 ::= SUM 
            {
              KindE RESULT =null;
		RESULT = KindE.SUM;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OP2",19, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // OP2 ::= SUB 
            {
              KindE RESULT =null;
		RESULT = KindE.SUB;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OP2",19, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // OP3 ::= MUL 
            {
              KindE RESULT =null;
		RESULT = KindE.MUL;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OP3",20, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // OP3 ::= DIV 
            {
              KindE RESULT =null;
		RESULT = KindE.DIV;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OP3",20, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // OP3 ::= MOD 
            {
              KindE RESULT =null;
		RESULT = KindE.MOD;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OP3",20, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // OP4 ::= SUML 
            {
              KindE RESULT =null;
		RESULT = KindE.SUML;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OP4",21, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // OP4 ::= PRODL 
            {
              KindE RESULT =null;
		 RESULT = KindE.PRODL;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OP4",21, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // NEWEXP ::= NEW TYPE 
            {
              ENew RESULT =null;
		T t = (T)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = new ENew(t);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("NEWEXP",13, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // TYPE ::= TYPEINT 
            {
              T RESULT =null;
		 RESULT = new TBasics(KindT.INT);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TYPE",1, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // TYPE ::= TYPEBOOL 
            {
              T RESULT =null;
		 RESULT = new TBasics(KindT.BOOL);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TYPE",1, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // TYPE ::= VOID 
            {
              T RESULT =null;
		 RESULT = new TBasics(KindT.VOID);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TYPE",1, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // TYPE ::= IDEN 
            {
              T RESULT =null;
		TokenValue id = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new TStruct(id.lexema);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TYPE",1, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // TYPE ::= LIST LESS TYPE GREATER CAP ENT CCIERRE 
            {
              T RESULT =null;
		T t = (T)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-4)).value;
		TokenValue size = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 EConst sizeConst = new EConst(size.lexema, new TBasics(KindT.INT)); RESULT = new TArray(t, sizeConst);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TYPE",1, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // TYPE ::= TYPE MUL 
            {
              T RESULT =null;
		T t = (T)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = new TPointer(t);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TYPE",1, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // ACCESS0 ::= MUL ACCESS0 
            {
              E RESULT =null;
		E na = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new APointer((A) na);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ACCESS0",11, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // ACCESS0 ::= AMPERSAND ACCESS0 
            {
              E RESULT =null;
		E na = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = new AAdPointer((A) na);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ACCESS0",11, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // ACCESS0 ::= ACCESS1 
            {
              E RESULT =null;
		E na = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = na;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ACCESS0",11, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // ACCESS1 ::= IDEN 
            {
              E RESULT =null;
		TokenValue id = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new AVariable(id.lexema);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ACCESS1",12, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // ACCESS1 ::= ACCESS1 CAP E0 CCIERRE 
            {
              E RESULT =null;
		E a = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)).value;
		E e = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		RESULT = new AArray((A) a, e);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ACCESS1",12, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // ACCESS1 ::= ACCESS1 PUNTO IDEN 
            {
              E RESULT =null;
		E a = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		TokenValue id = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = new AStruct((A) a, id.lexema);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ACCESS1",12, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // ACCESS1 ::= PAP E0 PCIERRE 
            {
              E RESULT =null;
		E e = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		RESULT = e;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ACCESS1",12, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$AnalizadorSintacticoTiny$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintacticoTiny$do_action(
    int                        CUP$AnalizadorSintacticoTiny$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintacticoTiny$parser,
    java.util.Stack            CUP$AnalizadorSintacticoTiny$stack,
    int                        CUP$AnalizadorSintacticoTiny$top)
    throws java.lang.Exception
    {
              return CUP$AnalizadorSintacticoTiny$do_action_part00000000(
                               CUP$AnalizadorSintacticoTiny$act_num,
                               CUP$AnalizadorSintacticoTiny$parser,
                               CUP$AnalizadorSintacticoTiny$stack,
                               CUP$AnalizadorSintacticoTiny$top);
    }
}

