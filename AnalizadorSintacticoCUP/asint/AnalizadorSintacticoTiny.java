
//----------------------------------------------------
// The following code was generated by CUP v0.11b beta 20140220
// Fri Mar 22 09:35:41 WET 2024
//----------------------------------------------------

package asint;

import java_cup.runtime.*;
import alex.AnalizadorLexicoTiny;
import alex.UnidadLexica;
import alex.TokenValue;
import errors.GestionErroresTiny;
import java.util.ArrayList;
import ast.Types.*;
import ast.Expressions.*;
import ast.Expressions.Accesses.*;
import java_cup.runtime.ComplexSymbolFactory.Location;

/** CUP v0.11b beta 20140220 generated parser.
  * @version Fri Mar 22 09:35:41 WET 2024
  */
public class AnalizadorSintacticoTiny extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public AnalizadorSintacticoTiny() {super();}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintacticoTiny(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintacticoTiny(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\170\000\002\002\004\000\002\002\004\000\002\002" +
    "\004\000\002\002\004\000\002\002\004\000\002\002\004" +
    "\000\002\002\003\000\002\025\006\000\002\025\010\000" +
    "\002\043\005\000\002\043\007\000\002\043\002\000\002" +
    "\017\006\000\002\003\004\000\002\004\010\000\002\024" +
    "\004\000\002\024\003\000\002\022\007\000\002\020\011" +
    "\000\002\021\003\000\002\021\002\000\002\041\005\000" +
    "\002\041\003\000\002\040\005\000\002\040\006\000\002" +
    "\005\010\000\002\026\004\000\002\026\004\000\002\026" +
    "\002\000\002\006\003\000\002\006\003\000\002\006\003" +
    "\000\002\006\003\000\002\006\003\000\002\030\007\000" +
    "\002\057\005\000\002\027\005\000\002\027\004\000\002" +
    "\031\004\000\002\060\006\000\002\023\003\000\002\023" +
    "\002\000\002\042\005\000\002\042\003\000\002\007\003" +
    "\000\002\007\003\000\002\007\003\000\002\007\003\000" +
    "\002\035\005\000\002\032\007\000\002\032\011\000\002" +
    "\033\003\000\002\033\003\000\002\033\003\000\002\010" +
    "\007\000\002\011\014\000\002\012\007\000\002\034\003" +
    "\000\002\034\003\000\002\014\012\000\002\015\011\000" +
    "\002\015\002\000\002\036\005\000\002\013\012\000\002" +
    "\016\012\000\002\016\002\000\002\037\006\000\002\045" +
    "\005\000\002\045\003\000\002\046\005\000\002\046\003" +
    "\000\002\047\005\000\002\047\003\000\002\050\005\000" +
    "\002\050\003\000\002\050\003\000\002\051\005\000\002" +
    "\051\003\000\002\052\005\000\002\052\003\000\002\053" +
    "\004\000\002\053\003\000\002\054\004\000\002\054\003" +
    "\000\002\055\003\000\002\055\003\000\002\055\003\000" +
    "\002\055\003\000\002\055\003\000\002\055\003\000\002" +
    "\055\006\000\002\063\005\000\002\063\002\000\002\064" +
    "\003\000\002\064\003\000\002\065\003\000\002\065\003" +
    "\000\002\065\003\000\002\065\003\000\002\066\003\000" +
    "\002\066\003\000\002\067\003\000\002\067\003\000\002" +
    "\067\003\000\002\070\003\000\002\070\003\000\002\056" +
    "\004\000\002\044\003\000\002\044\003\000\002\044\003" +
    "\000\002\044\003\000\002\044\011\000\002\044\004\000" +
    "\002\061\006\000\002\061\005\000\002\061\005\000\002" +
    "\061\003\000\002\062\003\000\002\062\004\000\002\062" +
    "\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0101\000\024\004\016\005\012\006\015\051\011\062" +
    "\010\063\017\064\024\065\020\067\013\001\002\000\024" +
    "\004\016\005\012\006\015\051\011\062\010\063\017\064" +
    "\024\065\020\067\013\001\002\000\024\004\016\005\012" +
    "\006\015\051\011\062\010\063\017\064\024\065\020\067" +
    "\013\001\002\000\004\002\ufffb\001\002\000\024\004\016" +
    "\005\012\006\015\051\011\062\010\063\017\064\024\065" +
    "\020\067\013\001\002\000\004\027\374\001\002\000\004" +
    "\067\365\001\002\000\046\011\uff95\016\uff95\017\uff95\020" +
    "\uff95\021\uff95\022\uff95\023\uff95\024\uff95\025\uff95\030\uff95" +
    "\032\uff95\033\uff95\034\uff95\036\uff95\037\uff95\040\uff95\043" +
    "\uff95\067\uff95\001\002\000\010\011\uff93\027\200\067\uff93" +
    "\001\002\000\004\002\177\001\002\000\046\011\uff94\016" +
    "\uff94\017\uff94\020\uff94\021\uff94\022\uff94\023\uff94\024\uff94" +
    "\025\uff94\030\uff94\032\uff94\033\uff94\034\uff94\036\uff94\037" +
    "\uff94\040\uff94\043\uff94\067\uff94\001\002\000\046\011\uff96" +
    "\016\uff96\017\uff96\020\uff96\021\uff96\022\uff96\023\uff96\024" +
    "\uff96\025\uff96\030\uff96\032\uff96\033\uff96\034\uff96\036\uff96" +
    "\037\uff96\040\uff96\043\uff96\067\uff96\001\002\000\004\067" +
    "\173\001\002\000\004\017\165\001\002\000\024\004\016" +
    "\005\012\006\015\051\011\062\010\063\017\064\024\065" +
    "\020\067\013\001\002\000\006\011\031\067\030\001\002" +
    "\000\024\004\016\005\012\006\015\051\011\062\010\063" +
    "\017\064\024\065\020\067\013\001\002\000\014\004\016" +
    "\005\012\006\015\065\020\067\026\001\002\000\024\004" +
    "\ufff4\005\ufff4\006\ufff4\051\ufff4\062\ufff4\063\ufff4\064\ufff4" +
    "\065\ufff4\067\ufff4\001\002\000\046\011\uff93\016\uff93\017" +
    "\uff93\020\uff93\021\uff93\022\uff93\023\uff93\024\uff93\025\uff93" +
    "\030\uff93\032\uff93\033\uff93\034\uff93\036\uff93\037\uff93\040" +
    "\uff93\043\uff93\067\uff93\001\002\000\004\002\ufffc\001\002" +
    "\000\010\036\033\037\032\040\ufff6\001\002\000\046\011" +
    "\uff91\016\uff91\017\uff91\020\uff91\021\uff91\022\uff91\023\uff91" +
    "\024\uff91\025\uff91\030\uff91\032\uff91\033\uff91\034\uff91\036" +
    "\uff91\037\uff91\040\uff91\043\uff91\067\uff91\001\002\000\004" +
    "\067\157\001\002\000\034\011\054\014\060\015\047\026" +
    "\037\027\061\033\063\041\070\061\036\066\065\067\042" +
    "\070\071\071\044\072\062\001\002\000\004\040\035\001" +
    "\002\000\100\004\ufffa\005\ufffa\006\ufffa\011\ufffa\014\ufffa" +
    "\015\ufffa\026\ufffa\027\ufffa\033\ufffa\034\ufffa\041\ufffa\044" +
    "\ufffa\045\ufffa\046\ufffa\047\ufffa\051\ufffa\052\ufffa\053\ufffa" +
    "\055\ufffa\057\ufffa\060\ufffa\061\ufffa\062\ufffa\063\ufffa\064" +
    "\ufffa\065\ufffa\066\ufffa\067\ufffa\070\ufffa\071\ufffa\072\ufffa" +
    "\001\002\000\004\027\155\001\002\000\032\011\054\014" +
    "\060\015\047\026\037\027\061\033\063\041\070\061\036" +
    "\067\042\070\071\071\044\072\062\001\002\000\052\007" +
    "\uffae\010\uffae\011\uffae\012\uffae\013\uffae\016\uffae\017\uffae" +
    "\020\uffae\021\uffae\022\uffae\023\uffae\024\uffae\025\uffae\030" +
    "\uffae\032\uffae\034\uffae\036\uffae\037\uffae\040\uffae\043\uffae" +
    "\001\002\000\052\007\uffb0\010\uffb0\011\uffb0\012\uffb0\013" +
    "\uffb0\016\uffb0\017\uffb0\020\uffb0\021\uffb0\022\uffb0\023\uffb0" +
    "\024\uffb0\025\uffb0\030\uffb0\032\uffb0\034\uffb0\036\uffb0\037" +
    "\uffb0\040\uffb0\043\uffb0\001\002\000\060\007\uff8c\010\uff8c" +
    "\011\uff8c\012\uff8c\013\uff8c\016\uff8c\017\uff8c\020\uff8c\021" +
    "\uff8c\022\uff8c\023\uff8c\024\uff8c\025\uff8c\027\145\030\uff8c" +
    "\031\uff8c\032\uff8c\034\uff8c\036\uff8c\037\uff8c\040\uff8c\042" +
    "\uff8c\043\uff8c\001\002\000\052\007\uffa9\010\uffa9\011\uffa9" +
    "\012\uffa9\013\uffa9\016\uffa9\017\uffa9\020\uffa9\021\uffa9\022" +
    "\uffa9\023\uffa9\024\uffa9\025\uffa9\030\uffa9\032\uffa9\034\uffa9" +
    "\036\uffa9\037\uffa9\040\uffa9\043\uffa9\001\002\000\052\007" +
    "\uffac\010\uffac\011\uffac\012\uffac\013\uffac\016\uffac\017\uffac" +
    "\020\uffac\021\uffac\022\uffac\023\uffac\024\uffac\025\uffac\030" +
    "\uffac\032\uffac\034\uffac\036\uffac\037\uffac\040\uffac\043\uffac" +
    "\001\002\000\052\007\uffb2\010\uffb2\011\uffb2\012\uffb2\013" +
    "\uffb2\016\uffb2\017\uffb2\020\uffb2\021\uffb2\022\uffb2\023\uffb2" +
    "\024\uffb2\025\uffb2\030\uffb2\032\uffb2\034\uffb2\036\uffb2\037" +
    "\uffb2\040\uffb2\043\uffb2\001\002\000\040\016\uffb6\017\uffb6" +
    "\020\uffb6\021\uffb6\022\uffb6\023\uffb6\024\uffb6\025\uffb6\030" +
    "\uffb6\032\uffb6\034\uffb6\036\uffb6\037\uffb6\040\uffb6\043\uffb6" +
    "\001\002\000\030\011\uff98\014\uff98\015\uff98\027\uff98\033" +
    "\uff98\041\uff98\061\uff98\067\uff98\070\uff98\071\uff98\072\uff98" +
    "\001\002\000\052\007\uffb4\010\uffb4\011\126\012\125\013" +
    "\124\016\uffb4\017\uffb4\020\uffb4\021\uffb4\022\uffb4\023\uffb4" +
    "\024\uffb4\025\uffb4\030\uffb4\032\uffb4\034\uffb4\036\uffb4\037" +
    "\uffb4\040\uffb4\043\uffb4\001\002\000\056\007\uffaa\010\uffaa" +
    "\011\uffaa\012\uffaa\013\uffaa\016\uffaa\017\uffaa\020\uffaa\021" +
    "\uffaa\022\uffaa\023\uffaa\024\uffaa\025\uffaa\030\uffaa\031\140" +
    "\032\uffaa\034\uffaa\036\uffaa\037\uffaa\040\uffaa\042\141\043" +
    "\uffaa\001\002\000\044\007\117\010\121\016\uffb7\017\uffb7" +
    "\020\uffb7\021\uffb7\022\uffb7\023\uffb7\024\uffb7\025\uffb7\030" +
    "\uffb7\032\uffb7\034\uffb7\036\uffb7\037\uffb7\040\uffb7\043\uffb7" +
    "\001\002\000\040\016\115\017\114\020\112\021\111\022" +
    "\uffb9\023\uffb9\024\uffb9\025\uffb9\030\uffb9\032\uffb9\034\uffb9" +
    "\036\uffb9\037\uffb9\040\uffb9\043\uffb9\001\002\000\010\011" +
    "\054\041\070\067\073\001\002\000\030\022\106\023\107" +
    "\024\uffbb\025\uffbb\030\uffbb\032\uffbb\034\uffbb\036\uffbb\037" +
    "\uffbb\040\uffbb\043\uffbb\001\002\000\024\024\103\025\uffbd" +
    "\030\uffbd\032\uffbd\034\uffbd\036\uffbd\037\uffbd\040\uffbd\043" +
    "\uffbd\001\002\000\010\025\101\037\032\040\ufff6\001\002" +
    "\000\030\011\uff99\014\uff99\015\uff99\027\uff99\033\uff99\041" +
    "\uff99\061\uff99\067\uff99\070\uff99\071\uff99\072\uff99\001\002" +
    "\000\034\011\054\014\060\015\047\026\037\027\061\033" +
    "\063\041\070\061\036\066\065\067\042\070\071\071\044" +
    "\072\062\001\002\000\052\007\uffab\010\uffab\011\uffab\012" +
    "\uffab\013\uffab\016\uffab\017\uffab\020\uffab\021\uffab\022\uffab" +
    "\023\uffab\024\uffab\025\uffab\030\uffab\032\uffab\034\uffab\036" +
    "\uffab\037\uffab\040\uffab\043\uffab\001\002\000\034\011\054" +
    "\014\060\015\047\026\037\027\061\033\063\041\070\061" +
    "\036\066\065\067\042\070\071\071\044\072\062\001\002" +
    "\000\056\007\uff8d\010\uff8d\011\uff8d\012\uff8d\013\uff8d\016" +
    "\uff8d\017\uff8d\020\uff8d\021\uff8d\022\uff8d\023\uff8d\024\uff8d" +
    "\025\uff8d\030\uff8d\031\uff8d\032\uff8d\034\uff8d\036\uff8d\037" +
    "\uff8d\040\uff8d\042\uff8d\043\uff8d\001\002\000\014\004\016" +
    "\005\012\006\015\065\020\067\026\001\002\000\052\007" +
    "\uffa8\010\uffa8\011\uffa8\012\uffa8\013\uffa8\016\uffa8\017\uffa8" +
    "\020\uffa8\021\uffa8\022\uffa8\023\uffa8\024\uffa8\025\uffa8\030" +
    "\uffa8\032\uffa8\034\uffa8\036\uffa8\037\uffa8\040\uffa8\043\uffa8" +
    "\001\002\000\030\011\054\014\060\015\047\027\061\033" +
    "\063\041\070\061\036\067\042\070\071\071\044\072\062" +
    "\001\002\000\010\011\054\041\070\067\073\001\002\000" +
    "\052\007\uffad\010\uffad\011\uffad\012\uffad\013\uffad\016\uffad" +
    "\017\uffad\020\uffad\021\uffad\022\uffad\023\uffad\024\uffad\025" +
    "\uffad\030\uffad\032\uffad\034\uffad\036\uffad\037\uffad\040\uffad" +
    "\043\uffad\001\002\000\056\007\uff8a\010\uff8a\011\uff8a\012" +
    "\uff8a\013\uff8a\016\uff8a\017\uff8a\020\uff8a\021\uff8a\022\uff8a" +
    "\023\uff8a\024\uff8a\025\uff8a\030\uff8a\031\uff8a\032\uff8a\034" +
    "\uff8a\036\uff8a\037\uff8a\040\uff8a\042\uff8a\043\uff8a\001\002" +
    "\000\056\007\uff8c\010\uff8c\011\uff8c\012\uff8c\013\uff8c\016" +
    "\uff8c\017\uff8c\020\uff8c\021\uff8c\022\uff8c\023\uff8c\024\uff8c" +
    "\025\uff8c\030\uff8c\031\uff8c\032\uff8c\034\uff8c\036\uff8c\037" +
    "\uff8c\040\uff8c\042\uff8c\043\uff8c\001\002\000\052\007\uffaf" +
    "\010\uffaf\011\uffaf\012\uffaf\013\uffaf\016\uffaf\017\uffaf\020" +
    "\uffaf\021\uffaf\022\uffaf\023\uffaf\024\uffaf\025\uffaf\030\uffaf" +
    "\032\uffaf\034\uffaf\036\uffaf\037\uffaf\040\uffaf\043\uffaf\001" +
    "\002\000\042\011\031\016\uff97\017\uff97\020\uff97\021\uff97" +
    "\022\uff97\023\uff97\024\uff97\025\uff97\030\uff97\032\uff97\034" +
    "\uff97\036\uff97\037\uff97\040\uff97\043\uff97\001\002\000\010" +
    "\025\101\034\uffa5\037\077\001\002\000\034\011\054\014" +
    "\060\015\047\026\037\027\061\033\063\041\070\061\036" +
    "\066\065\067\042\070\071\071\044\072\062\001\002\000" +
    "\004\034\130\001\002\000\034\011\054\014\060\015\047" +
    "\026\037\027\061\033\063\041\070\061\036\066\065\067" +
    "\042\070\071\071\044\072\062\001\002\000\024\024\103" +
    "\025\uffbe\030\uffbe\032\uffbe\034\uffbe\036\uffbe\037\uffbe\040" +
    "\uffbe\043\uffbe\001\002\000\034\011\054\014\060\015\047" +
    "\026\037\027\061\033\063\041\070\061\036\066\065\067" +
    "\042\070\071\071\044\072\062\001\002\000\030\022\106" +
    "\023\107\024\uffbc\025\uffbc\030\uffbc\032\uffbc\034\uffbc\036" +
    "\uffbc\037\uffbc\040\uffbc\043\uffbc\001\002\000\034\011\054" +
    "\014\060\015\047\026\037\027\061\033\063\041\070\061" +
    "\036\066\065\067\042\070\071\071\044\072\062\001\002" +
    "\000\034\011\uffa4\014\uffa4\015\uffa4\026\uffa4\027\uffa4\033" +
    "\uffa4\041\uffa4\061\uffa4\066\uffa4\067\uffa4\070\uffa4\071\uffa4" +
    "\072\uffa4\001\002\000\034\011\uffa3\014\uffa3\015\uffa3\026" +
    "\uffa3\027\uffa3\033\uffa3\041\uffa3\061\uffa3\066\uffa3\067\uffa3" +
    "\070\uffa3\071\uffa3\072\uffa3\001\002\000\040\016\115\017" +
    "\114\020\112\021\111\022\uffba\023\uffba\024\uffba\025\uffba" +
    "\030\uffba\032\uffba\034\uffba\036\uffba\037\uffba\040\uffba\043" +
    "\uffba\001\002\000\032\011\uffa0\014\uffa0\015\uffa0\026\uffa0" +
    "\027\uffa0\033\uffa0\041\uffa0\061\uffa0\067\uffa0\070\uffa0\071" +
    "\uffa0\072\uffa0\001\002\000\032\011\uff9f\014\uff9f\015\uff9f" +
    "\026\uff9f\027\uff9f\033\uff9f\041\uff9f\061\uff9f\067\uff9f\070" +
    "\uff9f\071\uff9f\072\uff9f\001\002\000\032\011\054\014\060" +
    "\015\047\026\037\027\061\033\063\041\070\061\036\067" +
    "\042\070\071\071\044\072\062\001\002\000\032\011\uffa2" +
    "\014\uffa2\015\uffa2\026\uffa2\027\uffa2\033\uffa2\041\uffa2\061" +
    "\uffa2\067\uffa2\070\uffa2\071\uffa2\072\uffa2\001\002\000\032" +
    "\011\uffa1\014\uffa1\015\uffa1\026\uffa1\027\uffa1\033\uffa1\041" +
    "\uffa1\061\uffa1\067\uffa1\070\uffa1\071\uffa1\072\uffa1\001\002" +
    "\000\044\007\117\010\121\016\uffb8\017\uffb8\020\uffb8\021" +
    "\uffb8\022\uffb8\023\uffb8\024\uffb8\025\uffb8\030\uffb8\032\uffb8" +
    "\034\uffb8\036\uffb8\037\uffb8\040\uffb8\043\uffb8\001\002\000" +
    "\032\011\uff9e\014\uff9e\015\uff9e\026\uff9e\027\uff9e\033\uff9e" +
    "\041\uff9e\061\uff9e\067\uff9e\070\uff9e\071\uff9e\072\uff9e\001" +
    "\002\000\032\011\054\014\060\015\047\026\037\027\061" +
    "\033\063\041\070\061\036\067\042\070\071\071\044\072" +
    "\062\001\002\000\032\011\uff9d\014\uff9d\015\uff9d\026\uff9d" +
    "\027\uff9d\033\uff9d\041\uff9d\061\uff9d\067\uff9d\070\uff9d\071" +
    "\uff9d\072\uff9d\001\002\000\052\007\uffb5\010\uffb5\011\126" +
    "\012\125\013\124\016\uffb5\017\uffb5\020\uffb5\021\uffb5\022" +
    "\uffb5\023\uffb5\024\uffb5\025\uffb5\030\uffb5\032\uffb5\034\uffb5" +
    "\036\uffb5\037\uffb5\040\uffb5\043\uffb5\001\002\000\032\011" +
    "\054\014\060\015\047\026\037\027\061\033\063\041\070" +
    "\061\036\067\042\070\071\071\044\072\062\001\002\000" +
    "\032\011\uff9a\014\uff9a\015\uff9a\026\uff9a\027\uff9a\033\uff9a" +
    "\041\uff9a\061\uff9a\067\uff9a\070\uff9a\071\uff9a\072\uff9a\001" +
    "\002\000\032\011\uff9b\014\uff9b\015\uff9b\026\uff9b\027\uff9b" +
    "\033\uff9b\041\uff9b\061\uff9b\067\uff9b\070\uff9b\071\uff9b\072" +
    "\uff9b\001\002\000\032\011\uff9c\014\uff9c\015\uff9c\026\uff9c" +
    "\027\uff9c\033\uff9c\041\uff9c\061\uff9c\067\uff9c\070\uff9c\071" +
    "\uff9c\072\uff9c\001\002\000\052\007\uffb3\010\uffb3\011\uffb3" +
    "\012\uffb3\013\uffb3\016\uffb3\017\uffb3\020\uffb3\021\uffb3\022" +
    "\uffb3\023\uffb3\024\uffb3\025\uffb3\030\uffb3\032\uffb3\034\uffb3" +
    "\036\uffb3\037\uffb3\040\uffb3\043\uffb3\001\002\000\052\007" +
    "\uffa7\010\uffa7\011\uffa7\012\uffa7\013\uffa7\016\uffa7\017\uffa7" +
    "\020\uffa7\021\uffa7\022\uffa7\023\uffa7\024\uffa7\025\uffa7\030" +
    "\uffa7\032\uffa7\034\uffa7\036\uffa7\037\uffa7\040\uffa7\043\uffa7" +
    "\001\002\000\010\025\101\034\uffa5\037\077\001\002\000" +
    "\004\034\uffa6\001\002\000\006\025\101\030\134\001\002" +
    "\000\056\007\uff8e\010\uff8e\011\uff8e\012\uff8e\013\uff8e\016" +
    "\uff8e\017\uff8e\020\uff8e\021\uff8e\022\uff8e\023\uff8e\024\uff8e" +
    "\025\uff8e\030\uff8e\031\uff8e\032\uff8e\034\uff8e\036\uff8e\037" +
    "\uff8e\040\uff8e\042\uff8e\043\uff8e\001\002\000\004\040\136" +
    "\001\002\000\100\004\ufff9\005\ufff9\006\ufff9\011\ufff9\014" +
    "\ufff9\015\ufff9\026\ufff9\027\ufff9\033\ufff9\034\ufff9\041\ufff9" +
    "\044\ufff9\045\ufff9\046\ufff9\047\ufff9\051\ufff9\052\ufff9\053" +
    "\ufff9\055\ufff9\057\ufff9\060\ufff9\061\ufff9\062\ufff9\063\ufff9" +
    "\064\ufff9\065\ufff9\066\ufff9\067\ufff9\070\ufff9\071\ufff9\072" +
    "\ufff9\001\002\000\056\007\uff8b\010\uff8b\011\uff8b\012\uff8b" +
    "\013\uff8b\016\uff8b\017\uff8b\020\uff8b\021\uff8b\022\uff8b\023" +
    "\uff8b\024\uff8b\025\uff8b\030\uff8b\031\uff8b\032\uff8b\034\uff8b" +
    "\036\uff8b\037\uff8b\040\uff8b\042\uff8b\043\uff8b\001\002\000" +
    "\034\011\054\014\060\015\047\026\037\027\061\033\063" +
    "\041\070\061\036\066\065\067\042\070\071\071\044\072" +
    "\062\001\002\000\004\067\142\001\002\000\056\007\uff8f" +
    "\010\uff8f\011\uff8f\012\uff8f\013\uff8f\016\uff8f\017\uff8f\020" +
    "\uff8f\021\uff8f\022\uff8f\023\uff8f\024\uff8f\025\uff8f\030\uff8f" +
    "\031\uff8f\032\uff8f\034\uff8f\036\uff8f\037\uff8f\040\uff8f\042" +
    "\uff8f\043\uff8f\001\002\000\006\025\101\032\144\001\002" +
    "\000\056\007\uff90\010\uff90\011\uff90\012\uff90\013\uff90\016" +
    "\uff90\017\uff90\020\uff90\021\uff90\022\uff90\023\uff90\024\uff90" +
    "\025\uff90\030\uff90\031\uff90\032\uff90\034\uff90\036\uff90\037" +
    "\uff90\040\uff90\042\uff90\043\uff90\001\002\000\036\011\054" +
    "\014\060\015\047\026\037\027\061\030\uffd8\033\063\041" +
    "\070\061\036\066\065\067\042\070\071\071\044\072\062" +
    "\001\002\000\004\030\uffd9\001\002\000\004\030\153\001" +
    "\002\000\010\025\101\030\uffd6\037\151\001\002\000\036" +
    "\011\054\014\060\015\047\026\037\027\061\030\uffd8\033" +
    "\063\041\070\061\036\066\065\067\042\070\071\071\044" +
    "\072\062\001\002\000\004\030\uffd7\001\002\000\052\007" +
    "\uffda\010\uffda\011\uffda\012\uffda\013\uffda\016\uffda\017\uffda" +
    "\020\uffda\021\uffda\022\uffda\023\uffda\024\uffda\025\uffda\030" +
    "\uffda\032\uffda\034\uffda\036\uffda\037\uffda\040\uffda\043\uffda" +
    "\001\002\000\052\007\uffb1\010\uffb1\011\uffb1\012\uffb1\013" +
    "\uffb1\016\uffb1\017\uffb1\020\uffb1\021\uffb1\022\uffb1\023\uffb1" +
    "\024\uffb1\025\uffb1\030\uffb1\032\uffb1\034\uffb1\036\uffb1\037" +
    "\uffb1\040\uffb1\043\uffb1\001\002\000\004\030\156\001\002" +
    "\000\052\007\uffde\010\uffde\011\uffde\012\uffde\013\uffde\016" +
    "\uffde\017\uffde\020\uffde\021\uffde\022\uffde\023\uffde\024\uffde" +
    "\025\uffde\030\uffde\032\uffde\034\uffde\036\uffde\037\uffde\040" +
    "\uffde\043\uffde\001\002\000\010\036\161\037\032\040\ufff6" +
    "\001\002\000\004\040\ufff8\001\002\000\034\011\054\014" +
    "\060\015\047\026\037\027\061\033\063\041\070\061\036" +
    "\066\065\067\042\070\071\071\044\072\062\001\002\000" +
    "\010\025\101\037\032\040\ufff6\001\002\000\004\040\ufff7" +
    "\001\002\000\004\002\ufffe\001\002\000\014\004\016\005" +
    "\012\006\015\065\020\067\026\001\002\000\006\011\031" +
    "\016\167\001\002\000\004\031\170\001\002\000\004\070" +
    "\171\001\002\000\004\032\172\001\002\000\046\011\uff92" +
    "\016\uff92\017\uff92\020\uff92\021\uff92\022\uff92\023\uff92\024" +
    "\uff92\025\uff92\030\uff92\032\uff92\033\uff92\034\uff92\036\uff92" +
    "\037\uff92\040\uff92\043\uff92\067\uff92\001\002\000\004\036" +
    "\174\001\002\000\014\004\016\005\012\006\015\065\020" +
    "\067\026\001\002\000\006\011\031\040\176\001\002\000" +
    "\024\004\ufff0\005\ufff0\006\ufff0\051\ufff0\062\ufff0\063\ufff0" +
    "\064\ufff0\065\ufff0\067\ufff0\001\002\000\004\002\000\001" +
    "\002\000\006\030\uffed\067\203\001\002\000\004\030\uffee" +
    "\001\002\000\004\030\213\001\002\000\004\043\207\001" +
    "\002\000\006\030\uffeb\037\205\001\002\000\004\067\203" +
    "\001\002\000\004\030\uffec\001\002\000\016\004\016\005" +
    "\012\006\015\041\210\065\020\067\026\001\002\000\014" +
    "\004\016\005\012\006\015\065\020\067\026\001\002\000" +
    "\010\011\031\030\uffea\037\uffea\001\002\000\010\011\031" +
    "\030\uffe9\037\uffe9\001\002\000\004\035\214\001\002\000" +
    "\014\004\016\005\012\006\015\065\020\067\026\001\002" +
    "\000\006\011\031\033\217\001\002\000\024\004\uffef\005" +
    "\uffef\006\uffef\051\uffef\062\uffef\063\uffef\064\uffef\065\uffef" +
    "\067\uffef\001\002\000\046\004\016\005\012\006\015\011" +
    "\054\027\061\033\217\034\uffe5\041\070\044\242\045\225" +
    "\046\224\047\232\052\237\053\231\057\234\060\220\065" +
    "\020\067\241\001\002\000\004\027\361\001\002\000\050" +
    "\004\uffd3\005\uffd3\006\uffd3\011\uffd3\027\uffd3\033\uffd3\034" +
    "\uffd3\041\uffd3\044\uffd3\045\uffd3\046\uffd3\047\uffd3\052\uffd3" +
    "\053\uffd3\055\uffd3\057\uffd3\060\uffd3\065\uffd3\067\uffd3\001" +
    "\002\000\050\004\uffd4\005\uffd4\006\uffd4\011\uffd4\027\uffd4" +
    "\033\uffd4\034\uffd4\041\uffd4\044\uffd4\045\uffd4\046\uffd4\047" +
    "\uffd4\052\uffd4\053\uffd4\055\uffd4\057\uffd4\060\uffd4\065\uffd4" +
    "\067\uffd4\001\002\000\050\004\uffd2\005\uffd2\006\uffd2\011" +
    "\uffd2\027\uffd2\033\uffd2\034\uffd2\041\uffd2\044\uffd2\045\uffd2" +
    "\046\uffd2\047\uffd2\052\uffd2\053\uffd2\055\uffd2\057\uffd2\060" +
    "\uffd2\065\uffd2\067\uffd2\001\002\000\004\027\355\001\002" +
    "\000\004\027\344\001\002\000\050\004\uffcc\005\uffcc\006" +
    "\uffcc\011\uffcc\027\uffcc\033\uffcc\034\uffcc\041\uffcc\044\uffcc" +
    "\045\uffcc\046\uffcc\047\uffcc\052\uffcc\053\uffcc\055\uffcc\057" +
    "\uffcc\060\uffcc\065\uffcc\067\uffcc\001\002\000\050\004\uffe2" +
    "\005\uffe2\006\uffe2\011\uffe2\027\uffe2\033\uffe2\034\uffe2\041" +
    "\uffe2\044\uffe2\045\uffe2\046\uffe2\047\uffe2\052\uffe2\053\uffe2" +
    "\055\uffe2\057\uffe2\060\uffe2\065\uffe2\067\uffe2\001\002\000" +
    "\050\004\uffc8\005\uffc8\006\uffc8\011\uffc8\027\uffc8\033\uffc8" +
    "\034\uffc8\041\uffc8\044\uffc8\045\uffc8\046\uffc8\047\uffc8\052" +
    "\uffc8\053\uffc8\055\uffc8\057\uffc8\060\uffc8\065\uffc8\067\uffc8" +
    "\001\002\000\004\027\321\001\002\000\004\027\313\001" +
    "\002\000\050\004\uffe3\005\uffe3\006\uffe3\011\uffe3\027\uffe3" +
    "\033\uffe3\034\uffe3\041\uffe3\044\uffe3\045\uffe3\046\uffe3\047" +
    "\uffe3\052\uffe3\053\uffe3\055\uffe3\057\uffe3\060\uffe3\065\uffe3" +
    "\067\uffe3\001\002\000\036\011\054\014\060\015\047\026" +
    "\037\027\061\033\063\040\310\041\070\061\036\066\065" +
    "\067\042\070\071\071\044\072\062\001\002\000\050\004" +
    "\uffcd\005\uffcd\006\uffcd\011\uffcd\027\uffcd\033\uffcd\034\uffcd" +
    "\041\uffcd\044\uffcd\045\uffcd\046\uffcd\047\uffcd\052\uffcd\053" +
    "\uffcd\055\uffcd\057\uffcd\060\uffcd\065\uffcd\067\uffcd\001\002" +
    "\000\050\004\uffce\005\uffce\006\uffce\011\uffce\027\uffce\033" +
    "\uffce\034\uffce\041\uffce\044\uffce\045\uffce\046\uffce\047\uffce" +
    "\052\uffce\053\uffce\055\uffce\057\uffce\060\uffce\065\uffce\067" +
    "\uffce\001\002\000\004\027\267\001\002\000\050\004\uffe4" +
    "\005\uffe4\006\uffe4\011\uffe4\027\uffe4\033\uffe4\034\uffe4\041" +
    "\uffe4\044\uffe4\045\uffe4\046\uffe4\047\uffe4\052\uffe4\053\uffe4" +
    "\055\uffe4\057\uffe4\060\uffe4\065\uffe4\067\uffe4\001\002\000" +
    "\016\011\uff93\027\145\031\uff8c\036\uff8c\042\uff8c\067\uff93" +
    "\001\002\000\004\027\263\001\002\000\010\031\140\036" +
    "\260\042\141\001\002\000\004\034\257\001\002\000\050" +
    "\004\016\005\012\006\015\011\054\027\061\033\217\034" +
    "\uffe5\041\070\044\242\045\225\046\224\047\232\052\237" +
    "\053\231\055\uffe5\057\234\060\220\065\020\067\241\001" +
    "\002\000\050\004\uffc7\005\uffc7\006\uffc7\011\uffc7\027\uffc7" +
    "\033\uffc7\034\uffc7\041\uffc7\044\uffc7\045\uffc7\046\uffc7\047" +
    "\uffc7\052\uffc7\053\uffc7\055\uffc7\057\uffc7\060\uffc7\065\uffc7" +
    "\067\uffc7\001\002\000\050\004\uffe1\005\uffe1\006\uffe1\011" +
    "\uffe1\027\uffe1\033\uffe1\034\uffe1\041\uffe1\044\uffe1\045\uffe1" +
    "\046\uffe1\047\uffe1\052\uffe1\053\uffe1\055\uffe1\057\uffe1\060" +
    "\uffe1\065\uffe1\067\uffe1\001\002\000\050\004\uffe0\005\uffe0" +
    "\006\uffe0\011\uffe0\027\uffe0\033\uffe0\034\uffe0\041\uffe0\044" +
    "\uffe0\045\uffe0\046\uffe0\047\uffe0\052\uffe0\053\uffe0\055\uffe0" +
    "\057\uffe0\060\uffe0\065\uffe0\067\uffe0\001\002\000\004\040" +
    "\255\001\002\000\050\004\uffd5\005\uffd5\006\uffd5\011\uffd5" +
    "\027\uffd5\033\uffd5\034\uffd5\041\uffd5\044\uffd5\045\uffd5\046" +
    "\uffd5\047\uffd5\052\uffd5\053\uffd5\055\uffd5\057\uffd5\060\uffd5" +
    "\065\uffd5\067\uffd5\001\002\000\050\004\016\005\012\006" +
    "\015\011\054\027\061\033\217\034\uffe5\041\070\044\242" +
    "\045\225\046\224\047\232\052\237\053\231\055\uffe5\057" +
    "\234\060\220\065\020\067\241\001\002\000\006\034\uffe7" +
    "\055\uffe7\001\002\000\050\004\uffdb\005\uffdb\006\uffdb\011" +
    "\uffdb\027\uffdb\033\uffdb\034\uffdb\041\uffdb\044\uffdb\045\uffdb" +
    "\046\uffdb\047\uffdb\052\uffdb\053\uffdb\055\uffdb\057\uffdb\060" +
    "\uffdb\065\uffdb\067\uffdb\001\002\000\006\034\uffe6\055\uffe6" +
    "\001\002\000\064\002\uffd1\004\uffd1\005\uffd1\006\uffd1\011" +
    "\uffd1\027\uffd1\033\uffd1\034\uffd1\041\uffd1\044\uffd1\045\uffd1" +
    "\046\uffd1\047\uffd1\050\uffd1\051\uffd1\052\uffd1\053\uffd1\055" +
    "\uffd1\057\uffd1\060\uffd1\062\uffd1\063\uffd1\064\uffd1\065\uffd1" +
    "\067\uffd1\001\002\000\034\011\054\014\060\015\047\026" +
    "\037\027\061\033\063\041\070\061\036\066\065\067\042" +
    "\070\071\071\044\072\062\001\002\000\006\025\101\040" +
    "\262\001\002\000\050\004\ufff5\005\ufff5\006\ufff5\011\ufff5" +
    "\027\ufff5\033\ufff5\034\ufff5\041\ufff5\044\ufff5\045\ufff5\046" +
    "\ufff5\047\ufff5\052\ufff5\053\ufff5\055\ufff5\057\ufff5\060\ufff5" +
    "\065\ufff5\067\ufff5\001\002\000\034\011\054\014\060\015" +
    "\047\026\037\027\061\033\063\041\070\061\036\066\065" +
    "\067\042\070\071\071\044\072\062\001\002\000\006\025" +
    "\101\030\265\001\002\000\004\033\217\001\002\000\050" +
    "\004\uffcb\005\uffcb\006\uffcb\011\uffcb\027\uffcb\033\uffcb\034" +
    "\uffcb\041\uffcb\044\uffcb\045\uffcb\046\uffcb\047\uffcb\052\uffcb" +
    "\053\uffcb\055\uffcb\057\uffcb\060\uffcb\065\uffcb\067\uffcb\001" +
    "\002\000\004\067\270\001\002\000\004\030\271\001\002" +
    "\000\004\033\272\001\002\000\006\054\274\056\uffc4\001" +
    "\002\000\004\056\303\001\002\000\034\011\054\014\060" +
    "\015\047\026\037\027\061\033\063\041\070\061\036\066" +
    "\065\067\042\070\071\071\044\072\062\001\002\000\006" +
    "\025\101\043\276\001\002\000\046\004\016\005\012\006" +
    "\015\011\054\027\061\033\217\041\070\044\242\045\225" +
    "\046\224\047\232\052\237\053\231\055\uffe5\057\234\060" +
    "\220\065\020\067\241\001\002\000\004\055\300\001\002" +
    "\000\004\040\301\001\002\000\006\054\274\056\uffc4\001" +
    "\002\000\004\056\uffc5\001\002\000\004\043\306\001\002" +
    "\000\004\034\305\001\002\000\050\004\uffc6\005\uffc6\006" +
    "\uffc6\011\uffc6\027\uffc6\033\uffc6\034\uffc6\041\uffc6\044\uffc6" +
    "\045\uffc6\046\uffc6\047\uffc6\052\uffc6\053\uffc6\055\uffc6\057" +
    "\uffc6\060\uffc6\065\uffc6\067\uffc6\001\002\000\046\004\016" +
    "\005\012\006\015\011\054\027\061\033\217\034\uffe5\041" +
    "\070\044\242\045\225\046\224\047\232\052\237\053\231" +
    "\057\234\060\220\065\020\067\241\001\002\000\004\034" +
    "\uffc3\001\002\000\050\004\uffdc\005\uffdc\006\uffdc\011\uffdc" +
    "\027\uffdc\033\uffdc\034\uffdc\041\uffdc\044\uffdc\045\uffdc\046" +
    "\uffdc\047\uffdc\052\uffdc\053\uffdc\055\uffdc\057\uffdc\060\uffdc" +
    "\065\uffdc\067\uffdc\001\002\000\006\025\101\040\312\001" +
    "\002\000\050\004\uffdd\005\uffdd\006\uffdd\011\uffdd\027\uffdd" +
    "\033\uffdd\034\uffdd\041\uffdd\044\uffdd\045\uffdd\046\uffdd\047" +
    "\uffdd\052\uffdd\053\uffdd\055\uffdd\057\uffdd\060\uffdd\065\uffdd" +
    "\067\uffdd\001\002\000\034\011\054\014\060\015\047\026" +
    "\037\027\061\033\063\041\070\061\036\066\065\067\042" +
    "\070\071\071\044\072\062\001\002\000\006\025\101\030" +
    "\315\001\002\000\004\033\217\001\002\000\052\004\uffd0" +
    "\005\uffd0\006\uffd0\011\uffd0\027\uffd0\033\uffd0\034\uffd0\041" +
    "\uffd0\044\uffd0\045\uffd0\046\uffd0\047\uffd0\050\317\052\uffd0" +
    "\053\uffd0\055\uffd0\057\uffd0\060\uffd0\065\uffd0\067\uffd0\001" +
    "\002\000\004\033\217\001\002\000\050\004\uffcf\005\uffcf" +
    "\006\uffcf\011\uffcf\027\uffcf\033\uffcf\034\uffcf\041\uffcf\044" +
    "\uffcf\045\uffcf\046\uffcf\047\uffcf\052\uffcf\053\uffcf\055\uffcf" +
    "\057\uffcf\060\uffcf\065\uffcf\067\uffcf\001\002\000\004\067" +
    "\322\001\002\000\004\030\323\001\002\000\004\033\324" +
    "\001\002\000\006\054\326\056\uffc0\001\002\000\004\056" +
    "\336\001\002\000\034\011\054\014\060\015\047\026\037" +
    "\027\061\033\063\041\070\061\036\066\065\067\042\070" +
    "\071\071\044\072\062\001\002\000\006\025\101\036\330" +
    "\001\002\000\034\011\054\014\060\015\047\026\037\027" +
    "\061\033\063\041\070\061\036\066\065\067\042\070\071" +
    "\071\044\072\062\001\002\000\006\025\101\040\332\001" +
    "\002\000\004\055\333\001\002\000\004\040\334\001\002" +
    "\000\006\054\326\056\uffc0\001\002\000\004\056\uffc1\001" +
    "\002\000\004\036\341\001\002\000\004\034\340\001\002" +
    "\000\050\004\uffc2\005\uffc2\006\uffc2\011\uffc2\027\uffc2\033" +
    "\uffc2\034\uffc2\041\uffc2\044\uffc2\045\uffc2\046\uffc2\047\uffc2" +
    "\052\uffc2\053\uffc2\055\uffc2\057\uffc2\060\uffc2\065\uffc2\067" +
    "\uffc2\001\002\000\034\011\054\014\060\015\047\026\037" +
    "\027\061\033\063\041\070\061\036\066\065\067\042\070" +
    "\071\071\044\072\062\001\002\000\006\025\101\040\343" +
    "\001\002\000\004\034\uffbf\001\002\000\014\004\016\005" +
    "\012\006\015\065\020\067\026\001\002\000\034\011\054" +
    "\014\060\015\047\026\037\027\061\033\063\041\070\061" +
    "\036\066\065\067\042\070\071\071\044\072\062\001\002" +
    "\000\006\025\101\040\347\001\002\000\012\011\054\027" +
    "\061\041\070\067\073\001\002\000\010\031\140\036\351" +
    "\042\141\001\002\000\034\011\054\014\060\015\047\026" +
    "\037\027\061\033\063\041\070\061\036\066\065\067\042" +
    "\070\071\071\044\072\062\001\002\000\006\025\101\030" +
    "\353\001\002\000\004\033\217\001\002\000\050\004\uffca" +
    "\005\uffca\006\uffca\011\uffca\027\uffca\033\uffca\034\uffca\041" +
    "\uffca\044\uffca\045\uffca\046\uffca\047\uffca\052\uffca\053\uffca" +
    "\055\uffca\057\uffca\060\uffca\065\uffca\067\uffca\001\002\000" +
    "\034\011\054\014\060\015\047\026\037\027\061\033\063" +
    "\041\070\061\036\066\065\067\042\070\071\071\044\072" +
    "\062\001\002\000\006\025\101\030\357\001\002\000\004" +
    "\033\217\001\002\000\050\004\uffc9\005\uffc9\006\uffc9\011" +
    "\uffc9\027\uffc9\033\uffc9\034\uffc9\041\uffc9\044\uffc9\045\uffc9" +
    "\046\uffc9\047\uffc9\052\uffc9\053\uffc9\055\uffc9\057\uffc9\060" +
    "\uffc9\065\uffc9\067\uffc9\001\002\000\034\011\054\014\060" +
    "\015\047\026\037\027\061\033\063\041\070\061\036\066" +
    "\065\067\042\070\071\071\044\072\062\001\002\000\006" +
    "\025\101\030\363\001\002\000\004\040\364\001\002\000" +
    "\050\004\uffdf\005\uffdf\006\uffdf\011\uffdf\027\uffdf\033\uffdf" +
    "\034\uffdf\041\uffdf\044\uffdf\045\uffdf\046\uffdf\047\uffdf\052" +
    "\uffdf\053\uffdf\055\uffdf\057\uffdf\060\uffdf\065\uffdf\067\uffdf" +
    "\001\002\000\004\033\366\001\002\000\014\004\016\005" +
    "\012\006\015\065\020\067\026\001\002\000\004\034\372" +
    "\001\002\000\016\004\016\005\012\006\015\034\ufff1\065" +
    "\020\067\026\001\002\000\004\034\ufff2\001\002\000\004" +
    "\040\373\001\002\000\024\004\ufff3\005\ufff3\006\ufff3\051" +
    "\ufff3\062\ufff3\063\ufff3\064\ufff3\065\ufff3\067\ufff3\001\002" +
    "\000\004\030\375\001\002\000\004\035\376\001\002\000" +
    "\014\004\016\005\012\006\015\065\020\067\026\001\002" +
    "\000\006\011\031\033\217\001\002\000\004\002\uffe8\001" +
    "\002\000\004\002\001\001\002\000\004\002\uffff\001\002" +
    "\000\004\002\ufffd\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0101\000\022\002\013\003\004\004\020\005\005\020" +
    "\022\022\003\025\006\044\021\001\001\000\022\002\u0102" +
    "\003\004\004\020\005\005\020\022\022\003\025\006\044" +
    "\021\001\001\000\022\002\u0101\003\004\004\020\005\005" +
    "\020\022\022\003\025\006\044\021\001\001\000\002\001" +
    "\001\000\022\002\u0100\003\004\004\020\005\005\020\022" +
    "\022\003\025\006\044\021\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\002\163\003\004\004\020" +
    "\005\005\020\022\022\003\025\006\044\021\001\001\000" +
    "\002\001\001\000\022\002\026\003\004\004\020\005\005" +
    "\020\022\022\003\025\006\044\021\001\001\000\006\025" +
    "\024\044\021\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\043\033\001\001\000\002\001" +
    "\001\000\002\001\001\000\040\045\056\046\055\047\054" +
    "\050\052\051\051\052\047\053\044\054\040\055\037\056" +
    "\045\057\065\060\042\061\050\062\063\070\066\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\053\153\054\040\055\037\057\065\060\042\061\050" +
    "\062\063\070\066\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\067\122\001\001\000\002\001\001\000\004\066\117" +
    "\001\001\000\004\065\112\001\001\000\004\062\136\001" +
    "\001\000\004\064\104\001\001\000\002\001\001\000\004" +
    "\043\134\001\001\000\002\001\001\000\040\045\132\046" +
    "\055\047\054\050\052\051\051\052\047\053\044\054\040" +
    "\055\037\056\045\057\065\060\042\061\050\062\063\070" +
    "\066\001\001\000\002\001\001\000\040\045\075\046\055" +
    "\047\054\050\052\051\051\052\047\053\044\054\040\055" +
    "\037\056\045\057\065\060\042\061\050\062\063\070\066" +
    "\001\001\000\002\001\001\000\004\044\074\001\001\000" +
    "\002\001\001\000\020\054\073\055\037\057\065\060\042" +
    "\061\050\062\063\070\066\001\001\000\004\062\071\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\063\077\001" +
    "\001\000\040\045\130\046\055\047\054\050\052\051\051" +
    "\052\047\053\044\054\040\055\037\056\045\057\065\060" +
    "\042\061\050\062\063\070\066\001\001\000\002\001\001" +
    "\000\036\046\101\047\054\050\052\051\051\052\047\053" +
    "\044\054\040\055\037\056\045\057\065\060\042\061\050" +
    "\062\063\070\066\001\001\000\002\001\001\000\034\047" +
    "\103\050\052\051\051\052\047\053\044\054\040\055\037" +
    "\056\045\057\065\060\042\061\050\062\063\070\066\001" +
    "\001\000\004\064\104\001\001\000\032\050\107\051\051" +
    "\052\047\053\044\054\040\055\037\056\045\057\065\060" +
    "\042\061\050\062\063\070\066\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\065\112\001\001\000\002\001" +
    "\001\000\002\001\001\000\026\051\115\052\047\053\044" +
    "\054\040\055\037\057\065\060\042\061\050\062\063\070" +
    "\066\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\066\117\001\001\000\002\001\001\000\024\052\121\053" +
    "\044\054\040\055\037\057\065\060\042\061\050\062\063" +
    "\070\066\001\001\000\002\001\001\000\004\067\122\001" +
    "\001\000\022\053\126\054\040\055\037\057\065\060\042" +
    "\061\050\062\063\070\066\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\063\131\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\040\045\142\046\055\047" +
    "\054\050\052\051\051\052\047\053\044\054\040\055\037" +
    "\056\045\057\065\060\042\061\050\062\063\070\066\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\044\023\146\042\145\045\147\046" +
    "\055\047\054\050\052\051\051\052\047\053\044\054\040" +
    "\055\037\056\045\057\065\060\042\061\050\062\063\070" +
    "\066\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\044\023\151\042\145\045\147\046\055\047" +
    "\054\050\052\051\051\052\047\053\044\054\040\055\037" +
    "\056\045\057\065\060\042\061\050\062\063\070\066\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\043\157\001" +
    "\001\000\002\001\001\000\040\045\161\046\055\047\054" +
    "\050\052\051\051\052\047\053\044\054\040\055\037\056" +
    "\045\057\065\060\042\061\050\062\063\070\066\001\001" +
    "\000\004\043\162\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\044\165\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\044\174\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\021" +
    "\201\040\203\041\200\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\040" +
    "\203\041\205\001\001\000\002\001\001\000\004\044\210" +
    "\001\001\000\004\044\211\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\044\214\001\001" +
    "\000\004\035\215\001\001\000\002\001\001\000\054\006" +
    "\252\007\244\010\235\011\234\012\225\013\245\014\227" +
    "\017\232\025\237\026\243\027\246\030\226\031\247\032" +
    "\221\033\220\034\222\035\251\044\021\060\250\061\242" +
    "\062\063\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\040\045\310\046\055\047\054\050\052\051\051\052" +
    "\047\053\044\054\040\055\037\056\045\057\065\060\042" +
    "\061\050\062\063\070\066\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\054\006\252\007\244\010\235\011\234\012\225" +
    "\013\245\014\227\017\232\025\237\026\255\027\246\030" +
    "\226\031\247\032\221\033\220\034\222\035\251\044\021" +
    "\060\250\061\242\062\063\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\054\006\252\007\244\010\235\011\234\012" +
    "\225\013\245\014\227\017\232\025\237\026\253\027\246" +
    "\030\226\031\247\032\221\033\220\034\222\035\251\044" +
    "\021\060\250\061\242\062\063\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\040\045\260\046\055\047\054\050\052\051\051\052\047" +
    "\053\044\054\040\055\037\056\045\057\065\060\042\061" +
    "\050\062\063\070\066\001\001\000\002\001\001\000\002" +
    "\001\001\000\040\045\263\046\055\047\054\050\052\051" +
    "\051\052\047\053\044\054\040\055\037\056\045\057\065" +
    "\060\042\061\050\062\063\070\066\001\001\000\002\001" +
    "\001\000\004\035\265\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\015" +
    "\272\001\001\000\004\036\303\001\001\000\040\045\274" +
    "\046\055\047\054\050\052\051\051\052\047\053\044\054" +
    "\040\055\037\056\045\057\065\060\042\061\050\062\063" +
    "\070\066\001\001\000\002\001\001\000\054\006\252\007" +
    "\244\010\235\011\234\012\225\013\245\014\227\017\232" +
    "\025\237\026\276\027\246\030\226\031\247\032\221\033" +
    "\220\034\222\035\251\044\021\060\250\061\242\062\063" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\015" +
    "\301\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\054\006\252\007\244\010" +
    "\235\011\234\012\225\013\245\014\227\017\232\025\237" +
    "\026\306\027\246\030\226\031\247\032\221\033\220\034" +
    "\222\035\251\044\021\060\250\061\242\062\063\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\040\045\313\046\055\047\054\050\052" +
    "\051\051\052\047\053\044\054\040\055\037\056\045\057" +
    "\065\060\042\061\050\062\063\070\066\001\001\000\002" +
    "\001\001\000\004\035\315\001\001\000\002\001\001\000" +
    "\004\035\317\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\016\324\001" +
    "\001\000\004\037\336\001\001\000\040\045\326\046\055" +
    "\047\054\050\052\051\051\052\047\053\044\054\040\055" +
    "\037\056\045\057\065\060\042\061\050\062\063\070\066" +
    "\001\001\000\002\001\001\000\040\045\330\046\055\047" +
    "\054\050\052\051\051\052\047\053\044\054\040\055\037" +
    "\056\045\057\065\060\042\061\050\062\063\070\066\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\016\334\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\040\045\341" +
    "\046\055\047\054\050\052\051\051\052\047\053\044\054" +
    "\040\055\037\056\045\057\065\060\042\061\050\062\063" +
    "\070\066\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\025\344\044\021\001\001\000\040\045\345\046\055" +
    "\047\054\050\052\051\051\052\047\053\044\054\040\055" +
    "\037\056\045\057\065\060\042\061\050\062\063\070\066" +
    "\001\001\000\002\001\001\000\006\061\347\062\063\001" +
    "\001\000\002\001\001\000\040\045\351\046\055\047\054" +
    "\050\052\051\051\052\047\053\044\054\040\055\037\056" +
    "\045\057\065\060\042\061\050\062\063\070\066\001\001" +
    "\000\002\001\001\000\004\035\353\001\001\000\002\001" +
    "\001\000\040\045\355\046\055\047\054\050\052\051\051" +
    "\052\047\053\044\054\040\055\037\056\045\057\065\060" +
    "\042\061\050\062\063\070\066\001\001\000\002\001\001" +
    "\000\004\035\357\001\001\000\002\001\001\000\040\045" +
    "\361\046\055\047\054\050\052\051\051\052\047\053\044" +
    "\054\040\055\037\056\045\057\065\060\042\061\050\062" +
    "\063\070\066\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\024\366\025" +
    "\367\044\021\001\001\000\002\001\001\000\010\024\370" +
    "\025\367\044\021\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\044\376\001\001\000\004\035\377\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$AnalizadorSintacticoTiny$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$AnalizadorSintacticoTiny$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$AnalizadorSintacticoTiny$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 
   errores = new GestionErroresTiny();
   AnalizadorLexicoTiny alex = (AnalizadorLexicoTiny)getScanner();
   alex.fijaGestionErrores(errores);

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return getScanner().next_token(); 
    }

 
   private GestionErroresTiny errores;
   public void syntax_error(Symbol unidadLexica) {
     errores.errorSintactico((UnidadLexica)unidadLexica);
   }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$AnalizadorSintacticoTiny$actions {
  private final AnalizadorSintacticoTiny parser;

  /** Constructor */
  CUP$AnalizadorSintacticoTiny$actions(AnalizadorSintacticoTiny parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintacticoTiny$do_action_part00000000(
    int                        CUP$AnalizadorSintacticoTiny$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintacticoTiny$parser,
    java.util.Stack            CUP$AnalizadorSintacticoTiny$stack,
    int                        CUP$AnalizadorSintacticoTiny$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$AnalizadorSintacticoTiny$result;

      /* select the action based on the action number */
      switch (CUP$AnalizadorSintacticoTiny$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // S ::= DECLARACION S 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("S",0, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= S EOF 
            {
              Object RESULT =null;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		RESULT = start_val;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("$START",0, RESULT);
            }
          /* ACCEPT */
          CUP$AnalizadorSintacticoTiny$parser.done_parsing();
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // S ::= CONSTVAR S 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("S",0, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // S ::= STRUCTDEC S 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("S",0, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // S ::= ALIAS S 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("S",0, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // S ::= FUNCDEC S 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("S",0, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // S ::= MAINFUNC 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("S",0, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // DECLARACION ::= TYPE IDEN LISTADEC PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("DECLARACION",19, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // DECLARACION ::= TYPE IDEN IGUAL E0 LISTADEC PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("DECLARACION",19, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // LISTADEC ::= COMA IDEN LISTADEC 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("LISTADEC",33, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // LISTADEC ::= COMA IDEN IGUAL E0 LISTADEC 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("LISTADEC",33, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // LISTADEC ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("LISTADEC",33, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // ASIG ::= ACCESO IGUAL E0 PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ASIG",13, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // CONSTVAR ::= CONST DECLARACION 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CONSTVAR",1, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // STRUCTDEC ::= STRUCT IDEN LLAP CAMPOS LLCIERRE PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("STRUCTDEC",2, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // CAMPOS ::= DECLARACION CAMPOS 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CAMPOS",18, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // CAMPOS ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CAMPOS",18, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // ALIAS ::= TYPEDEF IDEN IGUAL TYPE PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ALIAS",16, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // FUNCDEC ::= IDEN PAP PARAMS PCIERRE FLECHA TYPE BINST 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("FUNCDEC",14, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // PARAMS ::= LISTAPARAMS 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("PARAMS",15, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // PARAMS ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("PARAMS",15, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // LISTAPARAMS ::= PARAM COMA LISTAPARAMS 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("LISTAPARAMS",31, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // LISTAPARAMS ::= PARAM 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("LISTAPARAMS",31, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // PARAM ::= IDEN DOSPUNTOS TYPE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("PARAM",30, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // PARAM ::= IDEN DOSPUNTOS AMPERSAND TYPE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("PARAM",30, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // MAINFUNC ::= MAIN PAP PCIERRE FLECHA TYPE BINST 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("MAINFUNC",3, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // LISTAINST ::= INST LISTAINST 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("LISTAINST",20, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // LISTAINST ::= BLOQUE LISTAINST 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("LISTAINST",20, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // LISTAINST ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("LISTAINST",20, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // INST ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INST",4, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // INST ::= ASIG 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INST",4, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // INST ::= SHOWFUNC 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INST",4, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // INST ::= RETURNFUNC 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INST",4, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // INST ::= LLAMADAFUNCAUX 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INST",4, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // SHOWFUNC ::= SHOW PAP E0 PCIERRE PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("SHOWFUNC",22, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // READFUNC ::= READ PAP PCIERRE 
            {
              E RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("READFUNC",45, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // RETURNFUNC ::= RETURN E0 PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("RETURNFUNC",21, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // RETURNFUNC ::= RETURN PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("RETURNFUNC",21, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // LLAMADAFUNCAUX ::= LLAMADAFUNC PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("LLAMADAFUNCAUX",23, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // LLAMADAFUNC ::= IDEN PAP ARGS PCIERRE 
            {
              E RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("LLAMADAFUNC",46, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // ARGS ::= LISTAARGS 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ARGS",17, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // ARGS ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ARGS",17, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // LISTAARGS ::= E0 COMA ARGS 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("LISTAARGS",32, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // LISTAARGS ::= E0 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("LISTAARGS",32, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // BLOQUE ::= BINST 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("BLOQUE",5, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // BLOQUE ::= CONDICIONALES 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("BLOQUE",5, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // BLOQUE ::= BUCLES 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("BLOQUE",5, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // BLOQUE ::= SWITCHES 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("BLOQUE",5, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // BINST ::= LLAP LISTAINST LLCIERRE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("BINST",27, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // CONDICIONALES ::= IF PAP E0 PCIERRE BINST 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CONDICIONALES",24, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // CONDICIONALES ::= IF PAP E0 PCIERRE BINST ELSE BINST 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CONDICIONALES",24, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // BUCLES ::= WHILEEXP 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("BUCLES",25, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // BUCLES ::= FOREXP 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("BUCLES",25, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // BUCLES ::= REPEATEXP 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("BUCLES",25, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // WHILEEXP ::= WHILE PAP E0 PCIERRE BINST 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("WHILEEXP",6, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // FOREXP ::= FOR PAP DECLARACION E0 PUNTOYCOMA ACCESO IGUAL E0 PCIERRE BINST 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("FOREXP",7, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // REPEATEXP ::= REPEAT PAP E0 PCIERRE BINST 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("REPEATEXP",8, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // SWITCHES ::= SWITCHEXP 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("SWITCHES",26, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // SWITCHES ::= VALUEFOREXP 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("SWITCHES",26, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // SWITCHEXP ::= SWITCH PAP IDEN PCIERRE LLAP CASEEXP DEFAULTEXP LLCIERRE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("SWITCHEXP",10, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // CASEEXP ::= CASE E0 DOSPUNTOS LISTAINST BREAK PUNTOYCOMA CASEEXP 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CASEEXP",11, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // CASEEXP ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CASEEXP",11, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // DEFAULTEXP ::= DEFAULT DOSPUNTOS LISTAINST 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("DEFAULTEXP",28, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // VALUEFOREXP ::= VALUEFOR PAP IDEN PCIERRE LLAP CASEEXPVF DEFAULTEXPVF LLCIERRE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("VALUEFOREXP",9, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // CASEEXPVF ::= CASE E0 IGUAL E0 PUNTOYCOMA BREAK PUNTOYCOMA CASEEXPVF 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CASEEXPVF",12, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // CASEEXPVF ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CASEEXPVF",12, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // DEFAULTEXPVF ::= DEFAULT IGUAL E0 PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("DEFAULTEXPVF",29, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // E0 ::= E0 OR E1 
            {
              E RESULT =null;
		E op1 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		E op2 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new EBin(op1, op2, KindE.OR, new TBasics(KindT.BOOL));
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E0",35, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // E0 ::= E1 
            {
              E RESULT =null;
		E e = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = e;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E0",35, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // E1 ::= E1 AND E2 
            {
              E RESULT =null;
		E op1 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		E op2 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new EBin(op1, op2, KindE.AND, new TBasics(KindT.BOOL)); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E1",36, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // E1 ::= E2 
            {
              E RESULT =null;
		E e = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = e;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E1",36, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // E2 ::= E2 OP0 E3 
            {
              E RESULT =null;
		E op1 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		KindE operator = (KindE)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		E op2 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new EBin(op1, op2, operator, new TBasics(KindT.BOOL)); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E2",37, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // E2 ::= E3 
            {
              E RESULT =null;
		E e = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = e;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E2",37, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // E3 ::= E3 OP1 E4 
            {
              E RESULT =null;
		E op1 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		KindE operator = (KindE)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		E op2 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new EBin(op1, op2, operator, new TBasics(KindT.BOOL)); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E3",38, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // E3 ::= E4 
            {
              E RESULT =null;
		E e = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = e;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E3",38, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // E3 ::= NEWEXP 
            {
              E RESULT =null;
		E nexp = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = nexp;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E3",38, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // E4 ::= E4 OP2 E5 
            {
              E RESULT =null;
		E op1 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		KindE operator = (KindE)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		E op2 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new EBin(op1, op2, operator, new TBasics(KindT.INT));
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E4",39, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // E4 ::= E5 
            {
              E RESULT =null;
		E e = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = e;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E4",39, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // E5 ::= E5 OP3 E6 
            {
              E RESULT =null;
		E op1 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		KindE operator = (KindE)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		E op2 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new EBin(op1, op2, operator, new TBasics(KindT.INT));
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E5",40, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // E5 ::= E6 
            {
              E RESULT =null;
		E e = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = e;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E5",40, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // E6 ::= NOT E6 
            {
              E RESULT =null;
		E op1 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = new EUnary(op1, KindE.NOT, new TBasics(KindT.BOOL));
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E6",41, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // E6 ::= E7 
            {
              E RESULT =null;
		E e = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = e;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E6",41, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // E7 ::= OP4 E7 
            {
              E RESULT =null;
		KindE operator = (KindE)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		E op1 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = new EUnary(op1, operator, new TArray(new TBasics(KindT.INT)));
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E7",42, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // E7 ::= E8 
            {
              E RESULT =null;
		E e = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = e;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E7",42, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // E8 ::= ENT 
            {
              E RESULT =null;
		TokenValue value = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = new EConst(value.lexema, new TBasics(KindT.INT));
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E8",43, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // E8 ::= TRUE 
            {
              E RESULT =null;
		TokenValue value = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = new EConst(value.lexema, new TBasics(KindT.BOOL));
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E8",43, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // E8 ::= FALSE 
            {
              E RESULT =null;
		TokenValue value = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = new EConst(value.lexema, new TBasics(KindT.BOOL));
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E8",43, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // E8 ::= ACCESO 
            {
              E RESULT =null;
		E access = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = access;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E8",43, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // E8 ::= LLAMADAFUNC 
            {
              E RESULT =null;
		E callFunc = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = callFunc;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E8",43, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // E8 ::= READFUNC 
            {
              E RESULT =null;
		E read = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = read;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E8",43, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // E8 ::= LLAP E0 E9 LLCIERRE 
            {
              E RESULT =null;
		E elem = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		ArrayList<E> elems = (ArrayList<E>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		elems.add(elem); RESULT = new EArray(elems);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E8",43, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // E9 ::= COMA E0 E9 
            {
              ArrayList<E> RESULT =null;
		E e = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		ArrayList<E> list = (ArrayList<E>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		list.add(e); RESULT = list;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E9",49, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // E9 ::= 
            {
              ArrayList<E> RESULT =null;
		ArrayList<E> l = new ArrayList<E>(); RESULT = l;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E9",49, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // OP0 ::= DISTINTO 
            {
              KindE RESULT =null;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		d = KindE.DISTINCT;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OP0",50, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // OP0 ::= IGUALDAD 
            {
              KindE RESULT =null;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		e = KindE.EQUAL;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OP0",50, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // OP1 ::= MENOR 
            {
              KindE RESULT =null;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		m = KindE.LESS;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OP1",51, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // OP1 ::= MAYOR 
            {
              KindE RESULT =null;
		Object ma = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		ma = KindE.GREATER;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OP1",51, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // OP1 ::= MENORIGUAL 
            {
              KindE RESULT =null;
		Object me = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		me = KindE.LEQ;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OP1",51, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // OP1 ::= MAYORIGUAL 
            {
              KindE RESULT =null;
		Object may = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		may = KindE.GREQ;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OP1",51, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // OP2 ::= MAS 
            {
              KindE RESULT =null;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		m = KindE.SUM;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OP2",52, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // OP2 ::= MENOS 
            {
              KindE RESULT =null;
		Object me = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		me = KindE.SUB;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OP2",52, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // OP3 ::= POR 
            {
              KindE RESULT =null;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		p = KindE.MUL;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OP3",53, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // OP3 ::= DIV 
            {
              KindE RESULT =null;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		d = KindE.DIV;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OP3",53, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // OP3 ::= MOD 
            {
              KindE RESULT =null;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		m = KindE.MOD;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OP3",53, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // OP4 ::= SUMLIST 
            {
              KindE RESULT =null;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		s = KindE.SUML;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OP4",54, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // OP4 ::= PRODLIST 
            {
              KindE RESULT =null;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		p= KindE.PRODL;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OP4",54, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // NEWEXP ::= NEW TYPE 
            {
              E RESULT =null;
		T t = (T)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = new ENew(t);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("NEWEXP",44, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // TYPE ::= TIPOINT 
            {
              T RESULT =null;
		 RESULT = new TBasics(KindT.INT);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TYPE",34, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // TYPE ::= TIPOBOOL 
            {
              T RESULT =null;
		 RESULT = new TBasics(KindT.BOOL);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TYPE",34, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // TYPE ::= VOID 
            {
              T RESULT =null;
		 RESULT = new TBasics(KindT.VOID);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TYPE",34, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // TYPE ::= IDEN 
            {
              T RESULT =null;
		TokenValue id = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new TStruct(id.lexema);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TYPE",34, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // TYPE ::= LIST MENOR TYPE MAYOR CAP ENT CCIERRE 
            {
              T RESULT =null;
		T t = (T)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-4)).value;
		TokenValue size = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 EConst sizeConst = new EConst(size.lexema, new TBasics(KindT.INT)); RESULT = new TArray(t, sizeConst);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TYPE",34, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // TYPE ::= TYPE POR 
            {
              T RESULT =null;
		T t = (T)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = new TPointer(t);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TYPE",34, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // ACCESO ::= ACCESO CAP E0 CCIERRE 
            {
              E RESULT =null;
		E a = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)).value;
		E e = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		RESULT = new AArray((A) a, e);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ACCESO",47, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // ACCESO ::= ACCESO PUNTO IDEN 
            {
              E RESULT =null;
		E a = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		TokenValue id = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = new AStruct((A) a, id.lexema);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ACCESO",47, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // ACCESO ::= PAP E0 PCIERRE 
            {
              E RESULT =null;
		E e = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		RESULT = e;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ACCESO",47, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // ACCESO ::= NACCESO 
            {
              E RESULT =null;
		E na = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = na;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ACCESO",47, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // NACCESO ::= IDEN 
            {
              E RESULT =null;
		TokenValue id = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new AVariable(id.lexema);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("NACCESO",48, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // NACCESO ::= POR NACCESO 
            {
              E RESULT =null;
		E na = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new APointer((A) na);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("NACCESO",48, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // NACCESO ::= AMPERSAND NACCESO 
            {
              E RESULT =null;
		E na = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = new AAdPointer((A) na);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("NACCESO",48, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$AnalizadorSintacticoTiny$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintacticoTiny$do_action(
    int                        CUP$AnalizadorSintacticoTiny$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintacticoTiny$parser,
    java.util.Stack            CUP$AnalizadorSintacticoTiny$stack,
    int                        CUP$AnalizadorSintacticoTiny$top)
    throws java.lang.Exception
    {
              return CUP$AnalizadorSintacticoTiny$do_action_part00000000(
                               CUP$AnalizadorSintacticoTiny$act_num,
                               CUP$AnalizadorSintacticoTiny$parser,
                               CUP$AnalizadorSintacticoTiny$stack,
                               CUP$AnalizadorSintacticoTiny$top);
    }
}

