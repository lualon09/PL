
//----------------------------------------------------
// The following code was generated by CUP v0.11b beta 20140220
// Wed Mar 20 18:32:29 CET 2024
//----------------------------------------------------

package asint;

import java_cup.runtime.*;
import alex.AnalizadorLexicoTiny;
import alex.UnidadLexica;
import errors.GestionErroresTiny;
import java_cup.runtime.ComplexSymbolFactory.Location;

/** CUP v0.11b beta 20140220 generated parser.
  * @version Wed Mar 20 18:32:29 CET 2024
  */
public class AnalizadorSintacticoTiny extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public AnalizadorSintacticoTiny() {super();}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintacticoTiny(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintacticoTiny(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\170\000\002\002\004\000\002\002\004\000\002\002" +
    "\004\000\002\002\004\000\002\002\004\000\002\002\004" +
    "\000\002\002\003\000\002\050\006\000\002\050\010\000" +
    "\002\070\005\000\002\070\007\000\002\070\002\000\002" +
    "\041\006\000\002\003\004\000\002\026\010\000\002\047" +
    "\004\000\002\047\003\000\002\044\007\000\002\042\011" +
    "\000\002\043\003\000\002\043\002\000\002\065\005\000" +
    "\002\065\003\000\002\064\005\000\002\064\006\000\002" +
    "\027\010\000\002\051\004\000\002\051\004\000\002\051" +
    "\002\000\002\030\003\000\002\030\003\000\002\030\003" +
    "\000\002\030\003\000\002\030\003\000\002\053\007\000" +
    "\002\054\005\000\002\052\005\000\002\052\004\000\002" +
    "\055\004\000\002\045\006\000\002\046\003\000\002\046" +
    "\002\000\002\066\005\000\002\066\003\000\002\031\003" +
    "\000\002\031\003\000\002\031\003\000\002\031\003\000" +
    "\002\061\005\000\002\056\007\000\002\056\011\000\002" +
    "\057\003\000\002\057\003\000\002\057\003\000\002\032" +
    "\007\000\002\033\014\000\002\034\007\000\002\060\003" +
    "\000\002\060\003\000\002\036\012\000\002\037\011\000" +
    "\002\037\002\000\002\062\005\000\002\035\012\000\002" +
    "\040\012\000\002\040\002\000\002\063\006\000\002\005" +
    "\005\000\002\005\003\000\002\006\005\000\002\006\003" +
    "\000\002\007\005\000\002\007\003\000\002\010\005\000" +
    "\002\010\003\000\002\010\003\000\002\011\005\000\002" +
    "\011\003\000\002\012\005\000\002\012\003\000\002\013" +
    "\004\000\002\013\003\000\002\014\004\000\002\014\003" +
    "\000\002\015\003\000\002\015\003\000\002\015\003\000" +
    "\002\015\003\000\002\015\003\000\002\015\003\000\002" +
    "\015\006\000\002\016\005\000\002\016\002\000\002\017" +
    "\003\000\002\017\003\000\002\020\003\000\002\020\003" +
    "\000\002\020\003\000\002\020\003\000\002\021\003\000" +
    "\002\021\003\000\002\022\003\000\002\022\003\000\002" +
    "\022\003\000\002\023\003\000\002\023\003\000\002\067" +
    "\004\000\002\004\003\000\002\004\003\000\002\004\003" +
    "\000\002\004\003\000\002\004\011\000\002\004\004\000" +
    "\002\024\006\000\002\024\005\000\002\024\005\000\002" +
    "\024\003\000\002\025\003\000\002\025\004\000\002\025" +
    "\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0101\000\024\004\013\005\016\006\012\007\015\055" +
    "\011\066\010\067\017\070\024\071\020\001\002\000\024" +
    "\004\013\005\016\006\012\007\015\055\011\066\010\067" +
    "\017\070\024\071\020\001\002\000\024\004\013\005\016" +
    "\006\012\007\015\055\011\066\010\067\017\070\024\071" +
    "\020\001\002\000\004\002\ufffb\001\002\000\024\004\013" +
    "\005\016\006\012\007\015\055\011\066\010\067\017\070" +
    "\024\071\020\001\002\000\004\033\374\001\002\000\004" +
    "\004\365\001\002\000\046\004\uff95\015\uff95\022\uff95\023" +
    "\uff95\024\uff95\025\uff95\026\uff95\027\uff95\030\uff95\031\uff95" +
    "\034\uff95\036\uff95\037\uff95\040\uff95\042\uff95\043\uff95\044" +
    "\uff95\047\uff95\001\002\000\010\004\uff93\015\uff93\033\200" +
    "\001\002\000\004\002\177\001\002\000\046\004\uff94\015" +
    "\uff94\022\uff94\023\uff94\024\uff94\025\uff94\026\uff94\027\uff94" +
    "\030\uff94\031\uff94\034\uff94\036\uff94\037\uff94\040\uff94\042" +
    "\uff94\043\uff94\044\uff94\047\uff94\001\002\000\046\004\uff96" +
    "\015\uff96\022\uff96\023\uff96\024\uff96\025\uff96\026\uff96\027" +
    "\uff96\030\uff96\031\uff96\034\uff96\036\uff96\037\uff96\040\uff96" +
    "\042\uff96\043\uff96\044\uff96\047\uff96\001\002\000\004\004" +
    "\173\001\002\000\004\023\165\001\002\000\024\004\013" +
    "\005\016\006\012\007\015\055\011\066\010\067\017\070" +
    "\024\071\020\001\002\000\006\004\030\015\031\001\002" +
    "\000\024\004\013\005\016\006\012\007\015\055\011\066" +
    "\010\067\017\070\024\071\020\001\002\000\014\004\026" +
    "\005\016\006\012\007\015\071\020\001\002\000\024\004" +
    "\ufff4\005\ufff4\006\ufff4\007\ufff4\055\ufff4\066\ufff4\067\ufff4" +
    "\070\ufff4\071\ufff4\001\002\000\046\004\uff93\015\uff93\022" +
    "\uff93\023\uff93\024\uff93\025\uff93\026\uff93\027\uff93\030\uff93" +
    "\031\uff93\034\uff93\036\uff93\037\uff93\040\uff93\042\uff93\043" +
    "\uff93\044\uff93\047\uff93\001\002\000\004\002\ufffc\001\002" +
    "\000\010\042\033\043\032\044\ufff6\001\002\000\046\004" +
    "\uff91\015\uff91\022\uff91\023\uff91\024\uff91\025\uff91\026\uff91" +
    "\027\uff91\030\uff91\031\uff91\034\uff91\036\uff91\037\uff91\040" +
    "\uff91\042\uff91\043\uff91\044\uff91\047\uff91\001\002\000\004" +
    "\004\157\001\002\000\034\004\042\010\071\011\044\012" +
    "\062\015\054\020\060\021\047\032\037\033\061\037\063" +
    "\045\070\065\036\072\065\001\002\000\004\044\035\001" +
    "\002\000\100\004\ufffa\005\ufffa\006\ufffa\007\ufffa\010\ufffa" +
    "\011\ufffa\012\ufffa\015\ufffa\020\ufffa\021\ufffa\032\ufffa\033" +
    "\ufffa\037\ufffa\040\ufffa\045\ufffa\050\ufffa\051\ufffa\052\ufffa" +
    "\053\ufffa\055\ufffa\056\ufffa\057\ufffa\061\ufffa\063\ufffa\064" +
    "\ufffa\065\ufffa\066\ufffa\067\ufffa\070\ufffa\071\ufffa\072\ufffa" +
    "\001\002\000\004\033\155\001\002\000\032\004\042\010" +
    "\071\011\044\012\062\015\054\020\060\021\047\032\037" +
    "\033\061\037\063\045\070\065\036\001\002\000\052\013" +
    "\uffae\014\uffae\015\uffae\016\uffae\017\uffae\022\uffae\023\uffae" +
    "\024\uffae\025\uffae\026\uffae\027\uffae\030\uffae\031\uffae\034" +
    "\uffae\036\uffae\040\uffae\042\uffae\043\uffae\044\uffae\047\uffae" +
    "\001\002\000\052\013\uffb0\014\uffb0\015\uffb0\016\uffb0\017" +
    "\uffb0\022\uffb0\023\uffb0\024\uffb0\025\uffb0\026\uffb0\027\uffb0" +
    "\030\uffb0\031\uffb0\034\uffb0\036\uffb0\040\uffb0\042\uffb0\043" +
    "\uffb0\044\uffb0\047\uffb0\001\002\000\060\013\uff8c\014\uff8c" +
    "\015\uff8c\016\uff8c\017\uff8c\022\uff8c\023\uff8c\024\uff8c\025" +
    "\uff8c\026\uff8c\027\uff8c\030\uff8c\031\uff8c\033\145\034\uff8c" +
    "\035\uff8c\036\uff8c\040\uff8c\042\uff8c\043\uff8c\044\uff8c\046" +
    "\uff8c\047\uff8c\001\002\000\052\013\uffa9\014\uffa9\015\uffa9" +
    "\016\uffa9\017\uffa9\022\uffa9\023\uffa9\024\uffa9\025\uffa9\026" +
    "\uffa9\027\uffa9\030\uffa9\031\uffa9\034\uffa9\036\uffa9\040\uffa9" +
    "\042\uffa9\043\uffa9\044\uffa9\047\uffa9\001\002\000\052\013" +
    "\uffac\014\uffac\015\uffac\016\uffac\017\uffac\022\uffac\023\uffac" +
    "\024\uffac\025\uffac\026\uffac\027\uffac\030\uffac\031\uffac\034" +
    "\uffac\036\uffac\040\uffac\042\uffac\043\uffac\044\uffac\047\uffac" +
    "\001\002\000\052\013\uffb2\014\uffb2\015\uffb2\016\uffb2\017" +
    "\uffb2\022\uffb2\023\uffb2\024\uffb2\025\uffb2\026\uffb2\027\uffb2" +
    "\030\uffb2\031\uffb2\034\uffb2\036\uffb2\040\uffb2\042\uffb2\043" +
    "\uffb2\044\uffb2\047\uffb2\001\002\000\040\022\uffb6\023\uffb6" +
    "\024\uffb6\025\uffb6\026\uffb6\027\uffb6\030\uffb6\031\uffb6\034" +
    "\uffb6\036\uffb6\040\uffb6\042\uffb6\043\uffb6\044\uffb6\047\uffb6" +
    "\001\002\000\030\004\uff98\010\uff98\011\uff98\012\uff98\015" +
    "\uff98\020\uff98\021\uff98\033\uff98\037\uff98\045\uff98\065\uff98" +
    "\001\002\000\052\013\uffb4\014\uffb4\015\126\016\125\017" +
    "\124\022\uffb4\023\uffb4\024\uffb4\025\uffb4\026\uffb4\027\uffb4" +
    "\030\uffb4\031\uffb4\034\uffb4\036\uffb4\040\uffb4\042\uffb4\043" +
    "\uffb4\044\uffb4\047\uffb4\001\002\000\056\013\uffaa\014\uffaa" +
    "\015\uffaa\016\uffaa\017\uffaa\022\uffaa\023\uffaa\024\uffaa\025" +
    "\uffaa\026\uffaa\027\uffaa\030\uffaa\031\uffaa\034\uffaa\035\140" +
    "\036\uffaa\040\uffaa\042\uffaa\043\uffaa\044\uffaa\046\141\047" +
    "\uffaa\001\002\000\044\013\117\014\121\022\uffb7\023\uffb7" +
    "\024\uffb7\025\uffb7\026\uffb7\027\uffb7\030\uffb7\031\uffb7\034" +
    "\uffb7\036\uffb7\040\uffb7\042\uffb7\043\uffb7\044\uffb7\047\uffb7" +
    "\001\002\000\040\022\115\023\114\024\112\025\111\026" +
    "\uffb9\027\uffb9\030\uffb9\031\uffb9\034\uffb9\036\uffb9\040\uffb9" +
    "\042\uffb9\043\uffb9\044\uffb9\047\uffb9\001\002\000\010\004" +
    "\073\015\054\045\070\001\002\000\030\026\106\027\107" +
    "\030\uffbb\031\uffbb\034\uffbb\036\uffbb\040\uffbb\042\uffbb\043" +
    "\uffbb\044\uffbb\047\uffbb\001\002\000\024\030\103\031\uffbd" +
    "\034\uffbd\036\uffbd\040\uffbd\042\uffbd\043\uffbd\044\uffbd\047" +
    "\uffbd\001\002\000\010\031\101\043\032\044\ufff6\001\002" +
    "\000\030\004\uff99\010\uff99\011\uff99\012\uff99\015\uff99\020" +
    "\uff99\021\uff99\033\uff99\037\uff99\045\uff99\065\uff99\001\002" +
    "\000\034\004\042\010\071\011\044\012\062\015\054\020" +
    "\060\021\047\032\037\033\061\037\063\045\070\065\036" +
    "\072\065\001\002\000\052\013\uffab\014\uffab\015\uffab\016" +
    "\uffab\017\uffab\022\uffab\023\uffab\024\uffab\025\uffab\026\uffab" +
    "\027\uffab\030\uffab\031\uffab\034\uffab\036\uffab\040\uffab\042" +
    "\uffab\043\uffab\044\uffab\047\uffab\001\002\000\034\004\042" +
    "\010\071\011\044\012\062\015\054\020\060\021\047\032" +
    "\037\033\061\037\063\045\070\065\036\072\065\001\002" +
    "\000\056\013\uff8d\014\uff8d\015\uff8d\016\uff8d\017\uff8d\022" +
    "\uff8d\023\uff8d\024\uff8d\025\uff8d\026\uff8d\027\uff8d\030\uff8d" +
    "\031\uff8d\034\uff8d\035\uff8d\036\uff8d\040\uff8d\042\uff8d\043" +
    "\uff8d\044\uff8d\046\uff8d\047\uff8d\001\002\000\014\004\026" +
    "\005\016\006\012\007\015\071\020\001\002\000\052\013" +
    "\uffa8\014\uffa8\015\uffa8\016\uffa8\017\uffa8\022\uffa8\023\uffa8" +
    "\024\uffa8\025\uffa8\026\uffa8\027\uffa8\030\uffa8\031\uffa8\034" +
    "\uffa8\036\uffa8\040\uffa8\042\uffa8\043\uffa8\044\uffa8\047\uffa8" +
    "\001\002\000\030\004\042\010\071\011\044\012\062\015" +
    "\054\020\060\021\047\033\061\037\063\045\070\065\036" +
    "\001\002\000\010\004\073\015\054\045\070\001\002\000" +
    "\052\013\uffad\014\uffad\015\uffad\016\uffad\017\uffad\022\uffad" +
    "\023\uffad\024\uffad\025\uffad\026\uffad\027\uffad\030\uffad\031" +
    "\uffad\034\uffad\036\uffad\040\uffad\042\uffad\043\uffad\044\uffad" +
    "\047\uffad\001\002\000\056\013\uff8a\014\uff8a\015\uff8a\016" +
    "\uff8a\017\uff8a\022\uff8a\023\uff8a\024\uff8a\025\uff8a\026\uff8a" +
    "\027\uff8a\030\uff8a\031\uff8a\034\uff8a\035\uff8a\036\uff8a\040" +
    "\uff8a\042\uff8a\043\uff8a\044\uff8a\046\uff8a\047\uff8a\001\002" +
    "\000\056\013\uff8c\014\uff8c\015\uff8c\016\uff8c\017\uff8c\022" +
    "\uff8c\023\uff8c\024\uff8c\025\uff8c\026\uff8c\027\uff8c\030\uff8c" +
    "\031\uff8c\034\uff8c\035\uff8c\036\uff8c\040\uff8c\042\uff8c\043" +
    "\uff8c\044\uff8c\046\uff8c\047\uff8c\001\002\000\052\013\uffaf" +
    "\014\uffaf\015\uffaf\016\uffaf\017\uffaf\022\uffaf\023\uffaf\024" +
    "\uffaf\025\uffaf\026\uffaf\027\uffaf\030\uffaf\031\uffaf\034\uffaf" +
    "\036\uffaf\040\uffaf\042\uffaf\043\uffaf\044\uffaf\047\uffaf\001" +
    "\002\000\042\015\031\022\uff97\023\uff97\024\uff97\025\uff97" +
    "\026\uff97\027\uff97\030\uff97\031\uff97\034\uff97\036\uff97\040" +
    "\uff97\042\uff97\043\uff97\044\uff97\047\uff97\001\002\000\010" +
    "\031\101\040\uffa5\043\077\001\002\000\034\004\042\010" +
    "\071\011\044\012\062\015\054\020\060\021\047\032\037" +
    "\033\061\037\063\045\070\065\036\072\065\001\002\000" +
    "\004\040\130\001\002\000\034\004\042\010\071\011\044" +
    "\012\062\015\054\020\060\021\047\032\037\033\061\037" +
    "\063\045\070\065\036\072\065\001\002\000\024\030\103" +
    "\031\uffbe\034\uffbe\036\uffbe\040\uffbe\042\uffbe\043\uffbe\044" +
    "\uffbe\047\uffbe\001\002\000\034\004\042\010\071\011\044" +
    "\012\062\015\054\020\060\021\047\032\037\033\061\037" +
    "\063\045\070\065\036\072\065\001\002\000\030\026\106" +
    "\027\107\030\uffbc\031\uffbc\034\uffbc\036\uffbc\040\uffbc\042" +
    "\uffbc\043\uffbc\044\uffbc\047\uffbc\001\002\000\034\004\042" +
    "\010\071\011\044\012\062\015\054\020\060\021\047\032" +
    "\037\033\061\037\063\045\070\065\036\072\065\001\002" +
    "\000\034\004\uffa4\010\uffa4\011\uffa4\012\uffa4\015\uffa4\020" +
    "\uffa4\021\uffa4\032\uffa4\033\uffa4\037\uffa4\045\uffa4\065\uffa4" +
    "\072\uffa4\001\002\000\034\004\uffa3\010\uffa3\011\uffa3\012" +
    "\uffa3\015\uffa3\020\uffa3\021\uffa3\032\uffa3\033\uffa3\037\uffa3" +
    "\045\uffa3\065\uffa3\072\uffa3\001\002\000\040\022\115\023" +
    "\114\024\112\025\111\026\uffba\027\uffba\030\uffba\031\uffba" +
    "\034\uffba\036\uffba\040\uffba\042\uffba\043\uffba\044\uffba\047" +
    "\uffba\001\002\000\032\004\uffa0\010\uffa0\011\uffa0\012\uffa0" +
    "\015\uffa0\020\uffa0\021\uffa0\032\uffa0\033\uffa0\037\uffa0\045" +
    "\uffa0\065\uffa0\001\002\000\032\004\uff9f\010\uff9f\011\uff9f" +
    "\012\uff9f\015\uff9f\020\uff9f\021\uff9f\032\uff9f\033\uff9f\037" +
    "\uff9f\045\uff9f\065\uff9f\001\002\000\032\004\042\010\071" +
    "\011\044\012\062\015\054\020\060\021\047\032\037\033" +
    "\061\037\063\045\070\065\036\001\002\000\032\004\uffa2" +
    "\010\uffa2\011\uffa2\012\uffa2\015\uffa2\020\uffa2\021\uffa2\032" +
    "\uffa2\033\uffa2\037\uffa2\045\uffa2\065\uffa2\001\002\000\032" +
    "\004\uffa1\010\uffa1\011\uffa1\012\uffa1\015\uffa1\020\uffa1\021" +
    "\uffa1\032\uffa1\033\uffa1\037\uffa1\045\uffa1\065\uffa1\001\002" +
    "\000\044\013\117\014\121\022\uffb8\023\uffb8\024\uffb8\025" +
    "\uffb8\026\uffb8\027\uffb8\030\uffb8\031\uffb8\034\uffb8\036\uffb8" +
    "\040\uffb8\042\uffb8\043\uffb8\044\uffb8\047\uffb8\001\002\000" +
    "\032\004\uff9e\010\uff9e\011\uff9e\012\uff9e\015\uff9e\020\uff9e" +
    "\021\uff9e\032\uff9e\033\uff9e\037\uff9e\045\uff9e\065\uff9e\001" +
    "\002\000\032\004\042\010\071\011\044\012\062\015\054" +
    "\020\060\021\047\032\037\033\061\037\063\045\070\065" +
    "\036\001\002\000\032\004\uff9d\010\uff9d\011\uff9d\012\uff9d" +
    "\015\uff9d\020\uff9d\021\uff9d\032\uff9d\033\uff9d\037\uff9d\045" +
    "\uff9d\065\uff9d\001\002\000\052\013\uffb5\014\uffb5\015\126" +
    "\016\125\017\124\022\uffb5\023\uffb5\024\uffb5\025\uffb5\026" +
    "\uffb5\027\uffb5\030\uffb5\031\uffb5\034\uffb5\036\uffb5\040\uffb5" +
    "\042\uffb5\043\uffb5\044\uffb5\047\uffb5\001\002\000\032\004" +
    "\042\010\071\011\044\012\062\015\054\020\060\021\047" +
    "\032\037\033\061\037\063\045\070\065\036\001\002\000" +
    "\032\004\uff9a\010\uff9a\011\uff9a\012\uff9a\015\uff9a\020\uff9a" +
    "\021\uff9a\032\uff9a\033\uff9a\037\uff9a\045\uff9a\065\uff9a\001" +
    "\002\000\032\004\uff9b\010\uff9b\011\uff9b\012\uff9b\015\uff9b" +
    "\020\uff9b\021\uff9b\032\uff9b\033\uff9b\037\uff9b\045\uff9b\065" +
    "\uff9b\001\002\000\032\004\uff9c\010\uff9c\011\uff9c\012\uff9c" +
    "\015\uff9c\020\uff9c\021\uff9c\032\uff9c\033\uff9c\037\uff9c\045" +
    "\uff9c\065\uff9c\001\002\000\052\013\uffb3\014\uffb3\015\uffb3" +
    "\016\uffb3\017\uffb3\022\uffb3\023\uffb3\024\uffb3\025\uffb3\026" +
    "\uffb3\027\uffb3\030\uffb3\031\uffb3\034\uffb3\036\uffb3\040\uffb3" +
    "\042\uffb3\043\uffb3\044\uffb3\047\uffb3\001\002\000\052\013" +
    "\uffa7\014\uffa7\015\uffa7\016\uffa7\017\uffa7\022\uffa7\023\uffa7" +
    "\024\uffa7\025\uffa7\026\uffa7\027\uffa7\030\uffa7\031\uffa7\034" +
    "\uffa7\036\uffa7\040\uffa7\042\uffa7\043\uffa7\044\uffa7\047\uffa7" +
    "\001\002\000\010\031\101\040\uffa5\043\077\001\002\000" +
    "\004\040\uffa6\001\002\000\006\031\101\034\134\001\002" +
    "\000\056\013\uff8e\014\uff8e\015\uff8e\016\uff8e\017\uff8e\022" +
    "\uff8e\023\uff8e\024\uff8e\025\uff8e\026\uff8e\027\uff8e\030\uff8e" +
    "\031\uff8e\034\uff8e\035\uff8e\036\uff8e\040\uff8e\042\uff8e\043" +
    "\uff8e\044\uff8e\046\uff8e\047\uff8e\001\002\000\004\044\136" +
    "\001\002\000\100\004\ufff9\005\ufff9\006\ufff9\007\ufff9\010" +
    "\ufff9\011\ufff9\012\ufff9\015\ufff9\020\ufff9\021\ufff9\032\ufff9" +
    "\033\ufff9\037\ufff9\040\ufff9\045\ufff9\050\ufff9\051\ufff9\052" +
    "\ufff9\053\ufff9\055\ufff9\056\ufff9\057\ufff9\061\ufff9\063\ufff9" +
    "\064\ufff9\065\ufff9\066\ufff9\067\ufff9\070\ufff9\071\ufff9\072" +
    "\ufff9\001\002\000\056\013\uff8b\014\uff8b\015\uff8b\016\uff8b" +
    "\017\uff8b\022\uff8b\023\uff8b\024\uff8b\025\uff8b\026\uff8b\027" +
    "\uff8b\030\uff8b\031\uff8b\034\uff8b\035\uff8b\036\uff8b\040\uff8b" +
    "\042\uff8b\043\uff8b\044\uff8b\046\uff8b\047\uff8b\001\002\000" +
    "\034\004\042\010\071\011\044\012\062\015\054\020\060" +
    "\021\047\032\037\033\061\037\063\045\070\065\036\072" +
    "\065\001\002\000\004\004\142\001\002\000\056\013\uff8f" +
    "\014\uff8f\015\uff8f\016\uff8f\017\uff8f\022\uff8f\023\uff8f\024" +
    "\uff8f\025\uff8f\026\uff8f\027\uff8f\030\uff8f\031\uff8f\034\uff8f" +
    "\035\uff8f\036\uff8f\040\uff8f\042\uff8f\043\uff8f\044\uff8f\046" +
    "\uff8f\047\uff8f\001\002\000\006\031\101\036\144\001\002" +
    "\000\056\013\uff90\014\uff90\015\uff90\016\uff90\017\uff90\022" +
    "\uff90\023\uff90\024\uff90\025\uff90\026\uff90\027\uff90\030\uff90" +
    "\031\uff90\034\uff90\035\uff90\036\uff90\040\uff90\042\uff90\043" +
    "\uff90\044\uff90\046\uff90\047\uff90\001\002\000\036\004\042" +
    "\010\071\011\044\012\062\015\054\020\060\021\047\032" +
    "\037\033\061\034\uffd8\037\063\045\070\065\036\072\065" +
    "\001\002\000\004\034\uffd9\001\002\000\004\034\153\001" +
    "\002\000\010\031\101\034\uffd6\043\151\001\002\000\036" +
    "\004\042\010\071\011\044\012\062\015\054\020\060\021" +
    "\047\032\037\033\061\034\uffd8\037\063\045\070\065\036" +
    "\072\065\001\002\000\004\034\uffd7\001\002\000\052\013" +
    "\uffda\014\uffda\015\uffda\016\uffda\017\uffda\022\uffda\023\uffda" +
    "\024\uffda\025\uffda\026\uffda\027\uffda\030\uffda\031\uffda\034" +
    "\uffda\036\uffda\040\uffda\042\uffda\043\uffda\044\uffda\047\uffda" +
    "\001\002\000\052\013\uffb1\014\uffb1\015\uffb1\016\uffb1\017" +
    "\uffb1\022\uffb1\023\uffb1\024\uffb1\025\uffb1\026\uffb1\027\uffb1" +
    "\030\uffb1\031\uffb1\034\uffb1\036\uffb1\040\uffb1\042\uffb1\043" +
    "\uffb1\044\uffb1\047\uffb1\001\002\000\004\034\156\001\002" +
    "\000\052\013\uffde\014\uffde\015\uffde\016\uffde\017\uffde\022" +
    "\uffde\023\uffde\024\uffde\025\uffde\026\uffde\027\uffde\030\uffde" +
    "\031\uffde\034\uffde\036\uffde\040\uffde\042\uffde\043\uffde\044" +
    "\uffde\047\uffde\001\002\000\010\042\161\043\032\044\ufff6" +
    "\001\002\000\004\044\ufff8\001\002\000\034\004\042\010" +
    "\071\011\044\012\062\015\054\020\060\021\047\032\037" +
    "\033\061\037\063\045\070\065\036\072\065\001\002\000" +
    "\010\031\101\043\032\044\ufff6\001\002\000\004\044\ufff7" +
    "\001\002\000\004\002\ufffe\001\002\000\014\004\026\005" +
    "\016\006\012\007\015\071\020\001\002\000\006\015\031" +
    "\022\167\001\002\000\004\035\170\001\002\000\034\004" +
    "\042\010\071\011\044\012\062\015\054\020\060\021\047" +
    "\032\037\033\061\037\063\045\070\065\036\072\065\001" +
    "\002\000\006\031\101\036\172\001\002\000\046\004\uff92" +
    "\015\uff92\022\uff92\023\uff92\024\uff92\025\uff92\026\uff92\027" +
    "\uff92\030\uff92\031\uff92\034\uff92\036\uff92\037\uff92\040\uff92" +
    "\042\uff92\043\uff92\044\uff92\047\uff92\001\002\000\004\042" +
    "\174\001\002\000\014\004\026\005\016\006\012\007\015" +
    "\071\020\001\002\000\006\015\031\044\176\001\002\000" +
    "\024\004\ufff0\005\ufff0\006\ufff0\007\ufff0\055\ufff0\066\ufff0" +
    "\067\ufff0\070\ufff0\071\ufff0\001\002\000\004\002\000\001" +
    "\002\000\006\004\203\034\uffed\001\002\000\004\034\uffee" +
    "\001\002\000\004\034\213\001\002\000\004\047\207\001" +
    "\002\000\006\034\uffeb\043\205\001\002\000\004\004\203" +
    "\001\002\000\004\034\uffec\001\002\000\016\004\026\005" +
    "\016\006\012\007\015\045\210\071\020\001\002\000\014" +
    "\004\026\005\016\006\012\007\015\071\020\001\002\000" +
    "\010\015\031\034\uffea\043\uffea\001\002\000\010\015\031" +
    "\034\uffe9\043\uffe9\001\002\000\004\041\214\001\002\000" +
    "\014\004\026\005\016\006\012\007\015\071\020\001\002" +
    "\000\006\015\031\037\217\001\002\000\024\004\uffef\005" +
    "\uffef\006\uffef\007\uffef\055\uffef\066\uffef\067\uffef\070\uffef" +
    "\071\uffef\001\002\000\046\004\241\005\016\006\012\007" +
    "\015\015\054\033\061\037\217\040\uffe5\045\070\050\242" +
    "\051\225\052\224\053\232\056\237\057\231\063\234\064" +
    "\220\071\020\001\002\000\004\033\361\001\002\000\050" +
    "\004\uffd3\005\uffd3\006\uffd3\007\uffd3\015\uffd3\033\uffd3\037" +
    "\uffd3\040\uffd3\045\uffd3\050\uffd3\051\uffd3\052\uffd3\053\uffd3" +
    "\056\uffd3\057\uffd3\061\uffd3\063\uffd3\064\uffd3\071\uffd3\001" +
    "\002\000\050\004\uffd4\005\uffd4\006\uffd4\007\uffd4\015\uffd4" +
    "\033\uffd4\037\uffd4\040\uffd4\045\uffd4\050\uffd4\051\uffd4\052" +
    "\uffd4\053\uffd4\056\uffd4\057\uffd4\061\uffd4\063\uffd4\064\uffd4" +
    "\071\uffd4\001\002\000\050\004\uffd2\005\uffd2\006\uffd2\007" +
    "\uffd2\015\uffd2\033\uffd2\037\uffd2\040\uffd2\045\uffd2\050\uffd2" +
    "\051\uffd2\052\uffd2\053\uffd2\056\uffd2\057\uffd2\061\uffd2\063" +
    "\uffd2\064\uffd2\071\uffd2\001\002\000\004\033\355\001\002" +
    "\000\004\033\344\001\002\000\050\004\uffcc\005\uffcc\006" +
    "\uffcc\007\uffcc\015\uffcc\033\uffcc\037\uffcc\040\uffcc\045\uffcc" +
    "\050\uffcc\051\uffcc\052\uffcc\053\uffcc\056\uffcc\057\uffcc\061" +
    "\uffcc\063\uffcc\064\uffcc\071\uffcc\001\002\000\050\004\uffe2" +
    "\005\uffe2\006\uffe2\007\uffe2\015\uffe2\033\uffe2\037\uffe2\040" +
    "\uffe2\045\uffe2\050\uffe2\051\uffe2\052\uffe2\053\uffe2\056\uffe2" +
    "\057\uffe2\061\uffe2\063\uffe2\064\uffe2\071\uffe2\001\002\000" +
    "\050\004\uffc8\005\uffc8\006\uffc8\007\uffc8\015\uffc8\033\uffc8" +
    "\037\uffc8\040\uffc8\045\uffc8\050\uffc8\051\uffc8\052\uffc8\053" +
    "\uffc8\056\uffc8\057\uffc8\061\uffc8\063\uffc8\064\uffc8\071\uffc8" +
    "\001\002\000\004\033\321\001\002\000\004\033\313\001" +
    "\002\000\050\004\uffe3\005\uffe3\006\uffe3\007\uffe3\015\uffe3" +
    "\033\uffe3\037\uffe3\040\uffe3\045\uffe3\050\uffe3\051\uffe3\052" +
    "\uffe3\053\uffe3\056\uffe3\057\uffe3\061\uffe3\063\uffe3\064\uffe3" +
    "\071\uffe3\001\002\000\036\004\042\010\071\011\044\012" +
    "\062\015\054\020\060\021\047\032\037\033\061\037\063" +
    "\044\310\045\070\065\036\072\065\001\002\000\050\004" +
    "\uffcd\005\uffcd\006\uffcd\007\uffcd\015\uffcd\033\uffcd\037\uffcd" +
    "\040\uffcd\045\uffcd\050\uffcd\051\uffcd\052\uffcd\053\uffcd\056" +
    "\uffcd\057\uffcd\061\uffcd\063\uffcd\064\uffcd\071\uffcd\001\002" +
    "\000\050\004\uffce\005\uffce\006\uffce\007\uffce\015\uffce\033" +
    "\uffce\037\uffce\040\uffce\045\uffce\050\uffce\051\uffce\052\uffce" +
    "\053\uffce\056\uffce\057\uffce\061\uffce\063\uffce\064\uffce\071" +
    "\uffce\001\002\000\004\033\267\001\002\000\050\004\uffe4" +
    "\005\uffe4\006\uffe4\007\uffe4\015\uffe4\033\uffe4\037\uffe4\040" +
    "\uffe4\045\uffe4\050\uffe4\051\uffe4\052\uffe4\053\uffe4\056\uffe4" +
    "\057\uffe4\061\uffe4\063\uffe4\064\uffe4\071\uffe4\001\002\000" +
    "\016\004\uff93\015\uff93\033\145\035\uff8c\042\uff8c\046\uff8c" +
    "\001\002\000\004\033\263\001\002\000\010\035\140\042" +
    "\260\046\141\001\002\000\004\040\257\001\002\000\050" +
    "\004\241\005\016\006\012\007\015\015\054\033\061\037" +
    "\217\040\uffe5\045\070\050\242\051\225\052\224\053\232" +
    "\056\237\057\231\061\uffe5\063\234\064\220\071\020\001" +
    "\002\000\050\004\uffc7\005\uffc7\006\uffc7\007\uffc7\015\uffc7" +
    "\033\uffc7\037\uffc7\040\uffc7\045\uffc7\050\uffc7\051\uffc7\052" +
    "\uffc7\053\uffc7\056\uffc7\057\uffc7\061\uffc7\063\uffc7\064\uffc7" +
    "\071\uffc7\001\002\000\050\004\uffe1\005\uffe1\006\uffe1\007" +
    "\uffe1\015\uffe1\033\uffe1\037\uffe1\040\uffe1\045\uffe1\050\uffe1" +
    "\051\uffe1\052\uffe1\053\uffe1\056\uffe1\057\uffe1\061\uffe1\063" +
    "\uffe1\064\uffe1\071\uffe1\001\002\000\050\004\uffe0\005\uffe0" +
    "\006\uffe0\007\uffe0\015\uffe0\033\uffe0\037\uffe0\040\uffe0\045" +
    "\uffe0\050\uffe0\051\uffe0\052\uffe0\053\uffe0\056\uffe0\057\uffe0" +
    "\061\uffe0\063\uffe0\064\uffe0\071\uffe0\001\002\000\004\044" +
    "\255\001\002\000\050\004\uffd5\005\uffd5\006\uffd5\007\uffd5" +
    "\015\uffd5\033\uffd5\037\uffd5\040\uffd5\045\uffd5\050\uffd5\051" +
    "\uffd5\052\uffd5\053\uffd5\056\uffd5\057\uffd5\061\uffd5\063\uffd5" +
    "\064\uffd5\071\uffd5\001\002\000\050\004\241\005\016\006" +
    "\012\007\015\015\054\033\061\037\217\040\uffe5\045\070" +
    "\050\242\051\225\052\224\053\232\056\237\057\231\061" +
    "\uffe5\063\234\064\220\071\020\001\002\000\006\040\uffe7" +
    "\061\uffe7\001\002\000\050\004\uffdb\005\uffdb\006\uffdb\007" +
    "\uffdb\015\uffdb\033\uffdb\037\uffdb\040\uffdb\045\uffdb\050\uffdb" +
    "\051\uffdb\052\uffdb\053\uffdb\056\uffdb\057\uffdb\061\uffdb\063" +
    "\uffdb\064\uffdb\071\uffdb\001\002\000\006\040\uffe6\061\uffe6" +
    "\001\002\000\064\002\uffd1\004\uffd1\005\uffd1\006\uffd1\007" +
    "\uffd1\015\uffd1\033\uffd1\037\uffd1\040\uffd1\045\uffd1\050\uffd1" +
    "\051\uffd1\052\uffd1\053\uffd1\054\uffd1\055\uffd1\056\uffd1\057" +
    "\uffd1\061\uffd1\063\uffd1\064\uffd1\066\uffd1\067\uffd1\070\uffd1" +
    "\071\uffd1\001\002\000\034\004\042\010\071\011\044\012" +
    "\062\015\054\020\060\021\047\032\037\033\061\037\063" +
    "\045\070\065\036\072\065\001\002\000\006\031\101\044" +
    "\262\001\002\000\050\004\ufff5\005\ufff5\006\ufff5\007\ufff5" +
    "\015\ufff5\033\ufff5\037\ufff5\040\ufff5\045\ufff5\050\ufff5\051" +
    "\ufff5\052\ufff5\053\ufff5\056\ufff5\057\ufff5\061\ufff5\063\ufff5" +
    "\064\ufff5\071\ufff5\001\002\000\034\004\042\010\071\011" +
    "\044\012\062\015\054\020\060\021\047\032\037\033\061" +
    "\037\063\045\070\065\036\072\065\001\002\000\006\031" +
    "\101\034\265\001\002\000\004\037\217\001\002\000\050" +
    "\004\uffcb\005\uffcb\006\uffcb\007\uffcb\015\uffcb\033\uffcb\037" +
    "\uffcb\040\uffcb\045\uffcb\050\uffcb\051\uffcb\052\uffcb\053\uffcb" +
    "\056\uffcb\057\uffcb\061\uffcb\063\uffcb\064\uffcb\071\uffcb\001" +
    "\002\000\004\004\270\001\002\000\004\034\271\001\002" +
    "\000\004\037\272\001\002\000\006\060\274\062\uffc4\001" +
    "\002\000\004\062\303\001\002\000\034\004\042\010\071" +
    "\011\044\012\062\015\054\020\060\021\047\032\037\033" +
    "\061\037\063\045\070\065\036\072\065\001\002\000\006" +
    "\031\101\047\276\001\002\000\046\004\241\005\016\006" +
    "\012\007\015\015\054\033\061\037\217\045\070\050\242" +
    "\051\225\052\224\053\232\056\237\057\231\061\uffe5\063" +
    "\234\064\220\071\020\001\002\000\004\061\300\001\002" +
    "\000\004\044\301\001\002\000\006\060\274\062\uffc4\001" +
    "\002\000\004\062\uffc5\001\002\000\004\047\306\001\002" +
    "\000\004\040\305\001\002\000\050\004\uffc6\005\uffc6\006" +
    "\uffc6\007\uffc6\015\uffc6\033\uffc6\037\uffc6\040\uffc6\045\uffc6" +
    "\050\uffc6\051\uffc6\052\uffc6\053\uffc6\056\uffc6\057\uffc6\061" +
    "\uffc6\063\uffc6\064\uffc6\071\uffc6\001\002\000\046\004\241" +
    "\005\016\006\012\007\015\015\054\033\061\037\217\040" +
    "\uffe5\045\070\050\242\051\225\052\224\053\232\056\237" +
    "\057\231\063\234\064\220\071\020\001\002\000\004\040" +
    "\uffc3\001\002\000\050\004\uffdc\005\uffdc\006\uffdc\007\uffdc" +
    "\015\uffdc\033\uffdc\037\uffdc\040\uffdc\045\uffdc\050\uffdc\051" +
    "\uffdc\052\uffdc\053\uffdc\056\uffdc\057\uffdc\061\uffdc\063\uffdc" +
    "\064\uffdc\071\uffdc\001\002\000\006\031\101\044\312\001" +
    "\002\000\050\004\uffdd\005\uffdd\006\uffdd\007\uffdd\015\uffdd" +
    "\033\uffdd\037\uffdd\040\uffdd\045\uffdd\050\uffdd\051\uffdd\052" +
    "\uffdd\053\uffdd\056\uffdd\057\uffdd\061\uffdd\063\uffdd\064\uffdd" +
    "\071\uffdd\001\002\000\034\004\042\010\071\011\044\012" +
    "\062\015\054\020\060\021\047\032\037\033\061\037\063" +
    "\045\070\065\036\072\065\001\002\000\006\031\101\034" +
    "\315\001\002\000\004\037\217\001\002\000\052\004\uffd0" +
    "\005\uffd0\006\uffd0\007\uffd0\015\uffd0\033\uffd0\037\uffd0\040" +
    "\uffd0\045\uffd0\050\uffd0\051\uffd0\052\uffd0\053\uffd0\054\317" +
    "\056\uffd0\057\uffd0\061\uffd0\063\uffd0\064\uffd0\071\uffd0\001" +
    "\002\000\004\037\217\001\002\000\050\004\uffcf\005\uffcf" +
    "\006\uffcf\007\uffcf\015\uffcf\033\uffcf\037\uffcf\040\uffcf\045" +
    "\uffcf\050\uffcf\051\uffcf\052\uffcf\053\uffcf\056\uffcf\057\uffcf" +
    "\061\uffcf\063\uffcf\064\uffcf\071\uffcf\001\002\000\004\004" +
    "\322\001\002\000\004\034\323\001\002\000\004\037\324" +
    "\001\002\000\006\060\326\062\uffc0\001\002\000\004\062" +
    "\336\001\002\000\034\004\042\010\071\011\044\012\062" +
    "\015\054\020\060\021\047\032\037\033\061\037\063\045" +
    "\070\065\036\072\065\001\002\000\006\031\101\042\330" +
    "\001\002\000\034\004\042\010\071\011\044\012\062\015" +
    "\054\020\060\021\047\032\037\033\061\037\063\045\070" +
    "\065\036\072\065\001\002\000\006\031\101\044\332\001" +
    "\002\000\004\061\333\001\002\000\004\044\334\001\002" +
    "\000\006\060\326\062\uffc0\001\002\000\004\062\uffc1\001" +
    "\002\000\004\042\341\001\002\000\004\040\340\001\002" +
    "\000\050\004\uffc2\005\uffc2\006\uffc2\007\uffc2\015\uffc2\033" +
    "\uffc2\037\uffc2\040\uffc2\045\uffc2\050\uffc2\051\uffc2\052\uffc2" +
    "\053\uffc2\056\uffc2\057\uffc2\061\uffc2\063\uffc2\064\uffc2\071" +
    "\uffc2\001\002\000\034\004\042\010\071\011\044\012\062" +
    "\015\054\020\060\021\047\032\037\033\061\037\063\045" +
    "\070\065\036\072\065\001\002\000\006\031\101\044\343" +
    "\001\002\000\004\040\uffbf\001\002\000\014\004\026\005" +
    "\016\006\012\007\015\071\020\001\002\000\034\004\042" +
    "\010\071\011\044\012\062\015\054\020\060\021\047\032" +
    "\037\033\061\037\063\045\070\065\036\072\065\001\002" +
    "\000\006\031\101\044\347\001\002\000\012\004\073\015" +
    "\054\033\061\045\070\001\002\000\010\035\140\042\351" +
    "\046\141\001\002\000\034\004\042\010\071\011\044\012" +
    "\062\015\054\020\060\021\047\032\037\033\061\037\063" +
    "\045\070\065\036\072\065\001\002\000\006\031\101\034" +
    "\353\001\002\000\004\037\217\001\002\000\050\004\uffca" +
    "\005\uffca\006\uffca\007\uffca\015\uffca\033\uffca\037\uffca\040" +
    "\uffca\045\uffca\050\uffca\051\uffca\052\uffca\053\uffca\056\uffca" +
    "\057\uffca\061\uffca\063\uffca\064\uffca\071\uffca\001\002\000" +
    "\034\004\042\010\071\011\044\012\062\015\054\020\060" +
    "\021\047\032\037\033\061\037\063\045\070\065\036\072" +
    "\065\001\002\000\006\031\101\034\357\001\002\000\004" +
    "\037\217\001\002\000\050\004\uffc9\005\uffc9\006\uffc9\007" +
    "\uffc9\015\uffc9\033\uffc9\037\uffc9\040\uffc9\045\uffc9\050\uffc9" +
    "\051\uffc9\052\uffc9\053\uffc9\056\uffc9\057\uffc9\061\uffc9\063" +
    "\uffc9\064\uffc9\071\uffc9\001\002\000\034\004\042\010\071" +
    "\011\044\012\062\015\054\020\060\021\047\032\037\033" +
    "\061\037\063\045\070\065\036\072\065\001\002\000\006" +
    "\031\101\034\363\001\002\000\004\044\364\001\002\000" +
    "\050\004\uffdf\005\uffdf\006\uffdf\007\uffdf\015\uffdf\033\uffdf" +
    "\037\uffdf\040\uffdf\045\uffdf\050\uffdf\051\uffdf\052\uffdf\053" +
    "\uffdf\056\uffdf\057\uffdf\061\uffdf\063\uffdf\064\uffdf\071\uffdf" +
    "\001\002\000\004\037\366\001\002\000\014\004\026\005" +
    "\016\006\012\007\015\071\020\001\002\000\004\040\372" +
    "\001\002\000\016\004\026\005\016\006\012\007\015\040" +
    "\ufff1\071\020\001\002\000\004\040\ufff2\001\002\000\004" +
    "\044\373\001\002\000\024\004\ufff3\005\ufff3\006\ufff3\007" +
    "\ufff3\055\ufff3\066\ufff3\067\ufff3\070\ufff3\071\ufff3\001\002" +
    "\000\004\034\375\001\002\000\004\041\376\001\002\000" +
    "\014\004\026\005\016\006\012\007\015\071\020\001\002" +
    "\000\006\015\031\037\217\001\002\000\004\002\uffe8\001" +
    "\002\000\004\002\001\001\002\000\004\002\uffff\001\002" +
    "\000\004\002\ufffd\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0101\000\022\002\013\003\004\004\021\026\020\027" +
    "\005\042\022\044\003\050\006\001\001\000\022\002\u0102" +
    "\003\004\004\021\026\020\027\005\042\022\044\003\050" +
    "\006\001\001\000\022\002\u0101\003\004\004\021\026\020" +
    "\027\005\042\022\044\003\050\006\001\001\000\002\001" +
    "\001\000\022\002\u0100\003\004\004\021\026\020\027\005" +
    "\042\022\044\003\050\006\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\002\163\003\004\004\021" +
    "\026\020\027\005\042\022\044\003\050\006\001\001\000" +
    "\002\001\001\000\022\002\026\003\004\004\021\026\020" +
    "\027\005\042\022\044\003\050\006\001\001\000\006\004" +
    "\021\050\024\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\070\033\001\001\000\002\001" +
    "\001\000\002\001\001\000\040\005\056\006\055\007\054" +
    "\010\052\011\051\012\047\013\044\014\040\015\037\023" +
    "\066\024\050\025\063\045\042\054\065\067\045\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\013\153\014\040\015\037\023\066\024\050\025\063" +
    "\045\042\054\065\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\022\122\001\001\000\002\001\001\000\004\021\117" +
    "\001\001\000\004\020\112\001\001\000\004\025\136\001" +
    "\001\000\004\017\104\001\001\000\002\001\001\000\004" +
    "\070\134\001\001\000\002\001\001\000\040\005\132\006" +
    "\055\007\054\010\052\011\051\012\047\013\044\014\040" +
    "\015\037\023\066\024\050\025\063\045\042\054\065\067" +
    "\045\001\001\000\002\001\001\000\040\005\075\006\055" +
    "\007\054\010\052\011\051\012\047\013\044\014\040\015" +
    "\037\023\066\024\050\025\063\045\042\054\065\067\045" +
    "\001\001\000\002\001\001\000\004\004\074\001\001\000" +
    "\002\001\001\000\020\014\073\015\037\023\066\024\050" +
    "\025\063\045\042\054\065\001\001\000\004\025\071\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\016\077\001" +
    "\001\000\040\005\130\006\055\007\054\010\052\011\051" +
    "\012\047\013\044\014\040\015\037\023\066\024\050\025" +
    "\063\045\042\054\065\067\045\001\001\000\002\001\001" +
    "\000\036\006\101\007\054\010\052\011\051\012\047\013" +
    "\044\014\040\015\037\023\066\024\050\025\063\045\042" +
    "\054\065\067\045\001\001\000\002\001\001\000\034\007" +
    "\103\010\052\011\051\012\047\013\044\014\040\015\037" +
    "\023\066\024\050\025\063\045\042\054\065\067\045\001" +
    "\001\000\004\017\104\001\001\000\032\010\107\011\051" +
    "\012\047\013\044\014\040\015\037\023\066\024\050\025" +
    "\063\045\042\054\065\067\045\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\020\112\001\001\000\002\001" +
    "\001\000\002\001\001\000\026\011\115\012\047\013\044" +
    "\014\040\015\037\023\066\024\050\025\063\045\042\054" +
    "\065\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\021\117\001\001\000\002\001\001\000\024\012\121\013" +
    "\044\014\040\015\037\023\066\024\050\025\063\045\042" +
    "\054\065\001\001\000\002\001\001\000\004\022\122\001" +
    "\001\000\022\013\126\014\040\015\037\023\066\024\050" +
    "\025\063\045\042\054\065\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\016\131\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\040\005\142\006\055\007" +
    "\054\010\052\011\051\012\047\013\044\014\040\015\037" +
    "\023\066\024\050\025\063\045\042\054\065\067\045\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\044\005\147\006\055\007\054\010" +
    "\052\011\051\012\047\013\044\014\040\015\037\023\066" +
    "\024\050\025\063\045\042\046\146\054\065\066\145\067" +
    "\045\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\044\005\147\006\055\007\054\010\052\011" +
    "\051\012\047\013\044\014\040\015\037\023\066\024\050" +
    "\025\063\045\042\046\151\054\065\066\145\067\045\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\070\157\001" +
    "\001\000\002\001\001\000\040\005\161\006\055\007\054" +
    "\010\052\011\051\012\047\013\044\014\040\015\037\023" +
    "\066\024\050\025\063\045\042\054\065\067\045\001\001" +
    "\000\004\070\162\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\004\165\001\001\000\002\001\001\000\002" +
    "\001\001\000\040\005\170\006\055\007\054\010\052\011" +
    "\051\012\047\013\044\014\040\015\037\023\066\024\050" +
    "\025\063\045\042\054\065\067\045\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\004\174" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\043\201\064\203\065\200\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\064\203\065\205\001\001\000\002\001\001" +
    "\000\004\004\210\001\001\000\004\004\211\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\004\214\001\001\000\004\061\215\001\001\000\002\001" +
    "\001\000\054\004\021\024\242\025\063\030\252\031\244" +
    "\032\235\033\234\034\225\035\245\036\227\041\232\045" +
    "\250\050\237\051\243\052\246\053\226\055\247\056\221" +
    "\057\220\060\222\061\251\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\040\005\310\006\055\007\054\010" +
    "\052\011\051\012\047\013\044\014\040\015\037\023\066" +
    "\024\050\025\063\045\042\054\065\067\045\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\054\004\021\024\242\025\063" +
    "\030\252\031\244\032\235\033\234\034\225\035\245\036" +
    "\227\041\232\045\250\050\237\051\255\052\246\053\226" +
    "\055\247\056\221\057\220\060\222\061\251\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\054\004\021\024\242\025" +
    "\063\030\252\031\244\032\235\033\234\034\225\035\245" +
    "\036\227\041\232\045\250\050\237\051\253\052\246\053" +
    "\226\055\247\056\221\057\220\060\222\061\251\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\040\005\260\006\055\007\054\010\052" +
    "\011\051\012\047\013\044\014\040\015\037\023\066\024" +
    "\050\025\063\045\042\054\065\067\045\001\001\000\002" +
    "\001\001\000\002\001\001\000\040\005\263\006\055\007" +
    "\054\010\052\011\051\012\047\013\044\014\040\015\037" +
    "\023\066\024\050\025\063\045\042\054\065\067\045\001" +
    "\001\000\002\001\001\000\004\061\265\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\037\272\001\001\000\004\062\303\001\001" +
    "\000\040\005\274\006\055\007\054\010\052\011\051\012" +
    "\047\013\044\014\040\015\037\023\066\024\050\025\063" +
    "\045\042\054\065\067\045\001\001\000\002\001\001\000" +
    "\054\004\021\024\242\025\063\030\252\031\244\032\235" +
    "\033\234\034\225\035\245\036\227\041\232\045\250\050" +
    "\237\051\276\052\246\053\226\055\247\056\221\057\220" +
    "\060\222\061\251\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\037\301\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\054\004" +
    "\021\024\242\025\063\030\252\031\244\032\235\033\234" +
    "\034\225\035\245\036\227\041\232\045\250\050\237\051" +
    "\306\052\246\053\226\055\247\056\221\057\220\060\222" +
    "\061\251\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\040\005\313\006\055" +
    "\007\054\010\052\011\051\012\047\013\044\014\040\015" +
    "\037\023\066\024\050\025\063\045\042\054\065\067\045" +
    "\001\001\000\002\001\001\000\004\061\315\001\001\000" +
    "\002\001\001\000\004\061\317\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\040\324\001\001\000\004\063\336\001\001\000\040" +
    "\005\326\006\055\007\054\010\052\011\051\012\047\013" +
    "\044\014\040\015\037\023\066\024\050\025\063\045\042" +
    "\054\065\067\045\001\001\000\002\001\001\000\040\005" +
    "\330\006\055\007\054\010\052\011\051\012\047\013\044" +
    "\014\040\015\037\023\066\024\050\025\063\045\042\054" +
    "\065\067\045\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\040\334\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\040\005\341\006\055\007\054\010\052\011\051\012" +
    "\047\013\044\014\040\015\037\023\066\024\050\025\063" +
    "\045\042\054\065\067\045\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\004\021\050\344\001\001\000\040" +
    "\005\345\006\055\007\054\010\052\011\051\012\047\013" +
    "\044\014\040\015\037\023\066\024\050\025\063\045\042" +
    "\054\065\067\045\001\001\000\002\001\001\000\006\024" +
    "\347\025\063\001\001\000\002\001\001\000\040\005\351" +
    "\006\055\007\054\010\052\011\051\012\047\013\044\014" +
    "\040\015\037\023\066\024\050\025\063\045\042\054\065" +
    "\067\045\001\001\000\002\001\001\000\004\061\353\001" +
    "\001\000\002\001\001\000\040\005\355\006\055\007\054" +
    "\010\052\011\051\012\047\013\044\014\040\015\037\023" +
    "\066\024\050\025\063\045\042\054\065\067\045\001\001" +
    "\000\002\001\001\000\004\061\357\001\001\000\002\001" +
    "\001\000\040\005\361\006\055\007\054\010\052\011\051" +
    "\012\047\013\044\014\040\015\037\023\066\024\050\025" +
    "\063\045\042\054\065\067\045\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\004\021\047\366\050\367\001\001\000\002\001\001" +
    "\000\010\004\021\047\370\050\367\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\004\376\001\001\000\004\061" +
    "\377\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$AnalizadorSintacticoTiny$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$AnalizadorSintacticoTiny$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$AnalizadorSintacticoTiny$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 
   errores = new GestionErroresTiny();
   AnalizadorLexicoTiny alex = (AnalizadorLexicoTiny)getScanner();
   alex.fijaGestionErrores(errores);

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return getScanner().next_token(); 
    }

 
   private GestionErroresTiny errores;
   public void syntax_error(Symbol unidadLexica) {
     errores.errorSintactico((UnidadLexica)unidadLexica);
   }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$AnalizadorSintacticoTiny$actions {
  private final AnalizadorSintacticoTiny parser;

  /** Constructor */
  CUP$AnalizadorSintacticoTiny$actions(AnalizadorSintacticoTiny parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintacticoTiny$do_action_part00000000(
    int                        CUP$AnalizadorSintacticoTiny$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintacticoTiny$parser,
    java.util.Stack            CUP$AnalizadorSintacticoTiny$stack,
    int                        CUP$AnalizadorSintacticoTiny$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$AnalizadorSintacticoTiny$result;

      /* select the action based on the action number */
      switch (CUP$AnalizadorSintacticoTiny$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // S ::= DECLARACION S 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("S",0, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= S EOF 
            {
              Object RESULT =null;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		RESULT = start_val;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("$START",0, RESULT);
            }
          /* ACCEPT */
          CUP$AnalizadorSintacticoTiny$parser.done_parsing();
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // S ::= CONSTVAR S 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("S",0, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // S ::= STRUCTDEC S 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("S",0, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // S ::= ALIAS S 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("S",0, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // S ::= FUNCDEC S 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("S",0, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // S ::= MAINFUNC 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("S",0, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // DECLARACION ::= TYPE IDEN LISTADEC PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("DECLARACION",38, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // DECLARACION ::= TYPE IDEN IGUAL E0 LISTADEC PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("DECLARACION",38, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // LISTADEC ::= COMA IDEN LISTADEC 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("LISTADEC",54, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // LISTADEC ::= COMA IDEN IGUAL E0 LISTADEC 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("LISTADEC",54, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // LISTADEC ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("LISTADEC",54, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // ASIG ::= ACCESO IGUAL E0 PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ASIG",31, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // CONSTVAR ::= CONST DECLARACION 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CONSTVAR",1, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // STRUCTDEC ::= STRUCT IDEN LLAP CAMPOS LLCIERRE PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("STRUCTDEC",20, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // CAMPOS ::= DECLARACION CAMPOS 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CAMPOS",37, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // CAMPOS ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CAMPOS",37, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // ALIAS ::= TYPEDEF IDEN IGUAL TYPE PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ALIAS",34, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // FUNCDEC ::= IDEN PAP PARAMS PCIERRE FLECHA TYPE BINST 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("FUNCDEC",32, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // PARAMS ::= LISTAPARAMS 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("PARAMS",33, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // PARAMS ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("PARAMS",33, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // LISTAPARAMS ::= PARAM COMA LISTAPARAMS 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("LISTAPARAMS",51, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // LISTAPARAMS ::= PARAM 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("LISTAPARAMS",51, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // PARAM ::= IDEN DOSPUNTOS TYPE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("PARAM",50, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // PARAM ::= IDEN DOSPUNTOS AMPERSAND TYPE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("PARAM",50, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // MAINFUNC ::= MAIN PAP PCIERRE FLECHA TYPE BINST 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("MAINFUNC",21, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // LISTAINST ::= INST LISTAINST 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("LISTAINST",39, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // LISTAINST ::= BLOQUE LISTAINST 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("LISTAINST",39, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // LISTAINST ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("LISTAINST",39, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // INST ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INST",22, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // INST ::= ASIG 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INST",22, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // INST ::= SHOWFUNC 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INST",22, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // INST ::= RETURNFUNC 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INST",22, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // INST ::= LLAMADAFUNCAUX 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INST",22, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // SHOWFUNC ::= SHOW PAP E0 PCIERRE PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("SHOWFUNC",41, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // READFUNC ::= READ PAP PCIERRE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("READFUNC",42, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // RETURNFUNC ::= RETURN E0 PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("RETURNFUNC",40, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // RETURNFUNC ::= RETURN PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("RETURNFUNC",40, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // LLAMADAFUNCAUX ::= LLAMADAFUNC PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("LLAMADAFUNCAUX",43, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // LLAMADAFUNC ::= IDEN PAP ARGS PCIERRE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("LLAMADAFUNC",35, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // ARGS ::= LISTAARGS 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ARGS",36, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // ARGS ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ARGS",36, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // LISTAARGS ::= E0 COMA ARGS 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("LISTAARGS",52, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // LISTAARGS ::= E0 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("LISTAARGS",52, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // BLOQUE ::= BINST 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("BLOQUE",23, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // BLOQUE ::= CONDICIONALES 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("BLOQUE",23, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // BLOQUE ::= BUCLES 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("BLOQUE",23, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // BLOQUE ::= SWITCHES 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("BLOQUE",23, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // BINST ::= LLAP LISTAINST LLCIERRE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("BINST",47, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // CONDICIONALES ::= IF PAP E0 PCIERRE BINST 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CONDICIONALES",44, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // CONDICIONALES ::= IF PAP E0 PCIERRE BINST ELSE BINST 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CONDICIONALES",44, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // BUCLES ::= WHILEEXP 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("BUCLES",45, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // BUCLES ::= FOREXP 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("BUCLES",45, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // BUCLES ::= REPEATEXP 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("BUCLES",45, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // WHILEEXP ::= WHILE PAP E0 PCIERRE BINST 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("WHILEEXP",24, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // FOREXP ::= FOR PAP DECLARACION E0 PUNTOYCOMA ACCESO IGUAL E0 PCIERRE BINST 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("FOREXP",25, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // REPEATEXP ::= REPEAT PAP E0 PCIERRE BINST 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("REPEATEXP",26, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // SWITCHES ::= SWITCHEXP 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("SWITCHES",46, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // SWITCHES ::= VALUEFOREXP 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("SWITCHES",46, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // SWITCHEXP ::= SWITCH PAP IDEN PCIERRE LLAP CASEEXP DEFAULTEXP LLCIERRE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("SWITCHEXP",28, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // CASEEXP ::= CASE E0 DOSPUNTOS LISTAINST BREAK PUNTOYCOMA CASEEXP 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CASEEXP",29, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // CASEEXP ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CASEEXP",29, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // DEFAULTEXP ::= DEFAULT DOSPUNTOS LISTAINST 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("DEFAULTEXP",48, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // VALUEFOREXP ::= VALUEFOR PAP IDEN PCIERRE LLAP CASEEXPVF DEFAULTEXPVF LLCIERRE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("VALUEFOREXP",27, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // CASEEXPVF ::= CASE E0 IGUAL E0 PUNTOYCOMA BREAK PUNTOYCOMA CASEEXPVF 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CASEEXPVF",30, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // CASEEXPVF ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CASEEXPVF",30, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // DEFAULTEXPVF ::= DEFAULT IGUAL E0 PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("DEFAULTEXPVF",49, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // E0 ::= E0 OR E1 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E0",3, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // E0 ::= E1 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E0",3, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // E1 ::= E1 AND E2 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E1",4, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // E1 ::= E2 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E1",4, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // E2 ::= E2 OP0 E3 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E2",5, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // E2 ::= E3 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E2",5, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // E3 ::= E3 OP1 E4 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E3",6, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // E3 ::= E4 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E3",6, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // E3 ::= NEWEXP 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E3",6, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // E4 ::= E4 OP2 E5 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E4",7, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // E4 ::= E5 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E4",7, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // E5 ::= E5 OP3 E6 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E5",8, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // E5 ::= E6 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E5",8, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // E6 ::= NOT E6 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E6",9, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // E6 ::= E7 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E6",9, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // E7 ::= OP4 E7 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E7",10, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // E7 ::= E8 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E7",10, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // E8 ::= ENT 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E8",11, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // E8 ::= TRUE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E8",11, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // E8 ::= FALSE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E8",11, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // E8 ::= ACCESO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E8",11, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // E8 ::= LLAMADAFUNC 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E8",11, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // E8 ::= READFUNC 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E8",11, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // E8 ::= LLAP E0 E9 LLCIERRE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E8",11, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // E9 ::= COMA E0 E9 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E9",12, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // E9 ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E9",12, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // OP0 ::= DISTINTO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OP0",13, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // OP0 ::= IGUALDAD 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OP0",13, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // OP1 ::= MENOR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OP1",14, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // OP1 ::= MAYOR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OP1",14, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // OP1 ::= MENORIGUAL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OP1",14, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // OP1 ::= MAYORIGUAL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OP1",14, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // OP2 ::= MAS 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OP2",15, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // OP2 ::= MENOS 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OP2",15, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // OP3 ::= POR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OP3",16, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // OP3 ::= DIV 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OP3",16, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // OP3 ::= MOD 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OP3",16, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // OP4 ::= SUMLIST 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OP4",17, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // OP4 ::= PRODLIST 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OP4",17, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // NEWEXP ::= NEW TYPE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("NEWEXP",53, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // TYPE ::= TIPOINT 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TYPE",2, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // TYPE ::= TIPOBOOL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TYPE",2, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // TYPE ::= VOID 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TYPE",2, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // TYPE ::= IDEN 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TYPE",2, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // TYPE ::= LIST MENOR TYPE MAYOR CAP E0 CCIERRE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TYPE",2, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // TYPE ::= TYPE POR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TYPE",2, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // ACCESO ::= ACCESO CAP E0 CCIERRE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ACCESO",18, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // ACCESO ::= ACCESO PUNTO IDEN 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ACCESO",18, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // ACCESO ::= PAP E0 PCIERRE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ACCESO",18, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // ACCESO ::= NACCESO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ACCESO",18, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // NACCESO ::= IDEN 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("NACCESO",19, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // NACCESO ::= POR NACCESO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("NACCESO",19, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // NACCESO ::= AMPERSAND NACCESO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("NACCESO",19, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$AnalizadorSintacticoTiny$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintacticoTiny$do_action(
    int                        CUP$AnalizadorSintacticoTiny$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintacticoTiny$parser,
    java.util.Stack            CUP$AnalizadorSintacticoTiny$stack,
    int                        CUP$AnalizadorSintacticoTiny$top)
    throws java.lang.Exception
    {
              return CUP$AnalizadorSintacticoTiny$do_action_part00000000(
                               CUP$AnalizadorSintacticoTiny$act_num,
                               CUP$AnalizadorSintacticoTiny$parser,
                               CUP$AnalizadorSintacticoTiny$stack,
                               CUP$AnalizadorSintacticoTiny$top);
    }
}

