
//----------------------------------------------------
// The following code was generated by CUP v0.11b beta 20140220
// Mon Apr 29 22:04:19 CEST 2024
//----------------------------------------------------

package asint;

import java_cup.runtime.*;
import alex.AnalizadorLexicoTiny;
import alex.UnidadLexica;
import alex.TokenValue;
import errors.GestionErroresTiny;
import java.util.ArrayList;
import ast.Types.*;
import ast.Expressions.*;
import ast.Expressions.Accesses.*;
import ast.Definitions.*;
import ast.Instructions.*;
import ast.*;
import java_cup.runtime.ComplexSymbolFactory.Location;

/** CUP v0.11b beta 20140220 generated parser.
  * @version Mon Apr 29 22:04:19 CEST 2024
  */
public class AnalizadorSintacticoTiny extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public AnalizadorSintacticoTiny() {super();}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintacticoTiny(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintacticoTiny(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\214\000\002\002\003\000\002\002\004\000\002\030" +
    "\004\000\002\030\004\000\002\030\004\000\002\030\004" +
    "\000\002\030\004\000\002\030\002\000\002\031\005\000" +
    "\002\031\007\000\002\031\005\000\002\031\004\000\002" +
    "\036\006\000\002\036\007\000\002\036\006\000\002\032" +
    "\010\000\002\032\010\000\002\033\010\000\002\033\010" +
    "\000\002\037\004\000\002\037\003\000\002\035\007\000" +
    "\002\035\007\000\002\034\011\000\002\034\011\000\002" +
    "\034\011\000\002\042\003\000\002\042\002\000\002\041" +
    "\005\000\002\041\003\000\002\040\005\000\002\040\006" +
    "\000\002\040\005\000\002\040\004\000\002\044\004\000" +
    "\002\044\004\000\002\044\002\000\002\056\003\000\002" +
    "\056\003\000\002\056\003\000\002\056\003\000\002\056" +
    "\003\000\002\056\004\000\002\045\007\000\002\045\007" +
    "\000\002\045\007\000\002\020\005\000\002\020\006\000" +
    "\002\046\005\000\002\046\004\000\002\046\005\000\002" +
    "\051\004\000\002\051\004\000\002\021\006\000\002\047" +
    "\003\000\002\047\002\000\002\050\005\000\002\050\003" +
    "\000\002\055\003\000\002\055\003\000\002\055\003\000" +
    "\002\055\003\000\002\043\005\000\002\052\007\000\002" +
    "\052\011\000\002\052\007\000\002\053\007\000\002\053" +
    "\014\000\002\053\007\000\002\053\007\000\002\053\007" +
    "\000\002\053\007\000\002\054\012\000\002\054\011\000" +
    "\002\054\012\000\002\054\011\000\002\054\011\000\002" +
    "\054\012\000\002\054\012\000\002\054\011\000\002\057" +
    "\011\000\002\057\002\000\002\060\007\000\002\061\012" +
    "\000\002\061\002\000\002\062\010\000\002\062\006\000" +
    "\002\004\005\000\002\004\003\000\002\005\005\000\002" +
    "\005\003\000\002\006\005\000\002\006\003\000\002\007" +
    "\005\000\002\007\003\000\002\007\003\000\002\010\005" +
    "\000\002\010\003\000\002\011\005\000\002\011\003\000" +
    "\002\012\004\000\002\012\003\000\002\013\004\000\002" +
    "\013\003\000\002\014\003\000\002\014\003\000\002\014" +
    "\003\000\002\014\003\000\002\014\003\000\002\014\003" +
    "\000\002\014\006\000\002\022\005\000\002\022\002\000" +
    "\002\023\003\000\002\023\003\000\002\024\003\000\002" +
    "\024\003\000\002\024\003\000\002\024\003\000\002\025" +
    "\003\000\002\025\003\000\002\026\003\000\002\026\003" +
    "\000\002\026\003\000\002\027\003\000\002\027\003\000" +
    "\002\017\004\000\002\003\003\000\002\003\003\000\002" +
    "\003\003\000\002\003\003\000\002\003\011\000\002\003" +
    "\004\000\002\015\004\000\002\015\004\000\002\015\003" +
    "\000\002\016\003\000\002\016\006\000\002\016\005\000" +
    "\002\016\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u012e\000\024\002\ufffa\004\021\005\022\006\011\051" +
    "\007\062\015\063\023\064\013\066\006\001\002\000\024" +
    "\002\ufffa\004\021\005\022\006\011\051\007\062\015\063" +
    "\023\064\013\066\006\001\002\000\004\002\001\001\002" +
    "\000\012\003\uff7f\011\uff7f\027\213\066\uff7f\001\002\000" +
    "\004\066\203\001\002\000\004\002\202\001\002\000\050" +
    "\003\uff80\011\uff80\016\uff80\017\uff80\020\uff80\021\uff80\022" +
    "\uff80\023\uff80\024\uff80\025\uff80\030\uff80\032\uff80\033\uff80" +
    "\034\uff80\036\uff80\037\uff80\040\uff80\043\uff80\066\uff80\001" +
    "\002\000\024\002\ufffa\004\021\005\022\006\011\051\007" +
    "\062\015\063\023\064\013\066\006\001\002\000\004\017" +
    "\173\001\002\000\024\002\ufffa\004\021\005\022\006\011" +
    "\051\007\062\015\063\023\064\013\066\006\001\002\000" +
    "\004\066\165\001\002\000\010\003\156\011\126\066\157" +
    "\001\002\000\024\002\ufffa\004\021\005\022\006\011\051" +
    "\007\062\015\063\023\064\013\066\006\001\002\000\024" +
    "\002\ufffa\004\021\005\022\006\011\051\007\062\015\063" +
    "\023\064\013\066\006\001\002\000\050\003\uff82\011\uff82" +
    "\016\uff82\017\uff82\020\uff82\021\uff82\022\uff82\023\uff82\024" +
    "\uff82\025\uff82\030\uff82\032\uff82\033\uff82\034\uff82\036\uff82" +
    "\037\uff82\040\uff82\043\uff82\066\uff82\001\002\000\050\003" +
    "\uff81\011\uff81\016\uff81\017\uff81\020\uff81\021\uff81\022\uff81" +
    "\023\uff81\024\uff81\025\uff81\030\uff81\032\uff81\033\uff81\034" +
    "\uff81\036\uff81\037\uff81\040\uff81\043\uff81\066\uff81\001\002" +
    "\000\004\004\024\001\002\000\004\066\025\001\002\000" +
    "\004\036\026\001\002\000\034\011\060\014\062\015\053" +
    "\026\030\027\047\033\052\041\056\061\027\065\051\066" +
    "\033\067\061\070\035\071\050\001\002\000\004\027\150" +
    "\001\002\000\032\011\060\014\062\015\053\026\030\027" +
    "\047\033\052\041\056\061\027\066\033\067\061\070\035" +
    "\071\050\001\002\000\054\003\uff9a\007\uff9a\010\uff9a\011" +
    "\uff9a\012\uff9a\013\uff9a\016\uff9a\017\uff9a\020\uff9a\021\uff9a" +
    "\022\uff9a\023\uff9a\024\uff9a\025\uff9a\030\uff9a\032\uff9a\034" +
    "\uff9a\036\uff9a\037\uff9a\040\uff9a\043\uff9a\001\002\000\054" +
    "\003\uff9c\007\uff9c\010\uff9c\011\uff9c\012\uff9c\013\uff9c\016" +
    "\uff9c\017\uff9c\020\uff9c\021\uff9c\022\uff9c\023\uff9c\024\uff9c" +
    "\025\uff9c\030\uff9c\032\uff9c\034\uff9c\036\uff9c\037\uff9c\040" +
    "\uff9c\043\uff9c\001\002\000\062\003\uff79\007\uff79\010\uff79" +
    "\011\uff79\012\uff79\013\uff79\016\uff79\017\uff79\020\uff79\021" +
    "\uff79\022\uff79\023\uff79\024\uff79\025\uff79\027\140\030\uff79" +
    "\031\uff79\032\uff79\034\uff79\036\uff79\037\uff79\040\uff79\042" +
    "\uff79\043\uff79\001\002\000\054\003\uff9e\007\uff9e\010\uff9e" +
    "\011\uff9e\012\uff9e\013\uff9e\016\uff9e\017\uff9e\020\uff9e\021" +
    "\uff9e\022\uff9e\023\uff9e\024\uff9e\025\uff9e\030\uff9e\032\uff9e" +
    "\034\uff9e\036\uff9e\037\uff9e\040\uff9e\043\uff9e\001\002\000" +
    "\054\003\uff98\007\uff98\010\uff98\011\uff98\012\uff98\013\uff98" +
    "\016\uff98\017\uff98\020\uff98\021\uff98\022\uff98\023\uff98\024" +
    "\uff98\025\uff98\030\uff98\032\uff98\034\uff98\036\uff98\037\uff98" +
    "\040\uff98\043\uff98\001\002\000\042\003\uffa2\016\uffa2\017" +
    "\uffa2\020\uffa2\021\uffa2\022\uffa2\023\uffa2\024\uffa2\025\uffa2" +
    "\030\uffa2\032\uffa2\034\uffa2\036\uffa2\037\uffa2\040\uffa2\043" +
    "\uffa2\001\002\000\054\003\uffa0\007\uffa0\010\uffa0\011\116" +
    "\012\117\013\115\016\uffa0\017\uffa0\020\uffa0\021\uffa0\022" +
    "\uffa0\023\uffa0\024\uffa0\025\uffa0\030\uffa0\032\uffa0\034\uffa0" +
    "\036\uffa0\037\uffa0\040\uffa0\043\uffa0\001\002\000\046\003" +
    "\uffa3\007\111\010\112\016\uffa3\017\uffa3\020\uffa3\021\uffa3" +
    "\022\uffa3\023\uffa3\024\uffa3\025\uffa3\030\uffa3\032\uffa3\034" +
    "\uffa3\036\uffa3\037\uffa3\040\uffa3\043\uffa3\001\002\000\042" +
    "\003\uffa5\016\102\017\105\020\106\021\104\022\uffa5\023" +
    "\uffa5\024\uffa5\025\uffa5\030\uffa5\032\uffa5\034\uffa5\036\uffa5" +
    "\037\uffa5\040\uffa5\043\uffa5\001\002\000\032\003\uffa7\022" +
    "\076\023\100\024\uffa7\025\uffa7\030\uffa7\032\uffa7\034\uffa7" +
    "\036\uffa7\037\uffa7\040\uffa7\043\uffa7\001\002\000\026\003" +
    "\uffa9\024\074\025\uffa9\030\uffa9\032\uffa9\034\uffa9\036\uffa9" +
    "\037\uffa9\040\uffa9\043\uffa9\001\002\000\010\003\137\025" +
    "\072\040\136\001\002\000\060\003\uff7a\007\uff7a\010\uff7a" +
    "\011\uff7a\012\uff7a\013\uff7a\016\uff7a\017\uff7a\020\uff7a\021" +
    "\uff7a\022\uff7a\023\uff7a\024\uff7a\025\uff7a\030\uff7a\031\132" +
    "\032\uff7a\034\uff7a\036\uff7a\037\uff7a\040\uff7a\042\131\043" +
    "\uff7a\001\002\000\054\003\uff96\007\uff96\010\uff96\011\uff96" +
    "\012\uff96\013\uff96\016\uff96\017\uff96\020\uff96\021\uff96\022" +
    "\uff96\023\uff96\024\uff96\025\uff96\030\uff96\032\uff96\034\uff96" +
    "\036\uff96\037\uff96\040\uff96\043\uff96\001\002\000\034\011" +
    "\060\014\062\015\053\026\030\027\047\033\052\041\056" +
    "\061\027\065\051\066\033\067\061\070\035\071\050\001" +
    "\002\000\054\003\uff97\007\uff97\010\uff97\011\uff97\012\uff97" +
    "\013\uff97\016\uff97\017\uff97\020\uff97\021\uff97\022\uff97\023" +
    "\uff97\024\uff97\025\uff97\030\uff97\032\uff97\034\uff97\036\uff97" +
    "\037\uff97\040\uff97\043\uff97\001\002\000\014\004\021\005" +
    "\022\006\011\064\013\066\124\001\002\000\034\011\060" +
    "\014\062\015\053\026\030\027\047\033\052\041\056\061" +
    "\027\065\051\066\033\067\061\070\035\071\050\001\002" +
    "\000\030\011\uff84\014\uff84\015\uff84\027\uff84\033\uff84\041" +
    "\uff84\061\uff84\066\uff84\067\uff84\070\uff84\071\uff84\001\002" +
    "\000\030\011\060\014\062\015\053\027\047\033\052\041" +
    "\056\061\027\066\033\067\061\070\035\071\050\001\002" +
    "\000\054\003\uff94\007\uff94\010\uff94\011\uff94\012\uff94\013" +
    "\uff94\016\uff94\017\uff94\020\uff94\021\uff94\022\uff94\023\uff94" +
    "\024\uff94\025\uff94\030\uff94\032\uff94\034\uff94\036\uff94\037" +
    "\uff94\040\uff94\043\uff94\001\002\000\012\011\060\027\047" +
    "\041\056\066\063\001\002\000\054\003\uff95\007\uff95\010" +
    "\uff95\011\uff95\012\uff95\013\uff95\016\uff95\017\uff95\020\uff95" +
    "\021\uff95\022\uff95\023\uff95\024\uff95\025\uff95\030\uff95\032" +
    "\uff95\034\uff95\036\uff95\037\uff95\040\uff95\043\uff95\001\002" +
    "\000\012\011\060\027\047\041\056\066\063\001\002\000" +
    "\054\003\uff99\007\uff99\010\uff99\011\uff99\012\uff99\013\uff99" +
    "\016\uff99\017\uff99\020\uff99\021\uff99\022\uff99\023\uff99\024" +
    "\uff99\025\uff99\030\uff99\032\uff99\034\uff99\036\uff99\037\uff99" +
    "\040\uff99\043\uff99\001\002\000\030\011\uff85\014\uff85\015" +
    "\uff85\027\uff85\033\uff85\041\uff85\061\uff85\066\uff85\067\uff85" +
    "\070\uff85\071\uff85\001\002\000\060\003\uff79\007\uff79\010" +
    "\uff79\011\uff79\012\uff79\013\uff79\016\uff79\017\uff79\020\uff79" +
    "\021\uff79\022\uff79\023\uff79\024\uff79\025\uff79\030\uff79\031" +
    "\uff79\032\uff79\034\uff79\036\uff79\037\uff79\040\uff79\042\uff79" +
    "\043\uff79\001\002\000\054\003\uff7c\007\uff7c\010\uff7c\011" +
    "\uff7c\012\uff7c\013\uff7c\016\uff7c\017\uff7c\020\uff7c\021\uff7c" +
    "\022\uff7c\023\uff7c\024\uff7c\025\uff7c\030\uff7c\032\uff7c\034" +
    "\uff7c\036\uff7c\037\uff7c\040\uff7c\043\uff7c\001\002\000\054" +
    "\003\uff7b\007\uff7b\010\uff7b\011\uff7b\012\uff7b\013\uff7b\016" +
    "\uff7b\017\uff7b\020\uff7b\021\uff7b\022\uff7b\023\uff7b\024\uff7b" +
    "\025\uff7b\030\uff7b\032\uff7b\034\uff7b\036\uff7b\037\uff7b\040" +
    "\uff7b\043\uff7b\001\002\000\054\003\uff9b\007\uff9b\010\uff9b" +
    "\011\uff9b\012\uff9b\013\uff9b\016\uff9b\017\uff9b\020\uff9b\021" +
    "\uff9b\022\uff9b\023\uff9b\024\uff9b\025\uff9b\030\uff9b\032\uff9b" +
    "\034\uff9b\036\uff9b\037\uff9b\040\uff9b\043\uff9b\001\002\000" +
    "\010\025\072\034\uff91\037\070\001\002\000\034\011\060" +
    "\014\062\015\053\026\030\027\047\033\052\041\056\061" +
    "\027\065\051\066\033\067\061\070\035\071\050\001\002" +
    "\000\004\034\121\001\002\000\034\011\060\014\062\015" +
    "\053\026\030\027\047\033\052\041\056\061\027\065\051" +
    "\066\033\067\061\070\035\071\050\001\002\000\026\003" +
    "\uffaa\024\074\025\uffaa\030\uffaa\032\uffaa\034\uffaa\036\uffaa" +
    "\037\uffaa\040\uffaa\043\uffaa\001\002\000\034\011\060\014" +
    "\062\015\053\026\030\027\047\033\052\041\056\061\027" +
    "\065\051\066\033\067\061\070\035\071\050\001\002\000" +
    "\032\003\uffa8\022\076\023\100\024\uffa8\025\uffa8\030\uffa8" +
    "\032\uffa8\034\uffa8\036\uffa8\037\uffa8\040\uffa8\043\uffa8\001" +
    "\002\000\034\011\uff90\014\uff90\015\uff90\026\uff90\027\uff90" +
    "\033\uff90\041\uff90\061\uff90\065\uff90\066\uff90\067\uff90\070" +
    "\uff90\071\uff90\001\002\000\034\011\060\014\062\015\053" +
    "\026\030\027\047\033\052\041\056\061\027\065\051\066" +
    "\033\067\061\070\035\071\050\001\002\000\034\011\uff8f" +
    "\014\uff8f\015\uff8f\026\uff8f\027\uff8f\033\uff8f\041\uff8f\061" +
    "\uff8f\065\uff8f\066\uff8f\067\uff8f\070\uff8f\071\uff8f\001\002" +
    "\000\042\003\uffa6\016\102\017\105\020\106\021\104\022" +
    "\uffa6\023\uffa6\024\uffa6\025\uffa6\030\uffa6\032\uffa6\034\uffa6" +
    "\036\uffa6\037\uffa6\040\uffa6\043\uffa6\001\002\000\032\011" +
    "\uff8d\014\uff8d\015\uff8d\026\uff8d\027\uff8d\033\uff8d\041\uff8d" +
    "\061\uff8d\066\uff8d\067\uff8d\070\uff8d\071\uff8d\001\002\000" +
    "\032\011\060\014\062\015\053\026\030\027\047\033\052" +
    "\041\056\061\027\066\033\067\061\070\035\071\050\001" +
    "\002\000\032\011\uff8c\014\uff8c\015\uff8c\026\uff8c\027\uff8c" +
    "\033\uff8c\041\uff8c\061\uff8c\066\uff8c\067\uff8c\070\uff8c\071" +
    "\uff8c\001\002\000\032\011\uff8e\014\uff8e\015\uff8e\026\uff8e" +
    "\027\uff8e\033\uff8e\041\uff8e\061\uff8e\066\uff8e\067\uff8e\070" +
    "\uff8e\071\uff8e\001\002\000\032\011\uff8b\014\uff8b\015\uff8b" +
    "\026\uff8b\027\uff8b\033\uff8b\041\uff8b\061\uff8b\066\uff8b\067" +
    "\uff8b\070\uff8b\071\uff8b\001\002\000\046\003\uffa4\007\111" +
    "\010\112\016\uffa4\017\uffa4\020\uffa4\021\uffa4\022\uffa4\023" +
    "\uffa4\024\uffa4\025\uffa4\030\uffa4\032\uffa4\034\uffa4\036\uffa4" +
    "\037\uffa4\040\uffa4\043\uffa4\001\002\000\032\011\060\014" +
    "\062\015\053\026\030\027\047\033\052\041\056\061\027" +
    "\066\033\067\061\070\035\071\050\001\002\000\034\011" +
    "\uff8a\014\uff8a\015\uff8a\026\uff8a\027\uff8a\033\uff8a\036\uff8a" +
    "\041\uff8a\061\uff8a\066\uff8a\067\uff8a\070\uff8a\071\uff8a\001" +
    "\002\000\034\011\uff89\014\uff89\015\uff89\026\uff89\027\uff89" +
    "\033\uff89\036\uff89\041\uff89\061\uff89\066\uff89\067\uff89\070" +
    "\uff89\071\uff89\001\002\000\054\003\uffa1\007\uffa1\010\uffa1" +
    "\011\116\012\117\013\115\016\uffa1\017\uffa1\020\uffa1\021" +
    "\uffa1\022\uffa1\023\uffa1\024\uffa1\025\uffa1\030\uffa1\032\uffa1" +
    "\034\uffa1\036\uffa1\037\uffa1\040\uffa1\043\uffa1\001\002\000" +
    "\032\011\060\014\062\015\053\026\030\027\047\033\052" +
    "\041\056\061\027\066\033\067\061\070\035\071\050\001" +
    "\002\000\032\011\uff86\014\uff86\015\uff86\026\uff86\027\uff86" +
    "\033\uff86\041\uff86\061\uff86\066\uff86\067\uff86\070\uff86\071" +
    "\uff86\001\002\000\032\011\uff88\014\uff88\015\uff88\026\uff88" +
    "\027\uff88\033\uff88\041\uff88\061\uff88\066\uff88\067\uff88\070" +
    "\uff88\071\uff88\001\002\000\032\011\uff87\014\uff87\015\uff87" +
    "\026\uff87\027\uff87\033\uff87\041\uff87\061\uff87\066\uff87\067" +
    "\uff87\070\uff87\071\uff87\001\002\000\054\003\uff9f\007\uff9f" +
    "\010\uff9f\011\uff9f\012\uff9f\013\uff9f\016\uff9f\017\uff9f\020" +
    "\uff9f\021\uff9f\022\uff9f\023\uff9f\024\uff9f\025\uff9f\030\uff9f" +
    "\032\uff9f\034\uff9f\036\uff9f\037\uff9f\040\uff9f\043\uff9f\001" +
    "\002\000\054\003\uff93\007\uff93\010\uff93\011\uff93\012\uff93" +
    "\013\uff93\016\uff93\017\uff93\020\uff93\021\uff93\022\uff93\023" +
    "\uff93\024\uff93\025\uff93\030\uff93\032\uff93\034\uff93\036\uff93" +
    "\037\uff93\040\uff93\043\uff93\001\002\000\010\025\072\034" +
    "\uff91\037\070\001\002\000\004\034\uff92\001\002\000\050" +
    "\003\uff7f\011\uff7f\016\uff7f\017\uff7f\020\uff7f\021\uff7f\022" +
    "\uff7f\023\uff7f\024\uff7f\025\uff7f\030\uff7f\032\uff7f\033\uff7f" +
    "\034\uff7f\036\uff7f\037\uff7f\040\uff7f\043\uff7f\066\uff7f\001" +
    "\002\000\044\003\uff83\011\126\016\uff83\017\uff83\020\uff83" +
    "\021\uff83\022\uff83\023\uff83\024\uff83\025\uff83\030\uff83\032" +
    "\uff83\034\uff83\036\uff83\037\uff83\040\uff83\043\uff83\001\002" +
    "\000\050\003\uff7d\011\uff7d\016\uff7d\017\uff7d\020\uff7d\021" +
    "\uff7d\022\uff7d\023\uff7d\024\uff7d\025\uff7d\030\uff7d\032\uff7d" +
    "\033\uff7d\034\uff7d\036\uff7d\037\uff7d\040\uff7d\043\uff7d\066" +
    "\uff7d\001\002\000\006\025\072\030\130\001\002\000\060" +
    "\003\uff76\007\uff76\010\uff76\011\uff76\012\uff76\013\uff76\016" +
    "\uff76\017\uff76\020\uff76\021\uff76\022\uff76\023\uff76\024\uff76" +
    "\025\uff76\030\uff76\031\uff76\032\uff76\034\uff76\036\uff76\037" +
    "\uff76\040\uff76\042\uff76\043\uff76\001\002\000\004\066\135" +
    "\001\002\000\034\011\060\014\062\015\053\026\030\027" +
    "\047\033\052\041\056\061\027\065\051\066\033\067\061" +
    "\070\035\071\050\001\002\000\006\025\072\032\134\001" +
    "\002\000\060\003\uff78\007\uff78\010\uff78\011\uff78\012\uff78" +
    "\013\uff78\016\uff78\017\uff78\020\uff78\021\uff78\022\uff78\023" +
    "\uff78\024\uff78\025\uff78\030\uff78\031\uff78\032\uff78\034\uff78" +
    "\036\uff78\037\uff78\040\uff78\042\uff78\043\uff78\001\002\000" +
    "\060\003\uff77\007\uff77\010\uff77\011\uff77\012\uff77\013\uff77" +
    "\016\uff77\017\uff77\020\uff77\021\uff77\022\uff77\023\uff77\024" +
    "\uff77\025\uff77\030\uff77\031\uff77\032\uff77\034\uff77\036\uff77" +
    "\037\uff77\040\uff77\042\uff77\043\uff77\001\002\000\024\002" +
    "\ufff2\004\ufff2\005\ufff2\006\ufff2\051\ufff2\062\ufff2\063\ufff2" +
    "\064\ufff2\066\ufff2\001\002\000\024\002\ufff1\004\ufff1\005" +
    "\ufff1\006\ufff1\051\ufff1\062\ufff1\063\ufff1\064\ufff1\066\ufff1" +
    "\001\002\000\036\011\060\014\062\015\053\026\030\027" +
    "\047\030\uffca\033\052\041\056\061\027\065\051\066\033" +
    "\067\061\070\035\071\050\001\002\000\004\030\146\001" +
    "\002\000\010\025\072\030\uffc8\037\144\001\002\000\004" +
    "\030\uffcb\001\002\000\034\011\060\014\062\015\053\026" +
    "\030\027\047\033\052\041\056\061\027\065\051\066\033" +
    "\067\061\070\035\071\050\001\002\000\004\030\uffc9\001" +
    "\002\000\054\003\uffcc\007\uffcc\010\uffcc\011\uffcc\012\uffcc" +
    "\013\uffcc\016\uffcc\017\uffcc\020\uffcc\021\uffcc\022\uffcc\023" +
    "\uffcc\024\uffcc\025\uffcc\030\uffcc\032\uffcc\034\uffcc\036\uffcc" +
    "\037\uffcc\040\uffcc\043\uffcc\001\002\000\054\003\uff9d\007" +
    "\uff9d\010\uff9d\011\uff9d\012\uff9d\013\uff9d\016\uff9d\017\uff9d" +
    "\020\uff9d\021\uff9d\022\uff9d\023\uff9d\024\uff9d\025\uff9d\030" +
    "\uff9d\032\uff9d\034\uff9d\036\uff9d\037\uff9d\040\uff9d\043\uff9d" +
    "\001\002\000\006\003\152\030\151\001\002\000\054\003" +
    "\uffd3\007\uffd3\010\uffd3\011\uffd3\012\uffd3\013\uffd3\016\uffd3" +
    "\017\uffd3\020\uffd3\021\uffd3\022\uffd3\023\uffd3\024\uffd3\025" +
    "\uffd3\030\uffd3\032\uffd3\034\uffd3\036\uffd3\037\uffd3\040\uffd3" +
    "\043\uffd3\001\002\000\004\030\153\001\002\000\054\003" +
    "\uffd2\007\uffd2\010\uffd2\011\uffd2\012\uffd2\013\uffd2\016\uffd2" +
    "\017\uffd2\020\uffd2\021\uffd2\022\uffd2\023\uffd2\024\uffd2\025" +
    "\uffd2\030\uffd2\032\uffd2\034\uffd2\036\uffd2\037\uffd2\040\uffd2" +
    "\043\uffd2\001\002\000\004\002\uffff\001\002\000\004\002" +
    "\ufffb\001\002\000\102\002\ufff6\003\ufff6\004\ufff6\005\ufff6" +
    "\006\ufff6\011\ufff6\014\ufff6\015\ufff6\026\ufff6\027\ufff6\033" +
    "\ufff6\034\ufff6\041\ufff6\044\ufff6\045\ufff6\046\ufff6\047\ufff6" +
    "\051\ufff6\052\ufff6\053\ufff6\055\ufff6\057\ufff6\060\ufff6\061" +
    "\ufff6\062\ufff6\063\ufff6\064\ufff6\065\ufff6\066\ufff6\067\ufff6" +
    "\070\ufff6\071\ufff6\001\002\000\010\003\161\036\162\040" +
    "\160\001\002\000\102\002\ufff9\003\ufff9\004\ufff9\005\ufff9" +
    "\006\ufff9\011\ufff9\014\ufff9\015\ufff9\026\ufff9\027\ufff9\033" +
    "\ufff9\034\ufff9\041\ufff9\044\ufff9\045\ufff9\046\ufff9\047\ufff9" +
    "\051\ufff9\052\ufff9\053\ufff9\055\ufff9\057\ufff9\060\ufff9\061" +
    "\ufff9\062\ufff9\063\ufff9\064\ufff9\065\ufff9\066\ufff9\067\ufff9" +
    "\070\ufff9\071\ufff9\001\002\000\102\002\ufff7\003\ufff7\004" +
    "\ufff7\005\ufff7\006\ufff7\011\ufff7\014\ufff7\015\ufff7\026\ufff7" +
    "\027\ufff7\033\ufff7\034\ufff7\041\ufff7\044\ufff7\045\ufff7\046" +
    "\ufff7\047\ufff7\051\ufff7\052\ufff7\053\ufff7\055\ufff7\057\ufff7" +
    "\060\ufff7\061\ufff7\062\ufff7\063\ufff7\064\ufff7\065\ufff7\066" +
    "\ufff7\067\ufff7\070\ufff7\071\ufff7\001\002\000\034\011\060" +
    "\014\062\015\053\026\030\027\047\033\052\041\056\061" +
    "\027\065\051\066\033\067\061\070\035\071\050\001\002" +
    "\000\006\025\072\040\164\001\002\000\102\002\ufff8\003" +
    "\ufff8\004\ufff8\005\ufff8\006\ufff8\011\ufff8\014\ufff8\015\ufff8" +
    "\026\ufff8\027\ufff8\033\ufff8\034\ufff8\041\ufff8\044\ufff8\045" +
    "\ufff8\046\ufff8\047\ufff8\051\ufff8\052\ufff8\053\ufff8\055\ufff8" +
    "\057\ufff8\060\ufff8\061\ufff8\062\ufff8\063\ufff8\064\ufff8\065" +
    "\ufff8\066\ufff8\067\ufff8\070\ufff8\071\ufff8\001\002\000\004" +
    "\036\166\001\002\000\014\004\021\005\022\006\011\064" +
    "\013\066\124\001\002\000\010\003\171\011\126\040\170" +
    "\001\002\000\024\002\uffec\004\uffec\005\uffec\006\uffec\051" +
    "\uffec\062\uffec\063\uffec\064\uffec\066\uffec\001\002\000\024" +
    "\002\uffeb\004\uffeb\005\uffeb\006\uffeb\051\uffeb\062\uffeb\063" +
    "\uffeb\064\uffeb\066\uffeb\001\002\000\004\002\ufffd\001\002" +
    "\000\014\004\021\005\022\006\011\064\013\066\124\001" +
    "\002\000\006\011\126\016\175\001\002\000\004\031\176" +
    "\001\002\000\004\067\177\001\002\000\004\032\200\001" +
    "\002\000\050\003\uff7e\011\uff7e\016\uff7e\017\uff7e\020\uff7e" +
    "\021\uff7e\022\uff7e\023\uff7e\024\uff7e\025\uff7e\030\uff7e\032" +
    "\uff7e\033\uff7e\034\uff7e\036\uff7e\037\uff7e\040\uff7e\043\uff7e" +
    "\066\uff7e\001\002\000\004\002\ufffc\001\002\000\004\002" +
    "\000\001\002\000\004\033\204\001\002\000\014\004\021" +
    "\005\022\006\011\064\013\066\124\001\002\000\016\004" +
    "\021\005\022\006\011\034\uffed\064\013\066\124\001\002" +
    "\000\004\034\207\001\002\000\006\003\211\040\210\001" +
    "\002\000\024\002\ufff0\004\ufff0\005\ufff0\006\ufff0\051\ufff0" +
    "\062\ufff0\063\ufff0\064\ufff0\066\ufff0\001\002\000\024\002" +
    "\uffef\004\uffef\005\uffef\006\uffef\051\uffef\062\uffef\063\uffef" +
    "\064\uffef\066\uffef\001\002\000\004\034\uffee\001\002\000" +
    "\006\030\uffe6\066\216\001\002\000\004\030\uffe7\001\002" +
    "\000\004\030\230\001\002\000\006\003\222\043\223\001" +
    "\002\000\006\030\uffe4\037\220\001\002\000\004\066\216" +
    "\001\002\000\004\030\uffe5\001\002\000\006\030\uffe0\037" +
    "\uffe0\001\002\000\020\003\225\004\021\005\022\006\011" +
    "\041\224\064\013\066\124\001\002\000\014\004\021\005" +
    "\022\006\011\064\013\066\124\001\002\000\006\030\uffe1" +
    "\037\uffe1\001\002\000\010\011\126\030\uffe3\037\uffe3\001" +
    "\002\000\010\011\126\030\uffe2\037\uffe2\001\002\000\006" +
    "\003\232\035\231\001\002\000\016\003\u012c\004\021\005" +
    "\022\006\011\064\013\066\124\001\002\000\014\004\021" +
    "\005\022\006\011\064\013\066\124\001\002\000\006\011" +
    "\126\033\235\001\002\000\024\002\uffe9\004\uffe9\005\uffe9" +
    "\006\uffe9\051\uffe9\062\uffe9\063\uffe9\064\uffe9\066\uffe9\001" +
    "\002\000\050\003\253\004\021\005\022\006\011\011\060" +
    "\027\047\033\235\034\uffdd\041\056\044\236\045\257\046" +
    "\261\047\244\052\243\053\247\057\241\060\240\064\013" +
    "\066\242\001\002\000\004\027\u0125\001\002\000\052\003" +
    "\uffc7\004\uffc7\005\uffc7\006\uffc7\011\uffc7\027\uffc7\033\uffc7" +
    "\034\uffc7\041\uffc7\044\uffc7\045\uffc7\046\uffc7\047\uffc7\052" +
    "\uffc7\053\uffc7\055\uffc7\057\uffc7\060\uffc7\064\uffc7\066\uffc7" +
    "\001\002\000\004\027\u011d\001\002\000\036\011\060\014" +
    "\062\015\053\026\030\027\047\033\052\040\u0119\041\056" +
    "\061\027\065\051\066\033\067\061\070\035\071\050\001" +
    "\002\000\024\003\uff7f\007\uff79\010\uff79\011\uff7f\027\140" +
    "\031\uff79\036\uff79\042\uff79\066\uff7f\001\002\000\004\027" +
    "\376\001\002\000\004\027\365\001\002\000\004\034\364" +
    "\001\002\000\052\003\253\004\021\005\022\006\011\011" +
    "\060\027\047\033\235\034\uffdd\041\056\044\236\045\257" +
    "\046\261\047\244\052\243\053\247\055\uffdd\057\241\060" +
    "\240\064\013\066\242\001\002\000\004\027\325\001\002" +
    "\000\052\003\uffda\004\uffda\005\uffda\006\uffda\011\uffda\027" +
    "\uffda\033\uffda\034\uffda\041\uffda\044\uffda\045\uffda\046\uffda" +
    "\047\uffda\052\uffda\053\uffda\055\uffda\057\uffda\060\uffda\064" +
    "\uffda\066\uffda\001\002\000\010\007\111\010\112\036\316" +
    "\001\002\000\052\003\uffd8\004\uffd8\005\uffd8\006\uffd8\011" +
    "\uffd8\027\uffd8\033\uffd8\034\uffd8\041\uffd8\044\uffd8\045\uffd8" +
    "\046\uffd8\047\uffd8\052\uffd8\053\uffd8\055\uffd8\057\uffd8\060" +
    "\uffd8\064\uffd8\066\uffd8\001\002\000\004\040\314\001\002" +
    "\000\052\003\uffdc\004\uffdc\005\uffdc\006\uffdc\011\uffdc\027" +
    "\uffdc\033\uffdc\034\uffdc\041\uffdc\044\uffdc\045\uffdc\046\uffdc" +
    "\047\uffdc\052\uffdc\053\uffdc\055\uffdc\057\uffdc\060\uffdc\064" +
    "\uffdc\066\uffdc\001\002\000\052\003\uffc5\004\uffc5\005\uffc5" +
    "\006\uffc5\011\uffc5\027\uffc5\033\uffc5\034\uffc5\041\uffc5\044" +
    "\uffc5\045\uffc5\046\uffc5\047\uffc5\052\uffc5\053\uffc5\055\uffc5" +
    "\057\uffc5\060\uffc5\064\uffc5\066\uffc5\001\002\000\052\003" +
    "\uffd9\004\uffd9\005\uffd9\006\uffd9\011\uffd9\027\uffd9\033\uffd9" +
    "\034\uffd9\041\uffd9\044\uffd9\045\uffd9\046\uffd9\047\uffd9\052" +
    "\uffd9\053\uffd9\055\uffd9\057\uffd9\060\uffd9\064\uffd9\066\uffd9" +
    "\001\002\000\004\027\300\001\002\000\006\003\277\040" +
    "\276\001\002\000\004\027\267\001\002\000\052\003\uffdb" +
    "\004\uffdb\005\uffdb\006\uffdb\011\uffdb\027\uffdb\033\uffdb\034" +
    "\uffdb\041\uffdb\044\uffdb\045\uffdb\046\uffdb\047\uffdb\052\uffdb" +
    "\053\uffdb\055\uffdb\057\uffdb\060\uffdb\064\uffdb\066\uffdb\001" +
    "\002\000\052\003\253\004\021\005\022\006\011\011\060" +
    "\027\047\033\235\034\uffdd\041\056\044\236\045\257\046" +
    "\261\047\244\052\243\053\247\055\uffdd\057\241\060\240" +
    "\064\013\066\242\001\002\000\052\003\uffc4\004\uffc4\005" +
    "\uffc4\006\uffc4\011\uffc4\027\uffc4\033\uffc4\034\uffc4\041\uffc4" +
    "\044\uffc4\045\uffc4\046\uffc4\047\uffc4\052\uffc4\053\uffc4\055" +
    "\uffc4\057\uffc4\060\uffc4\064\uffc4\066\uffc4\001\002\000\052" +
    "\003\uffc6\004\uffc6\005\uffc6\006\uffc6\011\uffc6\027\uffc6\033" +
    "\uffc6\034\uffc6\041\uffc6\044\uffc6\045\uffc6\046\uffc6\047\uffc6" +
    "\052\uffc6\053\uffc6\055\uffc6\057\uffc6\060\uffc6\064\uffc6\066" +
    "\uffc6\001\002\000\006\034\uffde\055\uffde\001\002\000\036" +
    "\003\271\011\060\014\062\015\053\026\030\027\047\033" +
    "\052\041\056\061\027\065\051\066\033\067\061\070\035" +
    "\071\050\001\002\000\006\025\072\030\274\001\002\000" +
    "\004\030\272\001\002\000\004\033\235\001\002\000\052" +
    "\003\uffba\004\uffba\005\uffba\006\uffba\011\uffba\027\uffba\033" +
    "\uffba\034\uffba\041\uffba\044\uffba\045\uffba\046\uffba\047\uffba" +
    "\052\uffba\053\uffba\055\uffba\057\uffba\060\uffba\064\uffba\066" +
    "\uffba\001\002\000\004\033\235\001\002\000\052\003\uffbd" +
    "\004\uffbd\005\uffbd\006\uffbd\011\uffbd\027\uffbd\033\uffbd\034" +
    "\uffbd\041\uffbd\044\uffbd\045\uffbd\046\uffbd\047\uffbd\052\uffbd" +
    "\053\uffbd\055\uffbd\057\uffbd\060\uffbd\064\uffbd\066\uffbd\001" +
    "\002\000\052\003\uffce\004\uffce\005\uffce\006\uffce\011\uffce" +
    "\027\uffce\033\uffce\034\uffce\041\uffce\044\uffce\045\uffce\046" +
    "\uffce\047\uffce\052\uffce\053\uffce\055\uffce\057\uffce\060\uffce" +
    "\064\uffce\066\uffce\001\002\000\052\003\uffcd\004\uffcd\005" +
    "\uffcd\006\uffcd\011\uffcd\027\uffcd\033\uffcd\034\uffcd\041\uffcd" +
    "\044\uffcd\045\uffcd\046\uffcd\047\uffcd\052\uffcd\053\uffcd\055" +
    "\uffcd\057\uffcd\060\uffcd\064\uffcd\066\uffcd\001\002\000\016" +
    "\003\301\004\021\005\022\006\011\064\013\066\124\001" +
    "\002\000\004\030\312\001\002\000\034\011\060\014\062" +
    "\015\053\026\030\027\047\033\052\041\056\061\027\065" +
    "\051\066\033\067\061\070\035\071\050\001\002\000\006" +
    "\025\072\040\304\001\002\000\012\011\060\027\047\041" +
    "\056\066\063\001\002\000\004\036\306\001\002\000\034" +
    "\011\060\014\062\015\053\026\030\027\047\033\052\041" +
    "\056\061\027\065\051\066\033\067\061\070\035\071\050" +
    "\001\002\000\006\025\072\030\310\001\002\000\004\033" +
    "\235\001\002\000\052\003\uffbe\004\uffbe\005\uffbe\006\uffbe" +
    "\011\uffbe\027\uffbe\033\uffbe\034\uffbe\041\uffbe\044\uffbe\045" +
    "\uffbe\046\uffbe\047\uffbe\052\uffbe\053\uffbe\055\uffbe\057\uffbe" +
    "\060\uffbe\064\uffbe\066\uffbe\001\002\000\004\033\235\001" +
    "\002\000\052\003\uffbb\004\uffbb\005\uffbb\006\uffbb\011\uffbb" +
    "\027\uffbb\033\uffbb\034\uffbb\041\uffbb\044\uffbb\045\uffbb\046" +
    "\uffbb\047\uffbb\052\uffbb\053\uffbb\055\uffbb\057\uffbb\060\uffbb" +
    "\064\uffbb\066\uffbb\001\002\000\052\003\uffd7\004\uffd7\005" +
    "\uffd7\006\uffd7\011\uffd7\027\uffd7\033\uffd7\034\uffd7\041\uffd7" +
    "\044\uffd7\045\uffd7\046\uffd7\047\uffd7\052\uffd7\053\uffd7\055" +
    "\uffd7\057\uffd7\060\uffd7\064\uffd7\066\uffd7\001\002\000\004" +
    "\036\322\001\002\000\034\011\060\014\062\015\053\026" +
    "\030\027\047\033\052\041\056\061\027\065\051\066\033" +
    "\067\061\070\035\071\050\001\002\000\010\003\321\025" +
    "\072\040\320\001\002\000\052\003\ufff5\004\ufff5\005\ufff5" +
    "\006\ufff5\011\ufff5\027\ufff5\033\ufff5\034\ufff5\041\ufff5\044" +
    "\ufff5\045\ufff5\046\ufff5\047\ufff5\052\ufff5\053\ufff5\055\ufff5" +
    "\057\ufff5\060\ufff5\064\ufff5\066\ufff5\001\002\000\052\003" +
    "\ufff3\004\ufff3\005\ufff3\006\ufff3\011\ufff3\027\ufff3\033\ufff3" +
    "\034\ufff3\041\ufff3\044\ufff3\045\ufff3\046\ufff3\047\ufff3\052" +
    "\ufff3\053\ufff3\055\ufff3\057\ufff3\060\ufff3\064\ufff3\066\ufff3" +
    "\001\002\000\034\011\060\014\062\015\053\026\030\027" +
    "\047\033\052\041\056\061\027\065\051\066\033\067\061" +
    "\070\035\071\050\001\002\000\006\025\072\040\324\001" +
    "\002\000\052\003\ufff4\004\ufff4\005\ufff4\006\ufff4\011\ufff4" +
    "\027\ufff4\033\ufff4\034\ufff4\041\ufff4\044\ufff4\045\ufff4\046" +
    "\ufff4\047\ufff4\052\ufff4\053\ufff4\055\ufff4\057\ufff4\060\ufff4" +
    "\064\ufff4\066\ufff4\001\002\000\014\003\326\011\060\027" +
    "\047\041\056\066\063\001\002\000\004\030\355\001\002" +
    "\000\004\030\330\001\002\000\004\033\331\001\002\000" +
    "\010\034\uffad\054\333\056\uffad\001\002\000\006\034\345" +
    "\056\343\001\002\000\034\011\060\014\062\015\053\026" +
    "\030\027\047\033\052\041\056\061\027\065\051\066\033" +
    "\067\061\070\035\071\050\001\002\000\006\025\072\036" +
    "\335\001\002\000\034\011\060\014\062\015\053\026\030" +
    "\027\047\033\052\041\056\061\027\065\051\066\033\067" +
    "\061\070\035\071\050\001\002\000\006\025\072\040\337" +
    "\001\002\000\004\055\340\001\002\000\004\040\341\001" +
    "\002\000\010\034\uffad\054\333\056\uffad\001\002\000\006" +
    "\034\uffae\056\uffae\001\002\000\004\036\347\001\002\000" +
    "\004\034\346\001\002\000\052\003\uffb6\004\uffb6\005\uffb6" +
    "\006\uffb6\011\uffb6\027\uffb6\033\uffb6\034\uffb6\041\uffb6\044" +
    "\uffb6\045\uffb6\046\uffb6\047\uffb6\052\uffb6\053\uffb6\055\uffb6" +
    "\057\uffb6\060\uffb6\064\uffb6\066\uffb6\001\002\000\052\003" +
    "\uffb7\004\uffb7\005\uffb7\006\uffb7\011\uffb7\027\uffb7\033\uffb7" +
    "\034\uffb7\041\uffb7\044\uffb7\045\uffb7\046\uffb7\047\uffb7\052" +
    "\uffb7\053\uffb7\055\uffb7\057\uffb7\060\uffb7\064\uffb7\066\uffb7" +
    "\001\002\000\034\011\060\014\062\015\053\026\030\027" +
    "\047\033\052\041\056\061\027\065\051\066\033\067\061" +
    "\070\035\071\050\001\002\000\010\003\352\025\072\040" +
    "\351\001\002\000\004\055\353\001\002\000\004\034\uffab" +
    "\001\002\000\004\040\354\001\002\000\004\034\uffac\001" +
    "\002\000\004\033\356\001\002\000\010\034\uffad\054\333" +
    "\056\uffad\001\002\000\006\034\361\056\343\001\002\000" +
    "\004\034\362\001\002\000\052\003\uffb2\004\uffb2\005\uffb2" +
    "\006\uffb2\011\uffb2\027\uffb2\033\uffb2\034\uffb2\041\uffb2\044" +
    "\uffb2\045\uffb2\046\uffb2\047\uffb2\052\uffb2\053\uffb2\055\uffb2" +
    "\057\uffb2\060\uffb2\064\uffb2\066\uffb2\001\002\000\052\003" +
    "\uffb3\004\uffb3\005\uffb3\006\uffb3\011\uffb3\027\uffb3\033\uffb3" +
    "\034\uffb3\041\uffb3\044\uffb3\045\uffb3\046\uffb3\047\uffb3\052" +
    "\uffb3\053\uffb3\055\uffb3\057\uffb3\060\uffb3\064\uffb3\066\uffb3" +
    "\001\002\000\006\034\uffdf\055\uffdf\001\002\000\064\002" +
    "\uffc3\003\uffc3\004\uffc3\005\uffc3\006\uffc3\011\uffc3\027\uffc3" +
    "\033\uffc3\034\uffc3\041\uffc3\044\uffc3\045\uffc3\046\uffc3\047" +
    "\uffc3\050\uffc3\051\uffc3\052\uffc3\053\uffc3\055\uffc3\057\uffc3" +
    "\060\uffc3\062\uffc3\063\uffc3\064\uffc3\066\uffc3\001\002\000" +
    "\036\003\367\011\060\014\062\015\053\026\030\027\047" +
    "\033\052\041\056\061\027\065\051\066\033\067\061\070" +
    "\035\071\050\001\002\000\006\025\072\030\372\001\002" +
    "\000\004\030\370\001\002\000\004\033\235\001\002\000" +
    "\052\003\uffc0\004\uffc0\005\uffc0\006\uffc0\011\uffc0\027\uffc0" +
    "\033\uffc0\034\uffc0\041\uffc0\044\uffc0\045\uffc0\046\uffc0\047" +
    "\uffc0\052\uffc0\053\uffc0\055\uffc0\057\uffc0\060\uffc0\064\uffc0" +
    "\066\uffc0\001\002\000\004\033\235\001\002\000\054\003" +
    "\uffc2\004\uffc2\005\uffc2\006\uffc2\011\uffc2\027\uffc2\033\uffc2" +
    "\034\uffc2\041\uffc2\044\uffc2\045\uffc2\046\uffc2\047\uffc2\050" +
    "\374\052\uffc2\053\uffc2\055\uffc2\057\uffc2\060\uffc2\064\uffc2" +
    "\066\uffc2\001\002\000\004\033\235\001\002\000\052\003" +
    "\uffc1\004\uffc1\005\uffc1\006\uffc1\011\uffc1\027\uffc1\033\uffc1" +
    "\034\uffc1\041\uffc1\044\uffc1\045\uffc1\046\uffc1\047\uffc1\052" +
    "\uffc1\053\uffc1\055\uffc1\057\uffc1\060\uffc1\064\uffc1\066\uffc1" +
    "\001\002\000\036\003\u0100\011\060\014\062\015\053\026" +
    "\030\027\047\033\052\041\056\061\027\065\051\066\033" +
    "\067\061\070\035\071\050\001\002\000\006\025\072\030" +
    "\u0113\001\002\000\004\030\u0101\001\002\000\004\033\u0102" +
    "\001\002\000\010\034\uffb0\054\u0104\056\uffb0\001\002\000" +
    "\006\034\u010d\056\u010b\001\002\000\034\011\060\014\062" +
    "\015\053\026\030\027\047\033\052\041\056\061\027\065" +
    "\051\066\033\067\061\070\035\071\050\001\002\000\006" +
    "\025\072\043\u0106\001\002\000\050\003\253\004\021\005" +
    "\022\006\011\011\060\027\047\033\235\041\056\044\236" +
    "\045\257\046\261\047\244\052\243\053\247\055\uffdd\057" +
    "\241\060\240\064\013\066\242\001\002\000\004\055\u0108" +
    "\001\002\000\004\040\u0109\001\002\000\010\034\uffb0\054" +
    "\u0104\056\uffb0\001\002\000\006\034\uffb1\056\uffb1\001\002" +
    "\000\004\043\u010f\001\002\000\004\034\u010e\001\002\000" +
    "\052\003\uffb5\004\uffb5\005\uffb5\006\uffb5\011\uffb5\027\uffb5" +
    "\033\uffb5\034\uffb5\041\uffb5\044\uffb5\045\uffb5\046\uffb5\047" +
    "\uffb5\052\uffb5\053\uffb5\055\uffb5\057\uffb5\060\uffb5\064\uffb5" +
    "\066\uffb5\001\002\000\052\003\uffb4\004\uffb4\005\uffb4\006" +
    "\uffb4\011\uffb4\027\uffb4\033\uffb4\034\uffb4\041\uffb4\044\uffb4" +
    "\045\uffb4\046\uffb4\047\uffb4\052\uffb4\053\uffb4\055\uffb4\057" +
    "\uffb4\060\uffb4\064\uffb4\066\uffb4\001\002\000\050\003\253" +
    "\004\021\005\022\006\011\011\060\027\047\033\235\041" +
    "\056\044\236\045\257\046\261\047\244\052\243\053\247" +
    "\055\uffdd\057\241\060\240\064\013\066\242\001\002\000" +
    "\004\055\u0111\001\002\000\004\040\u0112\001\002\000\004" +
    "\034\uffaf\001\002\000\004\033\u0114\001\002\000\010\034" +
    "\uffb0\054\u0104\056\uffb0\001\002\000\006\034\u0117\056\u010b" +
    "\001\002\000\004\034\u0118\001\002\000\052\003\uffb8\004" +
    "\uffb8\005\uffb8\006\uffb8\011\uffb8\027\uffb8\033\uffb8\034\uffb8" +
    "\041\uffb8\044\uffb8\045\uffb8\046\uffb8\047\uffb8\052\uffb8\053" +
    "\uffb8\055\uffb8\057\uffb8\060\uffb8\064\uffb8\066\uffb8\001\002" +
    "\000\052\003\uffb9\004\uffb9\005\uffb9\006\uffb9\011\uffb9\027" +
    "\uffb9\033\uffb9\034\uffb9\041\uffb9\044\uffb9\045\uffb9\046\uffb9" +
    "\047\uffb9\052\uffb9\053\uffb9\055\uffb9\057\uffb9\060\uffb9\064" +
    "\uffb9\066\uffb9\001\002\000\052\003\uffd0\004\uffd0\005\uffd0" +
    "\006\uffd0\011\uffd0\027\uffd0\033\uffd0\034\uffd0\041\uffd0\044" +
    "\uffd0\045\uffd0\046\uffd0\047\uffd0\052\uffd0\053\uffd0\055\uffd0" +
    "\057\uffd0\060\uffd0\064\uffd0\066\uffd0\001\002\000\010\003" +
    "\u011c\025\072\040\u011b\001\002\000\052\003\uffd1\004\uffd1" +
    "\005\uffd1\006\uffd1\011\uffd1\027\uffd1\033\uffd1\034\uffd1\041" +
    "\uffd1\044\uffd1\045\uffd1\046\uffd1\047\uffd1\052\uffd1\053\uffd1" +
    "\055\uffd1\057\uffd1\060\uffd1\064\uffd1\066\uffd1\001\002\000" +
    "\052\003\uffcf\004\uffcf\005\uffcf\006\uffcf\011\uffcf\027\uffcf" +
    "\033\uffcf\034\uffcf\041\uffcf\044\uffcf\045\uffcf\046\uffcf\047" +
    "\uffcf\052\uffcf\053\uffcf\055\uffcf\057\uffcf\060\uffcf\064\uffcf" +
    "\066\uffcf\001\002\000\036\003\u011f\011\060\014\062\015" +
    "\053\026\030\027\047\033\052\041\056\061\027\065\051" +
    "\066\033\067\061\070\035\071\050\001\002\000\006\025" +
    "\072\030\u0122\001\002\000\004\030\u0120\001\002\000\004" +
    "\040\u0121\001\002\000\052\003\uffd4\004\uffd4\005\uffd4\006" +
    "\uffd4\011\uffd4\027\uffd4\033\uffd4\034\uffd4\041\uffd4\044\uffd4" +
    "\045\uffd4\046\uffd4\047\uffd4\052\uffd4\053\uffd4\055\uffd4\057" +
    "\uffd4\060\uffd4\064\uffd4\066\uffd4\001\002\000\006\003\u0124" +
    "\040\u0123\001\002\000\052\003\uffd6\004\uffd6\005\uffd6\006" +
    "\uffd6\011\uffd6\027\uffd6\033\uffd6\034\uffd6\041\uffd6\044\uffd6" +
    "\045\uffd6\046\uffd6\047\uffd6\052\uffd6\053\uffd6\055\uffd6\057" +
    "\uffd6\060\uffd6\064\uffd6\066\uffd6\001\002\000\052\003\uffd5" +
    "\004\uffd5\005\uffd5\006\uffd5\011\uffd5\027\uffd5\033\uffd5\034" +
    "\uffd5\041\uffd5\044\uffd5\045\uffd5\046\uffd5\047\uffd5\052\uffd5" +
    "\053\uffd5\055\uffd5\057\uffd5\060\uffd5\064\uffd5\066\uffd5\001" +
    "\002\000\036\003\u0127\011\060\014\062\015\053\026\030" +
    "\027\047\033\052\041\056\061\027\065\051\066\033\067" +
    "\061\070\035\071\050\001\002\000\006\025\072\030\u012a" +
    "\001\002\000\004\030\u0128\001\002\000\004\033\235\001" +
    "\002\000\052\003\uffbc\004\uffbc\005\uffbc\006\uffbc\011\uffbc" +
    "\027\uffbc\033\uffbc\034\uffbc\041\uffbc\044\uffbc\045\uffbc\046" +
    "\uffbc\047\uffbc\052\uffbc\053\uffbc\055\uffbc\057\uffbc\060\uffbc" +
    "\064\uffbc\066\uffbc\001\002\000\004\033\235\001\002\000" +
    "\052\003\uffbf\004\uffbf\005\uffbf\006\uffbf\011\uffbf\027\uffbf" +
    "\033\uffbf\034\uffbf\041\uffbf\044\uffbf\045\uffbf\046\uffbf\047" +
    "\uffbf\052\uffbf\053\uffbf\055\uffbf\057\uffbf\060\uffbf\064\uffbf" +
    "\066\uffbf\001\002\000\004\033\235\001\002\000\006\011" +
    "\126\033\235\001\002\000\024\002\uffea\004\uffea\005\uffea" +
    "\006\uffea\051\uffea\062\uffea\063\uffea\064\uffea\066\uffea\001" +
    "\002\000\024\002\uffe8\004\uffe8\005\uffe8\006\uffe8\051\uffe8" +
    "\062\uffe8\063\uffe8\064\uffe8\066\uffe8\001\002\000\004\002" +
    "\ufffe\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u012e\000\022\002\007\003\015\030\004\031\017\032" +
    "\003\033\013\034\016\035\011\001\001\000\020\003\015" +
    "\030\u012f\031\017\032\003\033\013\034\016\035\011\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\003\015\030" +
    "\200\031\017\032\003\033\013\034\016\035\011\001\001" +
    "\000\002\001\001\000\020\003\015\030\171\031\017\032" +
    "\003\033\013\034\016\035\011\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\003\015\030\154\031\017\032" +
    "\003\033\013\034\016\035\011\001\001\000\020\003\015" +
    "\030\153\031\017\032\003\033\013\034\016\035\011\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\040\004\043\005" +
    "\042\006\041\007\040\010\037\011\036\012\033\013\031" +
    "\014\030\015\045\016\044\017\035\020\054\021\056\027" +
    "\053\001\001\000\002\001\001\000\022\012\146\013\031" +
    "\014\030\015\045\016\044\020\054\021\056\027\053\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\026\113\001\001\000\004\025\107\001\001\000\004" +
    "\024\102\001\001\000\004\023\076\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\040\004\126\005\042\006\041\007\040\010\037\011" +
    "\036\012\033\013\031\014\030\015\045\016\044\017\035" +
    "\020\054\021\056\027\053\001\001\000\002\001\001\000" +
    "\004\003\124\001\001\000\040\004\066\005\042\006\041" +
    "\007\040\010\037\011\036\012\033\013\031\014\030\015" +
    "\045\016\044\017\035\020\054\021\056\027\053\001\001" +
    "\000\002\001\001\000\020\013\065\014\030\015\045\016" +
    "\044\020\054\021\056\027\053\001\001\000\002\001\001" +
    "\000\006\015\064\016\044\001\001\000\002\001\001\000" +
    "\006\015\063\016\044\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\022\070\001\001\000\040" +
    "\004\121\005\042\006\041\007\040\010\037\011\036\012" +
    "\033\013\031\014\030\015\045\016\044\017\035\020\054" +
    "\021\056\027\053\001\001\000\002\001\001\000\036\005" +
    "\072\006\041\007\040\010\037\011\036\012\033\013\031" +
    "\014\030\015\045\016\044\017\035\020\054\021\056\027" +
    "\053\001\001\000\002\001\001\000\034\006\074\007\040" +
    "\010\037\011\036\012\033\013\031\014\030\015\045\016" +
    "\044\017\035\020\054\021\056\027\053\001\001\000\004" +
    "\023\076\001\001\000\002\001\001\000\032\007\100\010" +
    "\037\011\036\012\033\013\031\014\030\015\045\016\044" +
    "\017\035\020\054\021\056\027\053\001\001\000\002\001" +
    "\001\000\004\024\102\001\001\000\002\001\001\000\026" +
    "\010\106\011\036\012\033\013\031\014\030\015\045\016" +
    "\044\020\054\021\056\027\053\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\025\107\001" +
    "\001\000\024\011\112\012\033\013\031\014\030\015\045" +
    "\016\044\020\054\021\056\027\053\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\026\113\001\001\000\022" +
    "\012\117\013\031\014\030\015\045\016\044\020\054\021" +
    "\056\027\053\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\022\122\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\040\004\132\005\042" +
    "\006\041\007\040\010\037\011\036\012\033\013\031\014" +
    "\030\015\045\016\044\017\035\020\054\021\056\027\053" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\044\004\141" +
    "\005\042\006\041\007\040\010\037\011\036\012\033\013" +
    "\031\014\030\015\045\016\044\017\035\020\054\021\056" +
    "\027\053\047\140\050\142\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\042\004\141\005\042" +
    "\006\041\007\040\010\037\011\036\012\033\013\031\014" +
    "\030\015\045\016\044\017\035\020\054\021\056\027\053" +
    "\050\144\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\040\004\162\005\042\006\041\007" +
    "\040\010\037\011\036\012\033\013\031\014\030\015\045" +
    "\016\044\017\035\020\054\021\056\027\053\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\003\166\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\003\173\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\003\015\031\204\037" +
    "\205\001\001\000\010\003\015\031\204\037\211\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\040\216\041\213" +
    "\042\214\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\040\216\041\220" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\003" +
    "\225\001\001\000\004\003\226\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\003\u012c\001\001\000\004\003\232\001\001\000\004" +
    "\043\233\001\001\000\002\001\001\000\042\003\015\015" +
    "\250\016\044\021\257\031\253\036\261\043\236\044\244" +
    "\045\247\046\255\051\251\052\264\053\254\054\263\055" +
    "\262\056\245\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\040\004\u0119\005\042\006\041\007" +
    "\040\010\037\011\036\012\033\013\031\014\030\015\045" +
    "\016\044\017\035\020\054\021\056\027\053\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\042\003\015\015\250\016\044\021\257\031" +
    "\253\036\261\043\236\044\362\045\247\046\255\051\251" +
    "\052\264\053\254\054\263\055\262\056\245\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\025\314\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\042\003" +
    "\015\015\250\016\044\021\257\031\253\036\261\043\236" +
    "\044\265\045\247\046\255\051\251\052\264\053\254\054" +
    "\263\055\262\056\245\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\040\004\267\005\042\006" +
    "\041\007\040\010\037\011\036\012\033\013\031\014\030" +
    "\015\045\016\044\017\035\020\054\021\056\027\053\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\043\272" +
    "\001\001\000\002\001\001\000\004\043\274\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\003\015\031\301\001\001\000\002\001\001\000\040\004" +
    "\302\005\042\006\041\007\040\010\037\011\036\012\033" +
    "\013\031\014\030\015\045\016\044\017\035\020\054\021" +
    "\056\027\053\001\001\000\002\001\001\000\006\015\304" +
    "\016\044\001\001\000\002\001\001\000\040\004\306\005" +
    "\042\006\041\007\040\010\037\011\036\012\033\013\031" +
    "\014\030\015\045\016\044\017\035\020\054\021\056\027" +
    "\053\001\001\000\002\001\001\000\004\043\310\001\001" +
    "\000\002\001\001\000\004\043\312\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\040\004\316" +
    "\005\042\006\041\007\040\010\037\011\036\012\033\013" +
    "\031\014\030\015\045\016\044\017\035\020\054\021\056" +
    "\027\053\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\040\004\322\005\042\006\041\007\040" +
    "\010\037\011\036\012\033\013\031\014\030\015\045\016" +
    "\044\017\035\020\054\021\056\027\053\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\015\326\016\044\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\061\331\001\001\000\004\062\343\001\001\000" +
    "\040\004\333\005\042\006\041\007\040\010\037\011\036" +
    "\012\033\013\031\014\030\015\045\016\044\017\035\020" +
    "\054\021\056\027\053\001\001\000\002\001\001\000\040" +
    "\004\335\005\042\006\041\007\040\010\037\011\036\012" +
    "\033\013\031\014\030\015\045\016\044\017\035\020\054" +
    "\021\056\027\053\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\061\341\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\040\004\347\005\042\006\041" +
    "\007\040\010\037\011\036\012\033\013\031\014\030\015" +
    "\045\016\044\017\035\020\054\021\056\027\053\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\061\356\001\001\000\004\062\357\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\040\004\365\005\042\006\041\007" +
    "\040\010\037\011\036\012\033\013\031\014\030\015\045" +
    "\016\044\017\035\020\054\021\056\027\053\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\043\370\001\001" +
    "\000\002\001\001\000\004\043\372\001\001\000\002\001" +
    "\001\000\004\043\374\001\001\000\002\001\001\000\040" +
    "\004\376\005\042\006\041\007\040\010\037\011\036\012" +
    "\033\013\031\014\030\015\045\016\044\017\035\020\054" +
    "\021\056\027\053\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\057\u0102\001\001\000\004" +
    "\060\u010b\001\001\000\040\004\u0104\005\042\006\041\007" +
    "\040\010\037\011\036\012\033\013\031\014\030\015\045" +
    "\016\044\017\035\020\054\021\056\027\053\001\001\000" +
    "\002\001\001\000\042\003\015\015\250\016\044\021\257" +
    "\031\253\036\261\043\236\044\u0106\045\247\046\255\051" +
    "\251\052\264\053\254\054\263\055\262\056\245\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\057\u0109\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\042\003\015\015" +
    "\250\016\044\021\257\031\253\036\261\043\236\044\u010f" +
    "\045\247\046\255\051\251\052\264\053\254\054\263\055" +
    "\262\056\245\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\057\u0114\001" +
    "\001\000\004\060\u0115\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\040\004\u011d" +
    "\005\042\006\041\007\040\010\037\011\036\012\033\013" +
    "\031\014\030\015\045\016\044\017\035\020\054\021\056" +
    "\027\053\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\040\004\u0125\005\042\006" +
    "\041\007\040\010\037\011\036\012\033\013\031\014\030" +
    "\015\045\016\044\017\035\020\054\021\056\027\053\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\043\u0128" +
    "\001\001\000\002\001\001\000\004\043\u012a\001\001\000" +
    "\002\001\001\000\004\043\u012e\001\001\000\004\043\u012d" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$AnalizadorSintacticoTiny$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$AnalizadorSintacticoTiny$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$AnalizadorSintacticoTiny$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 
   errores = new GestionErroresTiny();
   AnalizadorLexicoTiny alex = (AnalizadorLexicoTiny)getScanner();
   alex.fijaGestionErrores(errores);

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return getScanner().next_token(); 
    }

 
   private GestionErroresTiny errores;
   public void syntax_error(Symbol unidadLexica) {
     errores.errorSintactico((UnidadLexica)unidadLexica);
   }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$AnalizadorSintacticoTiny$actions {
  private final AnalizadorSintacticoTiny parser;

  /** Constructor */
  CUP$AnalizadorSintacticoTiny$actions(AnalizadorSintacticoTiny parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintacticoTiny$do_action_part00000000(
    int                        CUP$AnalizadorSintacticoTiny$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintacticoTiny$parser,
    java.util.Stack            CUP$AnalizadorSintacticoTiny$stack,
    int                        CUP$AnalizadorSintacticoTiny$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$AnalizadorSintacticoTiny$result;

      /* select the action based on the action number */
      switch (CUP$AnalizadorSintacticoTiny$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // S ::= DECLARATIONS 
            {
              Object RESULT =null;
		DefinitionList declarations = (DefinitionList)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = new Program(declarations);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("S",0, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= S EOF 
            {
              Object RESULT =null;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		RESULT = start_val;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("$START",0, RESULT);
            }
          /* ACCEPT */
          CUP$AnalizadorSintacticoTiny$parser.done_parsing();
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // DECLARATIONS ::= DECLARATION DECLARATIONS 
            {
              DefinitionList RESULT =null;
		IDeclaration d = (IDeclaration)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		DefinitionList list = (DefinitionList)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		list.addVar(d); RESULT = list; d.setGlobal();
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("DECLARATIONS",22, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // DECLARATIONS ::= CONSTVAR DECLARATIONS 
            {
              DefinitionList RESULT =null;
		DConst c = (DConst)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		DefinitionList list = (DefinitionList)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		list.addConst(c); RESULT = list;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("DECLARATIONS",22, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // DECLARATIONS ::= STRUCTDEC DECLARATIONS 
            {
              DefinitionList RESULT =null;
		DStruct s = (DStruct)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		DefinitionList list = (DefinitionList)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		list.addStruct(s); RESULT = list;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("DECLARATIONS",22, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // DECLARATIONS ::= TYPEDEFDEC DECLARATIONS 
            {
              DefinitionList RESULT =null;
		DTypedef t = (DTypedef)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		DefinitionList list = (DefinitionList)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		list.addTypedef(t); RESULT = list;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("DECLARATIONS",22, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // DECLARATIONS ::= FUNCDEC DECLARATIONS 
            {
              DefinitionList RESULT =null;
		DFunction f = (DFunction)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		DefinitionList list = (DefinitionList)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		list.addFunc(f); RESULT = list;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("DECLARATIONS",22, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // DECLARATIONS ::= 
            {
              DefinitionList RESULT =null;
		RESULT = new DefinitionList();
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("DECLARATIONS",22, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // DECLARATION ::= TYPE IDEN PUNTOYCOMA 
            {
              IDeclaration RESULT =null;
		T t = (T)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		TokenValue name = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		IDeclaration var = new IDeclaration(t, name.lexema); RESULT = var;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("DECLARATION",23, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // DECLARATION ::= TYPE IDEN IGUAL E0 PUNTOYCOMA 
            {
              IDeclaration RESULT =null;
		T t = (T)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-4)).value;
		TokenValue name = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)).value;
		E e = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		IDeclaration var = new IDeclaration(t, name.lexema, e); RESULT = var;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("DECLARATION",23, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // DECLARATION ::= TYPE IDEN error 
            {
              IDeclaration RESULT =null;
		System.out.println("Error in declaration. It could be ; missing."); RESULT = null;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("DECLARATION",23, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // DECLARATION ::= TYPE error 
            {
              IDeclaration RESULT =null;
		System.out.println("Error. Missing id in declaration."); RESULT = null;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("DECLARATION",23, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // ASIG ::= ACCESS0 IGUAL E0 PUNTOYCOMA 
            {
              IAssignation RESULT =null;
		E a = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)).value;
		E e = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		RESULT = new IAssignation((A) a, e);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ASIG",28, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // ASIG ::= ACCESS0 OP2 IGUAL E0 PUNTOYCOMA 
            {
              IAssignation RESULT =null;
		E ac = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-4)).value;
		KindE o = (KindE)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)).value;
		E ex = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		RESULT = new IAssignation((A) ac, new EBin((A) ac, ex, o, new TBasics(KindT.INT)));
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ASIG",28, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // ASIG ::= ACCESS0 IGUAL E0 error 
            {
              IAssignation RESULT =null;
		System.out.println("Error. Missing ;"); RESULT = null;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ASIG",28, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // CONSTVAR ::= CONST TYPEINT IDEN IGUAL E0 PUNTOYCOMA 
            {
              DConst RESULT =null;
		TokenValue name = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)).value;
		E e = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		RESULT = new DConst(new TBasics(KindT.INT), name.lexema, e);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CONSTVAR",24, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // CONSTVAR ::= CONST TYPEINT IDEN IGUAL E0 error 
            {
              DConst RESULT =null;
		System.out.println("Error. Missing ;"); RESULT = null;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CONSTVAR",24, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // STRUCTDEC ::= STRUCT IDEN LLAP FIELDS LLCIERRE PUNTOYCOMA 
            {
              DStruct RESULT =null;
		TokenValue name = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-4)).value;
		ArrayList<IDeclaration> c = (ArrayList<IDeclaration>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		RESULT = new DStruct(name.lexema, c);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("STRUCTDEC",25, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // STRUCTDEC ::= STRUCT IDEN LLAP FIELDS LLCIERRE error 
            {
              DStruct RESULT =null;
		TokenValue name = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-4)).value;
		ArrayList<IDeclaration> c = (ArrayList<IDeclaration>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		System.out.println("Error. Missing ;"); RESULT = null;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("STRUCTDEC",25, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // FIELDS ::= DECLARATION FIELDS 
            {
              ArrayList<IDeclaration> RESULT =null;
		IDeclaration d = (IDeclaration)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		ArrayList<IDeclaration> list = (ArrayList<IDeclaration>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		list.add(0, d); RESULT = list;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("FIELDS",29, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // FIELDS ::= DECLARATION 
            {
              ArrayList<IDeclaration> RESULT =null;
		IDeclaration d = (IDeclaration)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		ArrayList<IDeclaration> list = new ArrayList<IDeclaration>(); list.add(0, d); RESULT = list;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("FIELDS",29, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // TYPEDEFDEC ::= TYPEDEF IDEN IGUAL TYPE PUNTOYCOMA 
            {
              DTypedef RESULT =null;
		TokenValue name = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)).value;
		T t = (T)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		RESULT = new DTypedef(name.lexema, t);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TYPEDEFDEC",27, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // TYPEDEFDEC ::= TYPEDEF IDEN IGUAL TYPE error 
            {
              DTypedef RESULT =null;
		System.out.println("Error. Missing ;"); RESULT = null;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TYPEDEFDEC",27, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // FUNCDEC ::= IDEN PAP PARAMS PCIERRE FLECHA TYPE BINST 
            {
              DFunction RESULT =null;
		TokenValue name = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-6)).value;
		ArrayList<Parameter> p = (ArrayList<Parameter>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-4)).value;
		T tReturn = (T)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		ArrayList<I> i = (ArrayList<I>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = new DFunction(name.lexema,i,p,tReturn);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("FUNCDEC",26, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // FUNCDEC ::= IDEN PAP PARAMS PCIERRE error TYPE BINST 
            {
              DFunction RESULT =null;
		TokenValue n = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-6)).value;
		System.out.println("Missing -> in " + n.lexema + " function declaration.");RESULT = null;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("FUNCDEC",26, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // FUNCDEC ::= IDEN PAP PARAMS PCIERRE FLECHA error BINST 
            {
              DFunction RESULT =null;
		TokenValue n = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-6)).value;
		System.out.println("Missing return type in " + n.lexema + " function declaration.");RESULT = null;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("FUNCDEC",26, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // PARAMS ::= PARAMLIST 
            {
              ArrayList<Parameter> RESULT =null;
		ArrayList<Parameter> list = (ArrayList<Parameter>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = list;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("PARAMS",32, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // PARAMS ::= 
            {
              ArrayList<Parameter> RESULT =null;
		RESULT = new ArrayList<Parameter>();
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("PARAMS",32, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // PARAMLIST ::= PARAM COMA PARAMLIST 
            {
              ArrayList<Parameter> RESULT =null;
		Parameter p = (Parameter)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		ArrayList<Parameter> l = (ArrayList<Parameter>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		l.add(0, p); RESULT = l;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("PARAMLIST",31, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // PARAMLIST ::= PARAM 
            {
              ArrayList<Parameter> RESULT =null;
		Parameter p = (Parameter)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		ArrayList<Parameter> l = new ArrayList<Parameter>(); l.add(0, p); RESULT = l;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("PARAMLIST",31, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // PARAM ::= IDEN DOSPUNTOS TYPE 
            {
              Parameter RESULT =null;
		TokenValue name = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		T t = (T)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = new Parameter(name.lexema, t, false);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("PARAM",30, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // PARAM ::= IDEN DOSPUNTOS AMPERSAND TYPE 
            {
              Parameter RESULT =null;
		TokenValue name = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)).value;
		T t = (T)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = new Parameter(name.lexema, t, true);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("PARAM",30, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // PARAM ::= IDEN DOSPUNTOS error 
            {
              Parameter RESULT =null;
		TokenValue n = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		System.out.println("Missing type in parameter " + n.lexema + " function declaration.");RESULT = null;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("PARAM",30, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // PARAM ::= IDEN error 
            {
              Parameter RESULT =null;
		System.out.println("Error. Incorrect parameter.");RESULT = null;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("PARAM",30, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // INSTLIST ::= INST INSTLIST 
            {
              ArrayList<I> RESULT =null;
		I i = (I)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		ArrayList<I> list = (ArrayList<I>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		list.add(0,i); RESULT = list;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INSTLIST",34, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // INSTLIST ::= BLOCK INSTLIST 
            {
              ArrayList<I> RESULT =null;
		IBlock b = (IBlock)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		ArrayList<I> list = (ArrayList<I>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		list.add(0, b); RESULT = list;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INSTLIST",34, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // INSTLIST ::= 
            {
              ArrayList<I> RESULT =null;
		RESULT = new ArrayList<I>();
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INSTLIST",34, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // INST ::= DECLARATION 
            {
              I RESULT =null;
		IDeclaration d = (IDeclaration)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = d;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INST",44, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // INST ::= ASIG 
            {
              I RESULT =null;
		IAssignation a = (IAssignation)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = a;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INST",44, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // INST ::= SHOWFUNC 
            {
              I RESULT =null;
		IShow s = (IShow)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = s;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INST",44, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // INST ::= RETURNFUNC 
            {
              I RESULT =null;
		IReturn r = (IReturn)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = r; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INST",44, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // INST ::= INSTFUNCALL 
            {
              I RESULT =null;
		IFunction l = (IFunction)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = l;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INST",44, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // INST ::= error PUNTOYCOMA 
            {
              I RESULT =null;
		System.out.println("Error. Instruction not recognized."); RESULT = null;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INST",44, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // SHOWFUNC ::= SHOW PAP E0 PCIERRE PUNTOYCOMA 
            {
              IShow RESULT =null;
		E e = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		RESULT = new IShow(e);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("SHOWFUNC",35, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // SHOWFUNC ::= SHOW PAP E0 PCIERRE error 
            {
              IShow RESULT =null;
		System.out.println("Error. Missing ;"); RESULT = null;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("SHOWFUNC",35, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // SHOWFUNC ::= SHOW PAP error PCIERRE PUNTOYCOMA 
            {
              IShow RESULT =null;
		System.out.println("Error in show function. Incorrect parameter."); RESULT = null;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("SHOWFUNC",35, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // READFUNC ::= READ PAP PCIERRE 
            {
              ERead RESULT =null;
		RESULT = new ERead();
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("READFUNC",14, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // READFUNC ::= READ PAP error PCIERRE 
            {
              ERead RESULT =null;
		System.out.println("Error in read function. Read shouldn't receive parameters."); RESULT = null;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("READFUNC",14, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // RETURNFUNC ::= RETURN E0 PUNTOYCOMA 
            {
              IReturn RESULT =null;
		E e = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		RESULT = new IReturn(e);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("RETURNFUNC",36, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // RETURNFUNC ::= RETURN PUNTOYCOMA 
            {
              IReturn RESULT =null;
		RESULT = new IReturn();
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("RETURNFUNC",36, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // RETURNFUNC ::= RETURN E0 error 
            {
              IReturn RESULT =null;
		System.out.println("Error in return."); RESULT = null;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("RETURNFUNC",36, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // INSTFUNCALL ::= CALLFUNC PUNTOYCOMA 
            {
              IFunction RESULT =null;
		EFunction f = (EFunction)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		RESULT = new IFunction(f);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INSTFUNCALL",39, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // INSTFUNCALL ::= CALLFUNC error 
            {
              IFunction RESULT =null;
		EFunction f = (EFunction)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		System.out.println("Error. Missing ;"); RESULT = null;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INSTFUNCALL",39, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // CALLFUNC ::= IDEN PAP ARGS PCIERRE 
            {
              EFunction RESULT =null;
		TokenValue name = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)).value;
		ArrayList<E> a = (ArrayList<E>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		RESULT = new EFunction(name.lexema, a);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CALLFUNC",15, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // ARGS ::= ARGLIST 
            {
              ArrayList<E> RESULT =null;
		ArrayList<E> l = (ArrayList<E>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = l;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ARGS",37, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // ARGS ::= 
            {
              ArrayList<E> RESULT =null;
		RESULT = new ArrayList<E>();
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ARGS",37, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // ARGLIST ::= E0 COMA ARGLIST 
            {
              ArrayList<E> RESULT =null;
		E e = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		ArrayList<E> l = (ArrayList<E>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		l.add(0, e); RESULT = l;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ARGLIST",38, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // ARGLIST ::= E0 
            {
              ArrayList<E> RESULT =null;
		E e = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		ArrayList<E> l = new ArrayList<E>(); l.add(0, e); RESULT = l;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ARGLIST",38, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // BLOCK ::= BINST 
            {
              IBlock RESULT =null;
		ArrayList<I> list = (ArrayList<I>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = new IBlock(list);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("BLOCK",43, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // BLOCK ::= CONDITIONALS 
            {
              IBlock RESULT =null;
		IIfElse c = (IIfElse)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = c;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("BLOCK",43, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // BLOCK ::= LOOPS 
            {
              IBlock RESULT =null;
		IBlock b = (IBlock)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = b;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("BLOCK",43, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // BLOCK ::= SWITCHES 
            {
              IBlock RESULT =null;
		IBlock s = (IBlock)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = s;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("BLOCK",43, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // BINST ::= LLAP INSTLIST LLCIERRE 
            {
              ArrayList<I> RESULT =null;
		ArrayList<I> list = (ArrayList<I>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		RESULT = list;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("BINST",33, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // CONDITIONALS ::= IF PAP E0 PCIERRE BINST 
            {
              IIfElse RESULT =null;
		E e = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		ArrayList<I> list = (ArrayList<I>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = new IIfElse(e, list);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CONDITIONALS",40, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // CONDITIONALS ::= IF PAP E0 PCIERRE BINST ELSE BINST 
            {
              IIfElse RESULT =null;
		E e = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-4)).value;
		ArrayList<I> listIf = (ArrayList<I>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		ArrayList<I> listElse = (ArrayList<I>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = new IIfElse(e, listIf, listElse);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CONDITIONALS",40, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // CONDITIONALS ::= IF PAP error PCIERRE BINST 
            {
              IIfElse RESULT =null;
		ArrayList<I> list = (ArrayList<I>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		System.out.println("Error in if condition."); RESULT = null;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CONDITIONALS",40, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // LOOPS ::= WHILE PAP E0 PCIERRE BINST 
            {
              IBlock RESULT =null;
		E e = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		ArrayList<I> list = (ArrayList<I>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = new IWhile(e, list);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("LOOPS",41, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // LOOPS ::= FOR PAP DECLARATION E0 PUNTOYCOMA ACCESS0 IGUAL E0 PCIERRE BINST 
            {
              IBlock RESULT =null;
		IDeclaration d = (IDeclaration)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-7)).value;
		E exp = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-6)).value;
		E a = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-4)).value;
		E exp2 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		ArrayList<I> list = (ArrayList<I>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = new IFor(d, exp, new IAssignation((A) a, exp2), list);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("LOOPS",41, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // LOOPS ::= REPEAT PAP E0 PCIERRE BINST 
            {
              IBlock RESULT =null;
		E e = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		ArrayList<I> list = (ArrayList<I>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = new IRepeat(e, list);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("LOOPS",41, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // LOOPS ::= WHILE PAP error PCIERRE BINST 
            {
              IBlock RESULT =null;
		System.out.println("Error in while condition."); RESULT = null;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("LOOPS",41, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // LOOPS ::= FOR PAP error PCIERRE BINST 
            {
              IBlock RESULT =null;
		ArrayList<I> list = (ArrayList<I>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		System.out.println("Error in for condition."); RESULT = null;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("LOOPS",41, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // LOOPS ::= REPEAT PAP error PCIERRE BINST 
            {
              IBlock RESULT =null;
		ArrayList<I> list = (ArrayList<I>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		System.out.println("Error in repeat condition."); RESULT = null;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("LOOPS",41, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // SWITCHES ::= SWITCH PAP E0 PCIERRE LLAP CASEEXP DEFAULTEXP LLCIERRE 
            {
              IBlock RESULT =null;
		E e = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-5)).value;
		ArrayList<SwitchInstruction> c = (ArrayList<SwitchInstruction>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		SwitchInstruction d = (SwitchInstruction)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		RESULT = new ISwitch(e, c, d);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("SWITCHES",42, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // SWITCHES ::= SWITCH PAP E0 PCIERRE LLAP CASEEXP LLCIERRE 
            {
              IBlock RESULT =null;
		E e = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-4)).value;
		ArrayList<SwitchInstruction> c = (ArrayList<SwitchInstruction>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		RESULT = new ISwitch(e, c);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("SWITCHES",42, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // SWITCHES ::= VALUEFOR PAP ACCESS0 PCIERRE LLAP CASEEXPVF DEFAULTEXPVF LLCIERRE 
            {
              IBlock RESULT =null;
		E a = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-5)).value;
		ArrayList<ValueforInstruction> c = (ArrayList<ValueforInstruction>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		ValueforInstruction d = (ValueforInstruction)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		RESULT = new IValuefor((A) a, c, d);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("SWITCHES",42, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // SWITCHES ::= VALUEFOR PAP ACCESS0 PCIERRE LLAP CASEEXPVF LLCIERRE 
            {
              IBlock RESULT =null;
		E a = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-4)).value;
		ArrayList<ValueforInstruction> c = (ArrayList<ValueforInstruction>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		RESULT = new IValuefor((A) a, c);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("SWITCHES",42, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // SWITCHES ::= SWITCH PAP error PCIERRE LLAP CASEEXP LLCIERRE 
            {
              IBlock RESULT =null;
		ArrayList<SwitchInstruction> c = (ArrayList<SwitchInstruction>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		System.out.println("Error in switch condition."); RESULT = null;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("SWITCHES",42, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // SWITCHES ::= SWITCH PAP error PCIERRE LLAP CASEEXP DEFAULTEXP LLCIERRE 
            {
              IBlock RESULT =null;
		ArrayList<SwitchInstruction> c = (ArrayList<SwitchInstruction>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		SwitchInstruction d = (SwitchInstruction)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		System.out.println("Error in switch condition."); RESULT = null;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("SWITCHES",42, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // SWITCHES ::= VALUEFOR PAP error PCIERRE LLAP CASEEXPVF DEFAULTEXPVF LLCIERRE 
            {
              IBlock RESULT =null;
		ArrayList<ValueforInstruction> c = (ArrayList<ValueforInstruction>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		ValueforInstruction d = (ValueforInstruction)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		System.out.println("Error in valuefor condition."); RESULT = null;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("SWITCHES",42, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // SWITCHES ::= VALUEFOR PAP error PCIERRE LLAP CASEEXPVF LLCIERRE 
            {
              IBlock RESULT =null;
		ArrayList<ValueforInstruction> c = (ArrayList<ValueforInstruction>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		System.out.println("Error in valuefor condition."); RESULT = null;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("SWITCHES",42, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // CASEEXP ::= CASE E0 DOSPUNTOS INSTLIST BREAK PUNTOYCOMA CASEEXP 
            {
              ArrayList<SwitchInstruction> RESULT =null;
		E e = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-5)).value;
		ArrayList<I> lInst = (ArrayList<I>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)).value;
		ArrayList<SwitchInstruction> l = (ArrayList<SwitchInstruction>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		l.add(0, new SwitchInstruction(lInst, e, true)); RESULT = l;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CASEEXP",45, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // CASEEXP ::= 
            {
              ArrayList<SwitchInstruction> RESULT =null;
		ArrayList<SwitchInstruction> l = new ArrayList<SwitchInstruction>(); RESULT = l;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CASEEXP",45, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // DEFAULTEXP ::= DEFAULT DOSPUNTOS INSTLIST BREAK PUNTOYCOMA 
            {
              SwitchInstruction RESULT =null;
		ArrayList<I> l = (ArrayList<I>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		RESULT = new SwitchInstruction(l);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("DEFAULTEXP",46, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // CASEEXPVF ::= CASE E0 IGUAL E0 PUNTOYCOMA BREAK PUNTOYCOMA CASEEXPVF 
            {
              ArrayList<ValueforInstruction> RESULT =null;
		E e = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-6)).value;
		E result = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-4)).value;
		ArrayList<ValueforInstruction> l = (ArrayList<ValueforInstruction>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		l.add(0, new ValueforInstruction(e, result, true)); RESULT = l;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CASEEXPVF",47, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // CASEEXPVF ::= 
            {
              ArrayList<ValueforInstruction> RESULT =null;
		ArrayList<ValueforInstruction> l = new ArrayList<ValueforInstruction>(); RESULT = l;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CASEEXPVF",47, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // DEFAULTEXPVF ::= DEFAULT IGUAL E0 PUNTOYCOMA BREAK PUNTOYCOMA 
            {
              ValueforInstruction RESULT =null;
		E e = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)).value;
		RESULT = new ValueforInstruction(e);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("DEFAULTEXPVF",48, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // DEFAULTEXPVF ::= DEFAULT IGUAL E0 error 
            {
              ValueforInstruction RESULT =null;
		System.out.println("Error. Missing ;"); RESULT = null;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("DEFAULTEXPVF",48, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // E0 ::= E0 OR E1 
            {
              E RESULT =null;
		E op1 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		E op2 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new EBin(op1, op2, KindE.OR, new TBasics(KindT.BOOL));
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E0",2, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // E0 ::= E1 
            {
              E RESULT =null;
		E e = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = e;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E0",2, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // E1 ::= E1 AND E2 
            {
              E RESULT =null;
		E op1 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		E op2 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new EBin(op1, op2, KindE.AND, new TBasics(KindT.BOOL)); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E1",3, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // E1 ::= E2 
            {
              E RESULT =null;
		E e = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = e;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E1",3, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // E2 ::= E2 OP0 E3 
            {
              E RESULT =null;
		E op1 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		KindE operator = (KindE)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		E op2 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new EBin(op1, op2, operator, new TBasics(KindT.BOOL)); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E2",4, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // E2 ::= E3 
            {
              E RESULT =null;
		E e = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = e;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E2",4, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // E3 ::= E3 OP1 E4 
            {
              E RESULT =null;
		E op1 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		KindE operator = (KindE)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		E op2 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new EBin(op1, op2, operator, new TBasics(KindT.BOOL)); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E3",5, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // E3 ::= E4 
            {
              E RESULT =null;
		E e = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = e;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E3",5, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // E3 ::= NEWEXP 
            {
              E RESULT =null;
		ENew nexp = (ENew)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = nexp;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E3",5, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // E4 ::= E4 OP2 E5 
            {
              E RESULT =null;
		E op1 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		KindE operator = (KindE)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		E op2 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new EBin(op1, op2, operator, new TBasics(KindT.INT));
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E4",6, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // E4 ::= E5 
            {
              E RESULT =null;
		E e = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = e;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E4",6, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // E5 ::= E5 OP3 E6 
            {
              E RESULT =null;
		E op1 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		KindE operator = (KindE)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		E op2 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new EBin(op1, op2, operator, new TBasics(KindT.INT));
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E5",7, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // E5 ::= E6 
            {
              E RESULT =null;
		E e = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = e;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E5",7, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // E6 ::= NOT E6 
            {
              E RESULT =null;
		E op1 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = new EUnary(op1, KindE.NOT, new TBasics(KindT.BOOL));
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E6",8, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // E6 ::= E7 
            {
              E RESULT =null;
		E e = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = e;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E6",8, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // E7 ::= OP4 E7 
            {
              E RESULT =null;
		KindE operator = (KindE)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		E op1 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = new EUnary(op1, operator, new TBasics(KindT.INT));
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E7",9, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // E7 ::= E8 
            {
              E RESULT =null;
		E e = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = e;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E7",9, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // E8 ::= ENT 
            {
              E RESULT =null;
		TokenValue value = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = new EConst(value.lexema, new TBasics(KindT.INT));
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E8",10, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // E8 ::= TRUE 
            {
              E RESULT =null;
		TokenValue value = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = new EConst(value.lexema, new TBasics(KindT.BOOL));
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E8",10, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // E8 ::= FALSE 
            {
              E RESULT =null;
		TokenValue value = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = new EConst(value.lexema, new TBasics(KindT.BOOL));
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E8",10, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // E8 ::= ACCESS0 
            {
              E RESULT =null;
		E access = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = access;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E8",10, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // E8 ::= CALLFUNC 
            {
              E RESULT =null;
		EFunction callFunc = (EFunction)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = callFunc;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E8",10, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // E8 ::= READFUNC 
            {
              E RESULT =null;
		ERead read = (ERead)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = read;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E8",10, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // E8 ::= LLAP E0 E9 LLCIERRE 
            {
              E RESULT =null;
		E elem = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		ArrayList<E> elems = (ArrayList<E>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		elems.add(0, elem); RESULT = new EArray(elems);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E8",10, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // E9 ::= COMA E0 E9 
            {
              ArrayList<E> RESULT =null;
		E e = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		ArrayList<E> list = (ArrayList<E>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		list.add(0, e); RESULT = list;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E9",16, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // E9 ::= 
            {
              ArrayList<E> RESULT =null;
		ArrayList<E> l = new ArrayList<E>(); RESULT = l;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E9",16, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // OP0 ::= DISTINCT 
            {
              KindE RESULT =null;
		RESULT = KindE.DISTINCT;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OP0",17, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // OP0 ::= EQUAL 
            {
              KindE RESULT =null;
		RESULT = KindE.EQUAL;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OP0",17, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // OP1 ::= LESS 
            {
              KindE RESULT =null;
		RESULT = KindE.LESS;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OP1",18, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // OP1 ::= GREATER 
            {
              KindE RESULT =null;
		RESULT = KindE.GREATER;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OP1",18, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // OP1 ::= LEQ 
            {
              KindE RESULT =null;
		RESULT = KindE.LEQ;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OP1",18, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // OP1 ::= GREQ 
            {
              KindE RESULT =null;
		RESULT = KindE.GREQ;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OP1",18, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // OP2 ::= SUM 
            {
              KindE RESULT =null;
		RESULT = KindE.SUM;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OP2",19, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // OP2 ::= SUB 
            {
              KindE RESULT =null;
		RESULT = KindE.SUB;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OP2",19, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // OP3 ::= MUL 
            {
              KindE RESULT =null;
		RESULT = KindE.MUL;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OP3",20, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // OP3 ::= DIV 
            {
              KindE RESULT =null;
		RESULT = KindE.DIV;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OP3",20, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // OP3 ::= MOD 
            {
              KindE RESULT =null;
		RESULT = KindE.MOD;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OP3",20, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // OP4 ::= SUML 
            {
              KindE RESULT =null;
		RESULT = KindE.SUML;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OP4",21, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // OP4 ::= PRODL 
            {
              KindE RESULT =null;
		 RESULT = KindE.PRODL;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OP4",21, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // NEWEXP ::= NEW TYPE 
            {
              ENew RESULT =null;
		T t = (T)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = new ENew(t);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("NEWEXP",13, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // TYPE ::= TYPEINT 
            {
              T RESULT =null;
		 RESULT = new TBasics(KindT.INT);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TYPE",1, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // TYPE ::= TYPEBOOL 
            {
              T RESULT =null;
		 RESULT = new TBasics(KindT.BOOL);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TYPE",1, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // TYPE ::= VOID 
            {
              T RESULT =null;
		 RESULT = new TBasics(KindT.VOID);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TYPE",1, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // TYPE ::= IDEN 
            {
              T RESULT =null;
		TokenValue id = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new TStruct(id.lexema);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TYPE",1, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // TYPE ::= LIST LESS TYPE GREATER CAP ENT CCIERRE 
            {
              T RESULT =null;
		T t = (T)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-4)).value;
		TokenValue e = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 EConst sizeConst = new EConst(e.lexema, new TBasics(KindT.INT)); RESULT = new TArray(t, sizeConst);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TYPE",1, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // TYPE ::= TYPE MUL 
            {
              T RESULT =null;
		T t = (T)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = new TPointer(t);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TYPE",1, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // ACCESS0 ::= MUL ACCESS0 
            {
              E RESULT =null;
		E na = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new APointer((A) na);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ACCESS0",11, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // ACCESS0 ::= AMPERSAND ACCESS0 
            {
              E RESULT =null;
		E na = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = new AAdPointer((A) na);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ACCESS0",11, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // ACCESS0 ::= ACCESS1 
            {
              E RESULT =null;
		E na = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = na;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ACCESS0",11, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // ACCESS1 ::= IDEN 
            {
              E RESULT =null;
		TokenValue id = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new AVariable(id.lexema);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ACCESS1",12, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // ACCESS1 ::= ACCESS1 CAP E0 CCIERRE 
            {
              E RESULT =null;
		E a = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)).value;
		E e = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		RESULT = new AArray((A) a, e);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ACCESS1",12, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // ACCESS1 ::= ACCESS1 PUNTO IDEN 
            {
              E RESULT =null;
		E a = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		TokenValue id = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = new AStruct((A) a, id.lexema);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ACCESS1",12, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // ACCESS1 ::= PAP E0 PCIERRE 
            {
              E RESULT =null;
		E e = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		RESULT = e;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ACCESS1",12, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$AnalizadorSintacticoTiny$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintacticoTiny$do_action(
    int                        CUP$AnalizadorSintacticoTiny$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintacticoTiny$parser,
    java.util.Stack            CUP$AnalizadorSintacticoTiny$stack,
    int                        CUP$AnalizadorSintacticoTiny$top)
    throws java.lang.Exception
    {
              return CUP$AnalizadorSintacticoTiny$do_action_part00000000(
                               CUP$AnalizadorSintacticoTiny$act_num,
                               CUP$AnalizadorSintacticoTiny$parser,
                               CUP$AnalizadorSintacticoTiny$stack,
                               CUP$AnalizadorSintacticoTiny$top);
    }
}

