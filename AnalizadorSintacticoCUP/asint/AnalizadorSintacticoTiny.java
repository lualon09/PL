
//----------------------------------------------------
// The following code was generated by CUP v0.11b beta 20140220
// Fri Mar 22 15:43:49 WET 2024
//----------------------------------------------------

package asint;

import java_cup.runtime.*;
import alex.AnalizadorLexicoTiny;
import alex.UnidadLexica;
import alex.TokenValue;
import errors.GestionErroresTiny;
import java.util.ArrayList;
import ast.Types.*;
import ast.Expressions.*;
import ast.Expressions.Accesses.*;
import ast.Definitions.*;
import ast.Instructions.*;
import ast.*;
import java_cup.runtime.ComplexSymbolFactory.Location;

/** CUP v0.11b beta 20140220 generated parser.
  * @version Fri Mar 22 15:43:49 WET 2024
  */
public class AnalizadorSintacticoTiny extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public AnalizadorSintacticoTiny() {super();}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintacticoTiny(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintacticoTiny(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\164\000\002\002\003\000\002\002\004\000\002\030" +
    "\004\000\002\030\004\000\002\030\004\000\002\030\004" +
    "\000\002\030\004\000\002\030\002\000\002\031\005\000" +
    "\002\031\007\000\002\036\006\000\002\032\010\000\002" +
    "\033\010\000\002\037\004\000\002\037\003\000\002\035" +
    "\007\000\002\034\011\000\002\042\003\000\002\042\002" +
    "\000\002\041\005\000\002\041\003\000\002\040\005\000" +
    "\002\040\006\000\002\044\004\000\002\044\004\000\002" +
    "\044\002\000\002\056\003\000\002\056\003\000\002\056" +
    "\003\000\002\056\003\000\002\056\003\000\002\045\007" +
    "\000\002\020\005\000\002\046\005\000\002\046\004\000" +
    "\002\051\004\000\002\021\006\000\002\047\003\000\002" +
    "\047\002\000\002\050\005\000\002\050\003\000\002\055" +
    "\003\000\002\055\003\000\002\055\003\000\002\055\003" +
    "\000\002\043\005\000\002\052\007\000\002\052\011\000" +
    "\002\053\007\000\002\053\014\000\002\053\007\000\002" +
    "\054\012\000\002\054\011\000\002\054\012\000\002\054" +
    "\011\000\002\057\011\000\002\057\010\000\002\057\002" +
    "\000\002\060\005\000\002\061\012\000\002\061\011\000" +
    "\002\061\002\000\002\062\006\000\002\004\005\000\002" +
    "\004\003\000\002\005\005\000\002\005\003\000\002\006" +
    "\005\000\002\006\003\000\002\007\005\000\002\007\003" +
    "\000\002\007\003\000\002\010\005\000\002\010\003\000" +
    "\002\011\005\000\002\011\003\000\002\012\004\000\002" +
    "\012\003\000\002\013\004\000\002\013\003\000\002\014" +
    "\003\000\002\014\003\000\002\014\003\000\002\014\003" +
    "\000\002\014\003\000\002\014\003\000\002\014\006\000" +
    "\002\022\005\000\002\022\002\000\002\023\003\000\002" +
    "\023\003\000\002\024\003\000\002\024\003\000\002\024" +
    "\003\000\002\024\003\000\002\025\003\000\002\025\003" +
    "\000\002\026\003\000\002\026\003\000\002\026\003\000" +
    "\002\027\003\000\002\027\003\000\002\017\004\000\002" +
    "\003\003\000\002\003\003\000\002\003\003\000\002\003" +
    "\003\000\002\003\011\000\002\003\004\000\002\015\006" +
    "\000\002\015\005\000\002\015\005\000\002\015\003\000" +
    "\002\016\003\000\002\016\004\000\002\016\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\370\000\024\002\ufffa\004\013\005\012\006\014\051" +
    "\010\062\017\063\023\064\020\066\011\001\002\000\024" +
    "\002\ufffa\004\013\005\012\006\014\051\010\062\017\063" +
    "\023\064\020\066\011\001\002\000\024\002\ufffa\004\013" +
    "\005\012\006\014\051\010\062\017\063\023\064\020\066" +
    "\011\001\002\000\004\002\001\001\002\000\024\002\ufffa" +
    "\004\013\005\012\006\014\051\010\062\017\063\023\064" +
    "\020\066\011\001\002\000\004\066\361\001\002\000\010" +
    "\011\uff97\027\173\066\uff97\001\002\000\046\011\uff99\016" +
    "\uff99\017\uff99\020\uff99\021\uff99\022\uff99\023\uff99\024\uff99" +
    "\025\uff99\030\uff99\032\uff99\033\uff99\034\uff99\036\uff99\037" +
    "\uff99\040\uff99\043\uff99\066\uff99\001\002\000\046\011\uff9a" +
    "\016\uff9a\017\uff9a\020\uff9a\021\uff9a\022\uff9a\023\uff9a\024" +
    "\uff9a\025\uff9a\030\uff9a\032\uff9a\033\uff9a\034\uff9a\036\uff9a" +
    "\037\uff9a\040\uff9a\043\uff9a\066\uff9a\001\002\000\046\011" +
    "\uff98\016\uff98\017\uff98\020\uff98\021\uff98\022\uff98\023\uff98" +
    "\024\uff98\025\uff98\030\uff98\032\uff98\033\uff98\034\uff98\036" +
    "\uff98\037\uff98\040\uff98\043\uff98\066\uff98\001\002\000\004" +
    "\002\172\001\002\000\024\002\ufffa\004\013\005\012\006" +
    "\014\051\010\062\017\063\023\064\020\066\011\001\002" +
    "\000\004\066\165\001\002\000\004\017\157\001\002\000" +
    "\006\011\027\066\152\001\002\000\024\002\ufffa\004\013" +
    "\005\012\006\014\051\010\062\017\063\023\064\020\066" +
    "\011\001\002\000\014\004\013\005\012\006\014\064\020" +
    "\066\024\001\002\000\046\011\uff97\016\uff97\017\uff97\020" +
    "\uff97\021\uff97\022\uff97\023\uff97\024\uff97\025\uff97\030\uff97" +
    "\032\uff97\033\uff97\034\uff97\036\uff97\037\uff97\040\uff97\043" +
    "\uff97\066\uff97\001\002\000\006\011\027\066\026\001\002" +
    "\000\004\036\030\001\002\000\046\011\uff95\016\uff95\017" +
    "\uff95\020\uff95\021\uff95\022\uff95\023\uff95\024\uff95\025\uff95" +
    "\030\uff95\032\uff95\033\uff95\034\uff95\036\uff95\037\uff95\040" +
    "\uff95\043\uff95\066\uff95\001\002\000\034\011\047\014\053" +
    "\015\042\026\032\027\054\033\060\041\063\061\031\065" +
    "\057\066\034\067\064\070\037\071\055\001\002\000\004" +
    "\027\147\001\002\000\032\011\047\014\053\015\042\026" +
    "\032\027\054\033\060\041\063\061\031\066\034\067\064" +
    "\070\037\071\055\001\002\000\052\007\uffb2\010\uffb2\011" +
    "\uffb2\012\uffb2\013\uffb2\016\uffb2\017\uffb2\020\uffb2\021\uffb2" +
    "\022\uffb2\023\uffb2\024\uffb2\025\uffb2\030\uffb2\032\uffb2\034" +
    "\uffb2\036\uffb2\037\uffb2\040\uffb2\043\uffb2\001\002\000\060" +
    "\007\uff90\010\uff90\011\uff90\012\uff90\013\uff90\016\uff90\017" +
    "\uff90\020\uff90\021\uff90\022\uff90\023\uff90\024\uff90\025\uff90" +
    "\027\137\030\uff90\031\uff90\032\uff90\034\uff90\036\uff90\037" +
    "\uff90\040\uff90\042\uff90\043\uff90\001\002\000\052\007\uffad" +
    "\010\uffad\011\uffad\012\uffad\013\uffad\016\uffad\017\uffad\020" +
    "\uffad\021\uffad\022\uffad\023\uffad\024\uffad\025\uffad\030\uffad" +
    "\032\uffad\034\uffad\036\uffad\037\uffad\040\uffad\043\uffad\001" +
    "\002\000\052\007\uffb4\010\uffb4\011\uffb4\012\uffb4\013\uffb4" +
    "\016\uffb4\017\uffb4\020\uffb4\021\uffb4\022\uffb4\023\uffb4\024" +
    "\uffb4\025\uffb4\030\uffb4\032\uffb4\034\uffb4\036\uffb4\037\uffb4" +
    "\040\uffb4\043\uffb4\001\002\000\052\007\uffb0\010\uffb0\011" +
    "\uffb0\012\uffb0\013\uffb0\016\uffb0\017\uffb0\020\uffb0\021\uffb0" +
    "\022\uffb0\023\uffb0\024\uffb0\025\uffb0\030\uffb0\032\uffb0\034" +
    "\uffb0\036\uffb0\037\uffb0\040\uffb0\043\uffb0\001\002\000\052" +
    "\007\uffb6\010\uffb6\011\uffb6\012\uffb6\013\uffb6\016\uffb6\017" +
    "\uffb6\020\uffb6\021\uffb6\022\uffb6\023\uffb6\024\uffb6\025\uffb6" +
    "\030\uffb6\032\uffb6\034\uffb6\036\uffb6\037\uffb6\040\uffb6\043" +
    "\uffb6\001\002\000\040\016\uffba\017\uffba\020\uffba\021\uffba" +
    "\022\uffba\023\uffba\024\uffba\025\uffba\030\uffba\032\uffba\034" +
    "\uffba\036\uffba\037\uffba\040\uffba\043\uffba\001\002\000\030" +
    "\011\uff9c\014\uff9c\015\uff9c\027\uff9c\033\uff9c\041\uff9c\061" +
    "\uff9c\066\uff9c\067\uff9c\070\uff9c\071\uff9c\001\002\000\052" +
    "\007\uffb8\010\uffb8\011\120\012\117\013\116\016\uffb8\017" +
    "\uffb8\020\uffb8\021\uffb8\022\uffb8\023\uffb8\024\uffb8\025\uffb8" +
    "\030\uffb8\032\uffb8\034\uffb8\036\uffb8\037\uffb8\040\uffb8\043" +
    "\uffb8\001\002\000\056\007\uffae\010\uffae\011\uffae\012\uffae" +
    "\013\uffae\016\uffae\017\uffae\020\uffae\021\uffae\022\uffae\023" +
    "\uffae\024\uffae\025\uffae\030\uffae\031\133\032\uffae\034\uffae" +
    "\036\uffae\037\uffae\040\uffae\042\132\043\uffae\001\002\000" +
    "\044\007\112\010\113\016\uffbb\017\uffbb\020\uffbb\021\uffbb" +
    "\022\uffbb\023\uffbb\024\uffbb\025\uffbb\030\uffbb\032\uffbb\034" +
    "\uffbb\036\uffbb\037\uffbb\040\uffbb\043\uffbb\001\002\000\040" +
    "\016\107\017\106\020\103\021\104\022\uffbd\023\uffbd\024" +
    "\uffbd\025\uffbd\030\uffbd\032\uffbd\034\uffbd\036\uffbd\037\uffbd" +
    "\040\uffbd\043\uffbd\001\002\000\010\011\047\041\063\066" +
    "\066\001\002\000\030\022\100\023\101\024\uffbf\025\uffbf" +
    "\030\uffbf\032\uffbf\034\uffbf\036\uffbf\037\uffbf\040\uffbf\043" +
    "\uffbf\001\002\000\024\024\075\025\uffc1\030\uffc1\032\uffc1" +
    "\034\uffc1\036\uffc1\037\uffc1\040\uffc1\043\uffc1\001\002\000" +
    "\006\025\073\040\130\001\002\000\030\011\uff9d\014\uff9d" +
    "\015\uff9d\027\uff9d\033\uff9d\041\uff9d\061\uff9d\066\uff9d\067" +
    "\uff9d\070\uff9d\071\uff9d\001\002\000\034\011\047\014\053" +
    "\015\042\026\032\027\054\033\060\041\063\061\031\065" +
    "\057\066\034\067\064\070\037\071\055\001\002\000\052" +
    "\007\uffaf\010\uffaf\011\uffaf\012\uffaf\013\uffaf\016\uffaf\017" +
    "\uffaf\020\uffaf\021\uffaf\022\uffaf\023\uffaf\024\uffaf\025\uffaf" +
    "\030\uffaf\032\uffaf\034\uffaf\036\uffaf\037\uffaf\040\uffaf\043" +
    "\uffaf\001\002\000\056\007\uff91\010\uff91\011\uff91\012\uff91" +
    "\013\uff91\016\uff91\017\uff91\020\uff91\021\uff91\022\uff91\023" +
    "\uff91\024\uff91\025\uff91\030\uff91\031\uff91\032\uff91\034\uff91" +
    "\036\uff91\037\uff91\040\uff91\042\uff91\043\uff91\001\002\000" +
    "\014\004\013\005\012\006\014\064\020\066\024\001\002" +
    "\000\034\011\047\014\053\015\042\026\032\027\054\033" +
    "\060\041\063\061\031\065\057\066\034\067\064\070\037" +
    "\071\055\001\002\000\052\007\uffac\010\uffac\011\uffac\012" +
    "\uffac\013\uffac\016\uffac\017\uffac\020\uffac\021\uffac\022\uffac" +
    "\023\uffac\024\uffac\025\uffac\030\uffac\032\uffac\034\uffac\036" +
    "\uffac\037\uffac\040\uffac\043\uffac\001\002\000\030\011\047" +
    "\014\053\015\042\027\054\033\060\041\063\061\031\066" +
    "\034\067\064\070\037\071\055\001\002\000\010\011\047" +
    "\041\063\066\066\001\002\000\052\007\uffb1\010\uffb1\011" +
    "\uffb1\012\uffb1\013\uffb1\016\uffb1\017\uffb1\020\uffb1\021\uffb1" +
    "\022\uffb1\023\uffb1\024\uffb1\025\uffb1\030\uffb1\032\uffb1\034" +
    "\uffb1\036\uffb1\037\uffb1\040\uffb1\043\uffb1\001\002\000\056" +
    "\007\uff8e\010\uff8e\011\uff8e\012\uff8e\013\uff8e\016\uff8e\017" +
    "\uff8e\020\uff8e\021\uff8e\022\uff8e\023\uff8e\024\uff8e\025\uff8e" +
    "\030\uff8e\031\uff8e\032\uff8e\034\uff8e\036\uff8e\037\uff8e\040" +
    "\uff8e\042\uff8e\043\uff8e\001\002\000\056\007\uff90\010\uff90" +
    "\011\uff90\012\uff90\013\uff90\016\uff90\017\uff90\020\uff90\021" +
    "\uff90\022\uff90\023\uff90\024\uff90\025\uff90\030\uff90\031\uff90" +
    "\032\uff90\034\uff90\036\uff90\037\uff90\040\uff90\042\uff90\043" +
    "\uff90\001\002\000\052\007\uffb3\010\uffb3\011\uffb3\012\uffb3" +
    "\013\uffb3\016\uffb3\017\uffb3\020\uffb3\021\uffb3\022\uffb3\023" +
    "\uffb3\024\uffb3\025\uffb3\030\uffb3\032\uffb3\034\uffb3\036\uffb3" +
    "\037\uffb3\040\uffb3\043\uffb3\001\002\000\010\025\073\034" +
    "\uffa9\037\071\001\002\000\034\011\047\014\053\015\042" +
    "\026\032\027\054\033\060\041\063\061\031\065\057\066" +
    "\034\067\064\070\037\071\055\001\002\000\004\034\122" +
    "\001\002\000\034\011\047\014\053\015\042\026\032\027" +
    "\054\033\060\041\063\061\031\065\057\066\034\067\064" +
    "\070\037\071\055\001\002\000\024\024\075\025\uffc2\030" +
    "\uffc2\032\uffc2\034\uffc2\036\uffc2\037\uffc2\040\uffc2\043\uffc2" +
    "\001\002\000\034\011\047\014\053\015\042\026\032\027" +
    "\054\033\060\041\063\061\031\065\057\066\034\067\064" +
    "\070\037\071\055\001\002\000\030\022\100\023\101\024" +
    "\uffc0\025\uffc0\030\uffc0\032\uffc0\034\uffc0\036\uffc0\037\uffc0" +
    "\040\uffc0\043\uffc0\001\002\000\034\011\047\014\053\015" +
    "\042\026\032\027\054\033\060\041\063\061\031\065\057" +
    "\066\034\067\064\070\037\071\055\001\002\000\034\011" +
    "\uffa8\014\uffa8\015\uffa8\026\uffa8\027\uffa8\033\uffa8\041\uffa8" +
    "\061\uffa8\065\uffa8\066\uffa8\067\uffa8\070\uffa8\071\uffa8\001" +
    "\002\000\034\011\uffa7\014\uffa7\015\uffa7\026\uffa7\027\uffa7" +
    "\033\uffa7\041\uffa7\061\uffa7\065\uffa7\066\uffa7\067\uffa7\070" +
    "\uffa7\071\uffa7\001\002\000\040\016\107\017\106\020\103" +
    "\021\104\022\uffbe\023\uffbe\024\uffbe\025\uffbe\030\uffbe\032" +
    "\uffbe\034\uffbe\036\uffbe\037\uffbe\040\uffbe\043\uffbe\001\002" +
    "\000\032\011\uffa3\014\uffa3\015\uffa3\026\uffa3\027\uffa3\033" +
    "\uffa3\041\uffa3\061\uffa3\066\uffa3\067\uffa3\070\uffa3\071\uffa3" +
    "\001\002\000\032\011\uffa4\014\uffa4\015\uffa4\026\uffa4\027" +
    "\uffa4\033\uffa4\041\uffa4\061\uffa4\066\uffa4\067\uffa4\070\uffa4" +
    "\071\uffa4\001\002\000\032\011\047\014\053\015\042\026" +
    "\032\027\054\033\060\041\063\061\031\066\034\067\064" +
    "\070\037\071\055\001\002\000\032\011\uffa6\014\uffa6\015" +
    "\uffa6\026\uffa6\027\uffa6\033\uffa6\041\uffa6\061\uffa6\066\uffa6" +
    "\067\uffa6\070\uffa6\071\uffa6\001\002\000\032\011\uffa5\014" +
    "\uffa5\015\uffa5\026\uffa5\027\uffa5\033\uffa5\041\uffa5\061\uffa5" +
    "\066\uffa5\067\uffa5\070\uffa5\071\uffa5\001\002\000\044\007" +
    "\112\010\113\016\uffbc\017\uffbc\020\uffbc\021\uffbc\022\uffbc" +
    "\023\uffbc\024\uffbc\025\uffbc\030\uffbc\032\uffbc\034\uffbc\036" +
    "\uffbc\037\uffbc\040\uffbc\043\uffbc\001\002\000\032\011\047" +
    "\014\053\015\042\026\032\027\054\033\060\041\063\061" +
    "\031\066\034\067\064\070\037\071\055\001\002\000\032" +
    "\011\uffa2\014\uffa2\015\uffa2\026\uffa2\027\uffa2\033\uffa2\041" +
    "\uffa2\061\uffa2\066\uffa2\067\uffa2\070\uffa2\071\uffa2\001\002" +
    "\000\032\011\uffa1\014\uffa1\015\uffa1\026\uffa1\027\uffa1\033" +
    "\uffa1\041\uffa1\061\uffa1\066\uffa1\067\uffa1\070\uffa1\071\uffa1" +
    "\001\002\000\052\007\uffb9\010\uffb9\011\120\012\117\013" +
    "\116\016\uffb9\017\uffb9\020\uffb9\021\uffb9\022\uffb9\023\uffb9" +
    "\024\uffb9\025\uffb9\030\uffb9\032\uffb9\034\uffb9\036\uffb9\037" +
    "\uffb9\040\uffb9\043\uffb9\001\002\000\032\011\047\014\053" +
    "\015\042\026\032\027\054\033\060\041\063\061\031\066" +
    "\034\067\064\070\037\071\055\001\002\000\032\011\uff9e" +
    "\014\uff9e\015\uff9e\026\uff9e\027\uff9e\033\uff9e\041\uff9e\061" +
    "\uff9e\066\uff9e\067\uff9e\070\uff9e\071\uff9e\001\002\000\032" +
    "\011\uff9f\014\uff9f\015\uff9f\026\uff9f\027\uff9f\033\uff9f\041" +
    "\uff9f\061\uff9f\066\uff9f\067\uff9f\070\uff9f\071\uff9f\001\002" +
    "\000\032\011\uffa0\014\uffa0\015\uffa0\026\uffa0\027\uffa0\033" +
    "\uffa0\041\uffa0\061\uffa0\066\uffa0\067\uffa0\070\uffa0\071\uffa0" +
    "\001\002\000\052\007\uffb7\010\uffb7\011\uffb7\012\uffb7\013" +
    "\uffb7\016\uffb7\017\uffb7\020\uffb7\021\uffb7\022\uffb7\023\uffb7" +
    "\024\uffb7\025\uffb7\030\uffb7\032\uffb7\034\uffb7\036\uffb7\037" +
    "\uffb7\040\uffb7\043\uffb7\001\002\000\052\007\uffab\010\uffab" +
    "\011\uffab\012\uffab\013\uffab\016\uffab\017\uffab\020\uffab\021" +
    "\uffab\022\uffab\023\uffab\024\uffab\025\uffab\030\uffab\032\uffab" +
    "\034\uffab\036\uffab\037\uffab\040\uffab\043\uffab\001\002\000" +
    "\010\025\073\034\uffa9\037\071\001\002\000\004\034\uffaa" +
    "\001\002\000\042\011\027\016\uff9b\017\uff9b\020\uff9b\021" +
    "\uff9b\022\uff9b\023\uff9b\024\uff9b\025\uff9b\030\uff9b\032\uff9b" +
    "\034\uff9b\036\uff9b\037\uff9b\040\uff9b\043\uff9b\001\002\000" +
    "\006\025\073\030\127\001\002\000\056\007\uff92\010\uff92" +
    "\011\uff92\012\uff92\013\uff92\016\uff92\017\uff92\020\uff92\021" +
    "\uff92\022\uff92\023\uff92\024\uff92\025\uff92\030\uff92\031\uff92" +
    "\032\uff92\034\uff92\036\uff92\037\uff92\040\uff92\042\uff92\043" +
    "\uff92\001\002\000\024\002\ufff6\004\ufff6\005\ufff6\006\ufff6" +
    "\051\ufff6\062\ufff6\063\ufff6\064\ufff6\066\ufff6\001\002\000" +
    "\056\007\uff8f\010\uff8f\011\uff8f\012\uff8f\013\uff8f\016\uff8f" +
    "\017\uff8f\020\uff8f\021\uff8f\022\uff8f\023\uff8f\024\uff8f\025" +
    "\uff8f\030\uff8f\031\uff8f\032\uff8f\034\uff8f\036\uff8f\037\uff8f" +
    "\040\uff8f\042\uff8f\043\uff8f\001\002\000\004\066\136\001" +
    "\002\000\034\011\047\014\053\015\042\026\032\027\054" +
    "\033\060\041\063\061\031\065\057\066\034\067\064\070" +
    "\037\071\055\001\002\000\006\025\073\032\135\001\002" +
    "\000\056\007\uff94\010\uff94\011\uff94\012\uff94\013\uff94\016" +
    "\uff94\017\uff94\020\uff94\021\uff94\022\uff94\023\uff94\024\uff94" +
    "\025\uff94\030\uff94\031\uff94\032\uff94\034\uff94\036\uff94\037" +
    "\uff94\040\uff94\042\uff94\043\uff94\001\002\000\056\007\uff93" +
    "\010\uff93\011\uff93\012\uff93\013\uff93\016\uff93\017\uff93\020" +
    "\uff93\021\uff93\022\uff93\023\uff93\024\uff93\025\uff93\030\uff93" +
    "\031\uff93\032\uff93\034\uff93\036\uff93\037\uff93\040\uff93\042" +
    "\uff93\043\uff93\001\002\000\036\011\047\014\053\015\042" +
    "\026\032\027\054\030\uffdb\033\060\041\063\061\031\065" +
    "\057\066\034\067\064\070\037\071\055\001\002\000\004" +
    "\030\uffdc\001\002\000\004\030\145\001\002\000\010\025" +
    "\073\030\uffd9\037\143\001\002\000\034\011\047\014\053" +
    "\015\042\026\032\027\054\033\060\041\063\061\031\065" +
    "\057\066\034\067\064\070\037\071\055\001\002\000\004" +
    "\030\uffda\001\002\000\052\007\uffdd\010\uffdd\011\uffdd\012" +
    "\uffdd\013\uffdd\016\uffdd\017\uffdd\020\uffdd\021\uffdd\022\uffdd" +
    "\023\uffdd\024\uffdd\025\uffdd\030\uffdd\032\uffdd\034\uffdd\036" +
    "\uffdd\037\uffdd\040\uffdd\043\uffdd\001\002\000\052\007\uffb5" +
    "\010\uffb5\011\uffb5\012\uffb5\013\uffb5\016\uffb5\017\uffb5\020" +
    "\uffb5\021\uffb5\022\uffb5\023\uffb5\024\uffb5\025\uffb5\030\uffb5" +
    "\032\uffb5\034\uffb5\036\uffb5\037\uffb5\040\uffb5\043\uffb5\001" +
    "\002\000\004\030\150\001\002\000\052\007\uffe1\010\uffe1" +
    "\011\uffe1\012\uffe1\013\uffe1\016\uffe1\017\uffe1\020\uffe1\021" +
    "\uffe1\022\uffe1\023\uffe1\024\uffe1\025\uffe1\030\uffe1\032\uffe1" +
    "\034\uffe1\036\uffe1\037\uffe1\040\uffe1\043\uffe1\001\002\000" +
    "\004\002\ufffb\001\002\000\006\036\154\040\153\001\002" +
    "\000\102\002\ufff9\004\ufff9\005\ufff9\006\ufff9\011\ufff9\014" +
    "\ufff9\015\ufff9\026\ufff9\027\ufff9\033\ufff9\034\ufff9\040\ufff9" +
    "\041\ufff9\044\ufff9\045\ufff9\046\ufff9\047\ufff9\051\ufff9\052" +
    "\ufff9\053\ufff9\055\ufff9\057\ufff9\060\ufff9\061\ufff9\062\ufff9" +
    "\063\ufff9\064\ufff9\065\ufff9\066\ufff9\067\ufff9\070\ufff9\071" +
    "\ufff9\001\002\000\034\011\047\014\053\015\042\026\032" +
    "\027\054\033\060\041\063\061\031\065\057\066\034\067" +
    "\064\070\037\071\055\001\002\000\006\025\073\040\156" +
    "\001\002\000\102\002\ufff8\004\ufff8\005\ufff8\006\ufff8\011" +
    "\ufff8\014\ufff8\015\ufff8\026\ufff8\027\ufff8\033\ufff8\034\ufff8" +
    "\040\ufff8\041\ufff8\044\ufff8\045\ufff8\046\ufff8\047\ufff8\051" +
    "\ufff8\052\ufff8\053\ufff8\055\ufff8\057\ufff8\060\ufff8\061\ufff8" +
    "\062\ufff8\063\ufff8\064\ufff8\065\ufff8\066\ufff8\067\ufff8\070" +
    "\ufff8\071\ufff8\001\002\000\014\004\013\005\012\006\014" +
    "\064\020\066\024\001\002\000\006\011\027\016\161\001" +
    "\002\000\004\031\162\001\002\000\004\067\163\001\002" +
    "\000\004\032\164\001\002\000\046\011\uff96\016\uff96\017" +
    "\uff96\020\uff96\021\uff96\022\uff96\023\uff96\024\uff96\025\uff96" +
    "\030\uff96\032\uff96\033\uff96\034\uff96\036\uff96\037\uff96\040" +
    "\uff96\043\uff96\066\uff96\001\002\000\004\036\166\001\002" +
    "\000\014\004\013\005\012\006\014\064\020\066\024\001" +
    "\002\000\006\011\027\040\170\001\002\000\024\002\ufff2" +
    "\004\ufff2\005\ufff2\006\ufff2\051\ufff2\062\ufff2\063\ufff2\064" +
    "\ufff2\066\ufff2\001\002\000\004\002\ufffd\001\002\000\004" +
    "\002\000\001\002\000\006\030\uffef\066\176\001\002\000" +
    "\004\030\ufff0\001\002\000\004\030\206\001\002\000\004" +
    "\043\202\001\002\000\006\030\uffed\037\200\001\002\000" +
    "\004\066\176\001\002\000\004\030\uffee\001\002\000\016" +
    "\004\013\005\012\006\014\041\203\064\020\066\024\001" +
    "\002\000\014\004\013\005\012\006\014\064\020\066\024" +
    "\001\002\000\010\011\027\030\uffec\037\uffec\001\002\000" +
    "\010\011\027\030\uffeb\037\uffeb\001\002\000\004\035\207" +
    "\001\002\000\014\004\013\005\012\006\014\064\020\066" +
    "\024\001\002\000\006\011\027\033\212\001\002\000\024" +
    "\002\ufff1\004\ufff1\005\ufff1\006\ufff1\051\ufff1\062\ufff1\063" +
    "\ufff1\064\ufff1\066\ufff1\001\002\000\046\004\013\005\012" +
    "\006\014\011\047\027\054\033\212\034\uffe8\041\063\044" +
    "\214\045\236\046\237\047\225\052\223\053\231\057\220" +
    "\060\216\064\020\066\222\001\002\000\052\004\uffe3\005" +
    "\uffe3\006\uffe3\011\uffe3\027\uffe3\033\uffe3\034\uffe3\040\uffe3" +
    "\041\uffe3\044\uffe3\045\uffe3\046\uffe3\047\uffe3\052\uffe3\053" +
    "\uffe3\055\uffe3\057\uffe3\060\uffe3\064\uffe3\066\uffe3\001\002" +
    "\000\004\027\355\001\002\000\052\004\uffd8\005\uffd8\006" +
    "\uffd8\011\uffd8\027\uffd8\033\uffd8\034\uffd8\040\uffd8\041\uffd8" +
    "\044\uffd8\045\uffd8\046\uffd8\047\uffd8\052\uffd8\053\uffd8\055" +
    "\uffd8\057\uffd8\060\uffd8\064\uffd8\066\uffd8\001\002\000\004" +
    "\027\351\001\002\000\052\004\uffe7\005\uffe7\006\uffe7\011" +
    "\uffe7\027\uffe7\033\uffe7\034\uffe7\040\uffe7\041\uffe7\044\uffe7" +
    "\045\uffe7\046\uffe7\047\uffe7\052\uffe7\053\uffe7\055\uffe7\057" +
    "\uffe7\060\uffe7\064\uffe7\066\uffe7\001\002\000\036\011\047" +
    "\014\053\015\042\026\032\027\054\033\060\040\346\041" +
    "\063\061\031\065\057\066\034\067\064\070\037\071\055" +
    "\001\002\000\004\040\345\001\002\000\016\011\uff97\027" +
    "\137\031\uff90\036\uff90\042\uff90\066\uff97\001\002\000\004" +
    "\027\321\001\002\000\052\004\013\005\012\006\014\011" +
    "\047\027\054\033\212\034\uffe8\040\uffe8\041\063\044\214" +
    "\045\236\046\237\047\225\052\223\053\231\055\uffe8\057" +
    "\220\060\216\064\020\066\222\001\002\000\004\027\312" +
    "\001\002\000\010\031\133\036\307\042\132\001\002\000" +
    "\004\034\306\001\002\000\052\004\013\005\012\006\014" +
    "\011\047\027\054\033\212\034\uffe8\040\uffe8\041\063\044" +
    "\214\045\236\046\237\047\225\052\223\053\231\055\uffe8" +
    "\057\220\060\216\064\020\066\222\001\002\000\004\027" +
    "\257\001\002\000\052\004\uffe5\005\uffe5\006\uffe5\011\uffe5" +
    "\027\uffe5\033\uffe5\034\uffe5\040\uffe5\041\uffe5\044\uffe5\045" +
    "\uffe5\046\uffe5\047\uffe5\052\uffe5\053\uffe5\055\uffe5\057\uffe5" +
    "\060\uffe5\064\uffe5\066\uffe5\001\002\000\052\004\uffd6\005" +
    "\uffd6\006\uffd6\011\uffd6\027\uffd6\033\uffd6\034\uffd6\040\uffd6" +
    "\041\uffd6\044\uffd6\045\uffd6\046\uffd6\047\uffd6\052\uffd6\053" +
    "\uffd6\055\uffd6\057\uffd6\060\uffd6\064\uffd6\066\uffd6\001\002" +
    "\000\052\004\uffd7\005\uffd7\006\uffd7\011\uffd7\027\uffd7\033" +
    "\uffd7\034\uffd7\040\uffd7\041\uffd7\044\uffd7\045\uffd7\046\uffd7" +
    "\047\uffd7\052\uffd7\053\uffd7\055\uffd7\057\uffd7\060\uffd7\064" +
    "\uffd7\066\uffd7\001\002\000\052\004\uffe4\005\uffe4\006\uffe4" +
    "\011\uffe4\027\uffe4\033\uffe4\034\uffe4\040\uffe4\041\uffe4\044" +
    "\uffe4\045\uffe4\046\uffe4\047\uffe4\052\uffe4\053\uffe4\055\uffe4" +
    "\057\uffe4\060\uffe4\064\uffe4\066\uffe4\001\002\000\004\027" +
    "\246\001\002\000\004\027\242\001\002\000\052\004\uffe6" +
    "\005\uffe6\006\uffe6\011\uffe6\027\uffe6\033\uffe6\034\uffe6\040" +
    "\uffe6\041\uffe6\044\uffe6\045\uffe6\046\uffe6\047\uffe6\052\uffe6" +
    "\053\uffe6\055\uffe6\057\uffe6\060\uffe6\064\uffe6\066\uffe6\001" +
    "\002\000\052\004\uffd5\005\uffd5\006\uffd5\011\uffd5\027\uffd5" +
    "\033\uffd5\034\uffd5\040\uffd5\041\uffd5\044\uffd5\045\uffd5\046" +
    "\uffd5\047\uffd5\052\uffd5\053\uffd5\055\uffd5\057\uffd5\060\uffd5" +
    "\064\uffd5\066\uffd5\001\002\000\034\011\047\014\053\015" +
    "\042\026\032\027\054\033\060\041\063\061\031\065\057" +
    "\066\034\067\064\070\037\071\055\001\002\000\006\025" +
    "\073\030\244\001\002\000\004\033\212\001\002\000\052" +
    "\004\uffcf\005\uffcf\006\uffcf\011\uffcf\027\uffcf\033\uffcf\034" +
    "\uffcf\040\uffcf\041\uffcf\044\uffcf\045\uffcf\046\uffcf\047\uffcf" +
    "\052\uffcf\053\uffcf\055\uffcf\057\uffcf\060\uffcf\064\uffcf\066" +
    "\uffcf\001\002\000\014\004\013\005\012\006\014\064\020" +
    "\066\024\001\002\000\034\011\047\014\053\015\042\026" +
    "\032\027\054\033\060\041\063\061\031\065\057\066\034" +
    "\067\064\070\037\071\055\001\002\000\006\025\073\040" +
    "\251\001\002\000\012\011\047\027\054\041\063\066\066" +
    "\001\002\000\010\031\133\036\253\042\132\001\002\000" +
    "\034\011\047\014\053\015\042\026\032\027\054\033\060" +
    "\041\063\061\031\065\057\066\034\067\064\070\037\071" +
    "\055\001\002\000\006\025\073\030\255\001\002\000\004" +
    "\033\212\001\002\000\052\004\uffd0\005\uffd0\006\uffd0\011" +
    "\uffd0\027\uffd0\033\uffd0\034\uffd0\040\uffd0\041\uffd0\044\uffd0" +
    "\045\uffd0\046\uffd0\047\uffd0\052\uffd0\053\uffd0\055\uffd0\057" +
    "\uffd0\060\uffd0\064\uffd0\066\uffd0\001\002\000\012\011\047" +
    "\027\054\041\063\066\066\001\002\000\010\030\261\031" +
    "\133\042\132\001\002\000\004\033\262\001\002\000\010" +
    "\034\uffc4\054\264\056\uffc4\001\002\000\006\034\300\056" +
    "\276\001\002\000\034\011\047\014\053\015\042\026\032" +
    "\027\054\033\060\041\063\061\031\065\057\066\034\067" +
    "\064\070\037\071\055\001\002\000\006\025\073\036\266" +
    "\001\002\000\034\011\047\014\053\015\042\026\032\027" +
    "\054\033\060\041\063\061\031\065\057\066\034\067\064" +
    "\070\037\071\055\001\002\000\006\025\073\040\270\001" +
    "\002\000\006\040\271\055\272\001\002\000\010\034\uffc4" +
    "\054\264\056\uffc4\001\002\000\004\040\273\001\002\000" +
    "\010\034\uffc4\054\264\056\uffc4\001\002\000\006\034\uffc6" +
    "\056\uffc6\001\002\000\006\034\uffc5\056\uffc5\001\002\000" +
    "\004\036\302\001\002\000\004\034\301\001\002\000\052" +
    "\004\uffcb\005\uffcb\006\uffcb\011\uffcb\027\uffcb\033\uffcb\034" +
    "\uffcb\040\uffcb\041\uffcb\044\uffcb\045\uffcb\046\uffcb\047\uffcb" +
    "\052\uffcb\053\uffcb\055\uffcb\057\uffcb\060\uffcb\064\uffcb\066" +
    "\uffcb\001\002\000\052\004\uffcc\005\uffcc\006\uffcc\011\uffcc" +
    "\027\uffcc\033\uffcc\034\uffcc\040\uffcc\041\uffcc\044\uffcc\045" +
    "\uffcc\046\uffcc\047\uffcc\052\uffcc\053\uffcc\055\uffcc\057\uffcc" +
    "\060\uffcc\064\uffcc\066\uffcc\001\002\000\034\011\047\014" +
    "\053\015\042\026\032\027\054\033\060\041\063\061\031" +
    "\065\057\066\034\067\064\070\037\071\055\001\002\000" +
    "\006\025\073\040\304\001\002\000\004\034\uffc3\001\002" +
    "\000\010\034\uffea\040\uffea\055\uffea\001\002\000\064\002" +
    "\uffd4\004\uffd4\005\uffd4\006\uffd4\011\uffd4\027\uffd4\033\uffd4" +
    "\034\uffd4\040\uffd4\041\uffd4\044\uffd4\045\uffd4\046\uffd4\047" +
    "\uffd4\050\uffd4\051\uffd4\052\uffd4\053\uffd4\055\uffd4\057\uffd4" +
    "\060\uffd4\062\uffd4\063\uffd4\064\uffd4\066\uffd4\001\002\000" +
    "\034\011\047\014\053\015\042\026\032\027\054\033\060" +
    "\041\063\061\031\065\057\066\034\067\064\070\037\071" +
    "\055\001\002\000\006\025\073\040\311\001\002\000\052" +
    "\004\ufff7\005\ufff7\006\ufff7\011\ufff7\027\ufff7\033\ufff7\034" +
    "\ufff7\040\ufff7\041\ufff7\044\ufff7\045\ufff7\046\ufff7\047\ufff7" +
    "\052\ufff7\053\ufff7\055\ufff7\057\ufff7\060\ufff7\064\ufff7\066" +
    "\ufff7\001\002\000\034\011\047\014\053\015\042\026\032" +
    "\027\054\033\060\041\063\061\031\065\057\066\034\067" +
    "\064\070\037\071\055\001\002\000\006\025\073\030\314" +
    "\001\002\000\004\033\212\001\002\000\054\004\uffd3\005" +
    "\uffd3\006\uffd3\011\uffd3\027\uffd3\033\uffd3\034\uffd3\040\uffd3" +
    "\041\uffd3\044\uffd3\045\uffd3\046\uffd3\047\uffd3\050\316\052" +
    "\uffd3\053\uffd3\055\uffd3\057\uffd3\060\uffd3\064\uffd3\066\uffd3" +
    "\001\002\000\004\033\212\001\002\000\052\004\uffd2\005" +
    "\uffd2\006\uffd2\011\uffd2\027\uffd2\033\uffd2\034\uffd2\040\uffd2" +
    "\041\uffd2\044\uffd2\045\uffd2\046\uffd2\047\uffd2\052\uffd2\053" +
    "\uffd2\055\uffd2\057\uffd2\060\uffd2\064\uffd2\066\uffd2\001\002" +
    "\000\010\034\uffe9\040\uffe9\055\uffe9\001\002\000\034\011" +
    "\047\014\053\015\042\026\032\027\054\033\060\041\063" +
    "\061\031\065\057\066\034\067\064\070\037\071\055\001" +
    "\002\000\006\025\073\030\323\001\002\000\004\033\324" +
    "\001\002\000\010\034\uffc8\054\326\056\uffc8\001\002\000" +
    "\006\034\341\056\337\001\002\000\034\011\047\014\053" +
    "\015\042\026\032\027\054\033\060\041\063\061\031\065" +
    "\057\066\034\067\064\070\037\071\055\001\002\000\006" +
    "\025\073\043\330\001\002\000\050\004\013\005\012\006" +
    "\014\011\047\027\054\033\212\040\uffe8\041\063\044\214" +
    "\045\236\046\237\047\225\052\223\053\231\055\uffe8\057" +
    "\220\060\216\064\020\066\222\001\002\000\006\040\332" +
    "\055\333\001\002\000\010\034\uffc8\054\326\056\uffc8\001" +
    "\002\000\004\040\334\001\002\000\010\034\uffc8\054\326" +
    "\056\uffc8\001\002\000\006\034\uffca\056\uffca\001\002\000" +
    "\006\034\uffc9\056\uffc9\001\002\000\004\043\343\001\002" +
    "\000\004\034\342\001\002\000\052\004\uffcd\005\uffcd\006" +
    "\uffcd\011\uffcd\027\uffcd\033\uffcd\034\uffcd\040\uffcd\041\uffcd" +
    "\044\uffcd\045\uffcd\046\uffcd\047\uffcd\052\uffcd\053\uffcd\055" +
    "\uffcd\057\uffcd\060\uffcd\064\uffcd\066\uffcd\001\002\000\052" +
    "\004\uffce\005\uffce\006\uffce\011\uffce\027\uffce\033\uffce\034" +
    "\uffce\040\uffce\041\uffce\044\uffce\045\uffce\046\uffce\047\uffce" +
    "\052\uffce\053\uffce\055\uffce\057\uffce\060\uffce\064\uffce\066" +
    "\uffce\001\002\000\046\004\013\005\012\006\014\011\047" +
    "\027\054\033\212\034\uffe8\041\063\044\214\045\236\046" +
    "\237\047\225\052\223\053\231\057\220\060\216\064\020" +
    "\066\222\001\002\000\004\034\uffc7\001\002\000\052\004" +
    "\uffde\005\uffde\006\uffde\011\uffde\027\uffde\033\uffde\034\uffde" +
    "\040\uffde\041\uffde\044\uffde\045\uffde\046\uffde\047\uffde\052" +
    "\uffde\053\uffde\055\uffde\057\uffde\060\uffde\064\uffde\066\uffde" +
    "\001\002\000\052\004\uffdf\005\uffdf\006\uffdf\011\uffdf\027" +
    "\uffdf\033\uffdf\034\uffdf\040\uffdf\041\uffdf\044\uffdf\045\uffdf" +
    "\046\uffdf\047\uffdf\052\uffdf\053\uffdf\055\uffdf\057\uffdf\060" +
    "\uffdf\064\uffdf\066\uffdf\001\002\000\006\025\073\040\350" +
    "\001\002\000\052\004\uffe0\005\uffe0\006\uffe0\011\uffe0\027" +
    "\uffe0\033\uffe0\034\uffe0\040\uffe0\041\uffe0\044\uffe0\045\uffe0" +
    "\046\uffe0\047\uffe0\052\uffe0\053\uffe0\055\uffe0\057\uffe0\060" +
    "\uffe0\064\uffe0\066\uffe0\001\002\000\034\011\047\014\053" +
    "\015\042\026\032\027\054\033\060\041\063\061\031\065" +
    "\057\066\034\067\064\070\037\071\055\001\002\000\006" +
    "\025\073\030\353\001\002\000\004\040\354\001\002\000" +
    "\052\004\uffe2\005\uffe2\006\uffe2\011\uffe2\027\uffe2\033\uffe2" +
    "\034\uffe2\040\uffe2\041\uffe2\044\uffe2\045\uffe2\046\uffe2\047" +
    "\uffe2\052\uffe2\053\uffe2\055\uffe2\057\uffe2\060\uffe2\064\uffe2" +
    "\066\uffe2\001\002\000\034\011\047\014\053\015\042\026" +
    "\032\027\054\033\060\041\063\061\031\065\057\066\034" +
    "\067\064\070\037\071\055\001\002\000\006\025\073\030" +
    "\357\001\002\000\004\033\212\001\002\000\052\004\uffd1" +
    "\005\uffd1\006\uffd1\011\uffd1\027\uffd1\033\uffd1\034\uffd1\040" +
    "\uffd1\041\uffd1\044\uffd1\045\uffd1\046\uffd1\047\uffd1\052\uffd1" +
    "\053\uffd1\055\uffd1\057\uffd1\060\uffd1\064\uffd1\066\uffd1\001" +
    "\002\000\004\033\362\001\002\000\014\004\013\005\012" +
    "\006\014\064\020\066\024\001\002\000\004\034\366\001" +
    "\002\000\016\004\013\005\012\006\014\034\ufff3\064\020" +
    "\066\024\001\002\000\004\034\ufff4\001\002\000\004\040" +
    "\367\001\002\000\024\002\ufff5\004\ufff5\005\ufff5\006\ufff5" +
    "\051\ufff5\062\ufff5\063\ufff5\064\ufff5\066\ufff5\001\002\000" +
    "\004\002\uffff\001\002\000\004\002\ufffe\001\002\000\004" +
    "\002\ufffc\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\370\000\022\002\014\003\020\030\005\031\006\032" +
    "\004\033\015\034\021\035\003\001\001\000\020\003\020" +
    "\030\371\031\006\032\004\033\015\034\021\035\003\001" +
    "\001\000\020\003\020\030\370\031\006\032\004\033\015" +
    "\034\021\035\003\001\001\000\002\001\001\000\020\003" +
    "\020\030\367\031\006\032\004\033\015\034\021\035\003" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\003\020\030\170\031\006\032\004\033\015\034" +
    "\021\035\003\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\003\020\030\150\031\006\032" +
    "\004\033\015\034\021\035\003\001\001\000\004\003\024" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\040\004\051\005\050\006\047" +
    "\007\045\010\044\011\042\012\037\013\035\014\032\015" +
    "\043\016\055\017\040\020\060\021\034\027\061\001\001" +
    "\000\002\001\001\000\022\012\145\013\035\014\032\015" +
    "\043\016\055\020\060\021\034\027\061\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\026\114\001\001\000\002\001" +
    "\001\000\004\025\110\001\001\000\004\024\104\001\001" +
    "\000\004\016\130\001\001\000\004\023\076\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\040" +
    "\004\125\005\050\006\047\007\045\010\044\011\042\012" +
    "\037\013\035\014\032\015\043\016\055\017\040\020\060" +
    "\021\034\027\061\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\003\124\001\001\000\040\004\067\005\050" +
    "\006\047\007\045\010\044\011\042\012\037\013\035\014" +
    "\032\015\043\016\055\017\040\020\060\021\034\027\061" +
    "\001\001\000\002\001\001\000\020\013\066\014\032\015" +
    "\043\016\055\020\060\021\034\027\061\001\001\000\004" +
    "\016\064\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\022\071\001\001" +
    "\000\040\004\122\005\050\006\047\007\045\010\044\011" +
    "\042\012\037\013\035\014\032\015\043\016\055\017\040" +
    "\020\060\021\034\027\061\001\001\000\002\001\001\000" +
    "\036\005\073\006\047\007\045\010\044\011\042\012\037" +
    "\013\035\014\032\015\043\016\055\017\040\020\060\021" +
    "\034\027\061\001\001\000\002\001\001\000\034\006\075" +
    "\007\045\010\044\011\042\012\037\013\035\014\032\015" +
    "\043\016\055\017\040\020\060\021\034\027\061\001\001" +
    "\000\004\023\076\001\001\000\032\007\101\010\044\011" +
    "\042\012\037\013\035\014\032\015\043\016\055\017\040" +
    "\020\060\021\034\027\061\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\024\104\001\001\000\002\001\001" +
    "\000\002\001\001\000\026\010\107\011\042\012\037\013" +
    "\035\014\032\015\043\016\055\020\060\021\034\027\061" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\025" +
    "\110\001\001\000\024\011\113\012\037\013\035\014\032" +
    "\015\043\016\055\020\060\021\034\027\061\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\026\114\001\001" +
    "\000\022\012\120\013\035\014\032\015\043\016\055\020" +
    "\060\021\034\027\061\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\022\123\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\040\004\133" +
    "\005\050\006\047\007\045\010\044\011\042\012\037\013" +
    "\035\014\032\015\043\016\055\017\040\020\060\021\034" +
    "\027\061\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\044\004\141\005\050\006\047\007\045" +
    "\010\044\011\042\012\037\013\035\014\032\015\043\016" +
    "\055\017\040\020\060\021\034\027\061\047\140\050\137" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\042\004\141\005\050\006\047\007\045\010\044" +
    "\011\042\012\037\013\035\014\032\015\043\016\055\017" +
    "\040\020\060\021\034\027\061\050\143\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\040\004\154\005\050\006\047\007" +
    "\045\010\044\011\042\012\037\013\035\014\032\015\043" +
    "\016\055\017\040\020\060\021\034\027\061\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\003\157\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\003\166\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\040\176\041\173" +
    "\042\174\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\040\176\041\200" +
    "\001\001\000\002\001\001\000\004\003\203\001\001\000" +
    "\004\003\204\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\003\207\001\001\000\004\043" +
    "\210\001\001\000\002\001\001\000\042\003\020\015\225" +
    "\016\055\021\220\031\216\036\237\043\214\044\226\045" +
    "\231\046\234\051\212\052\233\053\232\054\240\055\223" +
    "\056\227\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\040" +
    "\004\346\005\050\006\047\007\045\010\044\011\042\012" +
    "\037\013\035\014\032\015\043\016\055\017\040\020\060" +
    "\021\034\027\061\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\042\003\020\015\225\016\055" +
    "\021\220\031\216\036\237\043\214\044\317\045\231\046" +
    "\234\051\212\052\233\053\232\054\240\055\223\056\227" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\042\003\020\015\225\016\055\021\220\031\216" +
    "\036\237\043\214\044\304\045\231\046\234\051\212\052" +
    "\233\053\232\054\240\055\223\056\227\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\040\004\242\005" +
    "\050\006\047\007\045\010\044\011\042\012\037\013\035" +
    "\014\032\015\043\016\055\017\040\020\060\021\034\027" +
    "\061\001\001\000\002\001\001\000\004\043\244\001\001" +
    "\000\002\001\001\000\006\003\020\031\246\001\001\000" +
    "\040\004\247\005\050\006\047\007\045\010\044\011\042" +
    "\012\037\013\035\014\032\015\043\016\055\017\040\020" +
    "\060\021\034\027\061\001\001\000\002\001\001\000\006" +
    "\015\251\016\055\001\001\000\002\001\001\000\040\004" +
    "\253\005\050\006\047\007\045\010\044\011\042\012\037" +
    "\013\035\014\032\015\043\016\055\017\040\020\060\021" +
    "\034\027\061\001\001\000\002\001\001\000\004\043\255" +
    "\001\001\000\002\001\001\000\006\015\257\016\055\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\061\262" +
    "\001\001\000\004\062\276\001\001\000\040\004\264\005" +
    "\050\006\047\007\045\010\044\011\042\012\037\013\035" +
    "\014\032\015\043\016\055\017\040\020\060\021\034\027" +
    "\061\001\001\000\002\001\001\000\040\004\266\005\050" +
    "\006\047\007\045\010\044\011\042\012\037\013\035\014" +
    "\032\015\043\016\055\017\040\020\060\021\034\027\061" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\061" +
    "\274\001\001\000\002\001\001\000\004\061\273\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\040" +
    "\004\302\005\050\006\047\007\045\010\044\011\042\012" +
    "\037\013\035\014\032\015\043\016\055\017\040\020\060" +
    "\021\034\027\061\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\040\004\307" +
    "\005\050\006\047\007\045\010\044\011\042\012\037\013" +
    "\035\014\032\015\043\016\055\017\040\020\060\021\034" +
    "\027\061\001\001\000\002\001\001\000\002\001\001\000" +
    "\040\004\312\005\050\006\047\007\045\010\044\011\042" +
    "\012\037\013\035\014\032\015\043\016\055\017\040\020" +
    "\060\021\034\027\061\001\001\000\002\001\001\000\004" +
    "\043\314\001\001\000\002\001\001\000\004\043\316\001" +
    "\001\000\002\001\001\000\002\001\001\000\040\004\321" +
    "\005\050\006\047\007\045\010\044\011\042\012\037\013" +
    "\035\014\032\015\043\016\055\017\040\020\060\021\034" +
    "\027\061\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\057\324\001\001\000\004\060\337\001\001\000\040" +
    "\004\326\005\050\006\047\007\045\010\044\011\042\012" +
    "\037\013\035\014\032\015\043\016\055\017\040\020\060" +
    "\021\034\027\061\001\001\000\002\001\001\000\042\003" +
    "\020\015\225\016\055\021\220\031\216\036\237\043\214" +
    "\044\330\045\231\046\234\051\212\052\233\053\232\054" +
    "\240\055\223\056\227\001\001\000\002\001\001\000\004" +
    "\057\335\001\001\000\002\001\001\000\004\057\334\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\042\003\020\015\225\016\055\021\220\031\216\036\237" +
    "\043\214\044\343\045\231\046\234\051\212\052\233\053" +
    "\232\054\240\055\223\056\227\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\040\004\351\005\050\006\047\007\045" +
    "\010\044\011\042\012\037\013\035\014\032\015\043\016" +
    "\055\017\040\020\060\021\034\027\061\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\040\004" +
    "\355\005\050\006\047\007\045\010\044\011\042\012\037" +
    "\013\035\014\032\015\043\016\055\017\040\020\060\021" +
    "\034\027\061\001\001\000\002\001\001\000\004\043\357" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\003" +
    "\020\031\363\037\362\001\001\000\002\001\001\000\010" +
    "\003\020\031\363\037\364\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$AnalizadorSintacticoTiny$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$AnalizadorSintacticoTiny$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$AnalizadorSintacticoTiny$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 
   errores = new GestionErroresTiny();
   AnalizadorLexicoTiny alex = (AnalizadorLexicoTiny)getScanner();
   alex.fijaGestionErrores(errores);

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return getScanner().next_token(); 
    }

 
   private GestionErroresTiny errores;
   public void syntax_error(Symbol unidadLexica) {
     errores.errorSintactico((UnidadLexica)unidadLexica);
   }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$AnalizadorSintacticoTiny$actions {
  private final AnalizadorSintacticoTiny parser;

  /** Constructor */
  CUP$AnalizadorSintacticoTiny$actions(AnalizadorSintacticoTiny parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintacticoTiny$do_action_part00000000(
    int                        CUP$AnalizadorSintacticoTiny$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintacticoTiny$parser,
    java.util.Stack            CUP$AnalizadorSintacticoTiny$stack,
    int                        CUP$AnalizadorSintacticoTiny$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$AnalizadorSintacticoTiny$result;

      /* select the action based on the action number */
      switch (CUP$AnalizadorSintacticoTiny$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // S ::= DECLARATIONS 
            {
              Object RESULT =null;
		DefinitionList declarations = (DefinitionList)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = new Program(declarations);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("S",0, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= S EOF 
            {
              Object RESULT =null;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		RESULT = start_val;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("$START",0, RESULT);
            }
          /* ACCEPT */
          CUP$AnalizadorSintacticoTiny$parser.done_parsing();
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // DECLARATIONS ::= DECLARACION DECLARATIONS 
            {
              DefinitionList RESULT =null;
		IDeclaration d = (IDeclaration)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		DefinitionList list = (DefinitionList)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		list.addVar(d); RESULT = list;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("DECLARATIONS",22, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // DECLARATIONS ::= CONSTVAR DECLARATIONS 
            {
              DefinitionList RESULT =null;
		DConst c = (DConst)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		DefinitionList list = (DefinitionList)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		list.addConst(c); RESULT = list;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("DECLARATIONS",22, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // DECLARATIONS ::= STRUCTDEC DECLARATIONS 
            {
              DefinitionList RESULT =null;
		DStruct s = (DStruct)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		DefinitionList list = (DefinitionList)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		list.addStruct(s); RESULT = list;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("DECLARATIONS",22, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // DECLARATIONS ::= ALIAS DECLARATIONS 
            {
              DefinitionList RESULT =null;
		DTypedef t = (DTypedef)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		DefinitionList list = (DefinitionList)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		list.addTypedef(t); RESULT = list;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("DECLARATIONS",22, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // DECLARATIONS ::= FUNCDEC DECLARATIONS 
            {
              DefinitionList RESULT =null;
		DFunction f = (DFunction)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		DefinitionList list = (DefinitionList)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		list.addFunc(f); RESULT = list;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("DECLARATIONS",22, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // DECLARATIONS ::= 
            {
              DefinitionList RESULT =null;
		RESULT = new DefinitionList();
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("DECLARATIONS",22, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // DECLARACION ::= TYPE IDEN PUNTOYCOMA 
            {
              IDeclaration RESULT =null;
		T t = (T)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		TokenValue name = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		IDeclaration var = new IDeclaration(t, name.lexema); RESULT = var;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("DECLARACION",23, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // DECLARACION ::= TYPE IDEN IGUAL E0 PUNTOYCOMA 
            {
              IDeclaration RESULT =null;
		T t = (T)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-4)).value;
		TokenValue name = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)).value;
		E e = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		IDeclaration var = new IDeclaration(t, name.lexema, e); RESULT = var;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("DECLARACION",23, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // ASIG ::= ACCESO IGUAL E0 PUNTOYCOMA 
            {
              IAssignation RESULT =null;
		E a = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)).value;
		E e = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		RESULT = new IAssignation((A) a, e);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ASIG",28, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // CONSTVAR ::= CONST TYPE IDEN IGUAL E0 PUNTOYCOMA 
            {
              DConst RESULT =null;
		T t = (T)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-4)).value;
		TokenValue name = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)).value;
		E e = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		RESULT = new DConst(t, name.lexema, e);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CONSTVAR",24, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // STRUCTDEC ::= STRUCT IDEN LLAP CAMPOS LLCIERRE PUNTOYCOMA 
            {
              DStruct RESULT =null;
		TokenValue name = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-4)).value;
		ArrayList<IDeclaration> c = (ArrayList<IDeclaration>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		RESULT = new DStruct(name.lexema, c);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("STRUCTDEC",25, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // CAMPOS ::= DECLARACION CAMPOS 
            {
              ArrayList<IDeclaration> RESULT =null;
		IDeclaration d = (IDeclaration)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		ArrayList<IDeclaration> list = (ArrayList<IDeclaration>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		list.add(d); RESULT = list;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CAMPOS",29, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // CAMPOS ::= DECLARACION 
            {
              ArrayList<IDeclaration> RESULT =null;
		IDeclaration d = (IDeclaration)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		ArrayList<IDeclaration> list = new ArrayList<IDeclaration>(); list.add(d); RESULT = list;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CAMPOS",29, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // ALIAS ::= TYPEDEF IDEN IGUAL TYPE PUNTOYCOMA 
            {
              DTypedef RESULT =null;
		TokenValue name = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)).value;
		T t = (T)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		RESULT = new DTypedef(name.lexema, t);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ALIAS",27, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // FUNCDEC ::= IDEN PAP PARAMS PCIERRE FLECHA TYPE BINST 
            {
              DFunction RESULT =null;
		TokenValue name = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-6)).value;
		ArrayList<Parameter> p = (ArrayList<Parameter>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-4)).value;
		T tReturn = (T)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		ArrayList<I> i = (ArrayList<I>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = new DFunction(name.lexema,i,p,tReturn);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("FUNCDEC",26, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // PARAMS ::= LISTAPARAMS 
            {
              ArrayList<Parameter> RESULT =null;
		ArrayList<Parameter> list = (ArrayList<Parameter>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = list;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("PARAMS",32, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // PARAMS ::= 
            {
              ArrayList<Parameter> RESULT =null;
		RESULT = new ArrayList<Parameter>();
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("PARAMS",32, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // LISTAPARAMS ::= PARAM COMA LISTAPARAMS 
            {
              ArrayList<Parameter> RESULT =null;
		Parameter p = (Parameter)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		ArrayList<Parameter> l = (ArrayList<Parameter>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		l.add(p); RESULT = l;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("LISTAPARAMS",31, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // LISTAPARAMS ::= PARAM 
            {
              ArrayList<Parameter> RESULT =null;
		Parameter p = (Parameter)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		ArrayList<Parameter> l = new ArrayList<Parameter>(); l.add(p); RESULT = l;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("LISTAPARAMS",31, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // PARAM ::= IDEN DOSPUNTOS TYPE 
            {
              Parameter RESULT =null;
		TokenValue name = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		T t = (T)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = new Parameter(name.lexema, t, false);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("PARAM",30, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // PARAM ::= IDEN DOSPUNTOS AMPERSAND TYPE 
            {
              Parameter RESULT =null;
		TokenValue name = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)).value;
		T t = (T)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = new Parameter(name.lexema, t, true);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("PARAM",30, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // LISTAINST ::= INST LISTAINST 
            {
              ArrayList<I> RESULT =null;
		I i = (I)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		ArrayList<I> list = (ArrayList<I>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		list.add(i); RESULT = list;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("LISTAINST",34, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // LISTAINST ::= BLOQUE LISTAINST 
            {
              ArrayList<I> RESULT =null;
		IBlock b = (IBlock)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		ArrayList<I> list = (ArrayList<I>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		list.add(b); RESULT = list;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("LISTAINST",34, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // LISTAINST ::= 
            {
              ArrayList<I> RESULT =null;
		RESULT = new ArrayList<I>();
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("LISTAINST",34, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // INST ::= DECLARACION 
            {
              I RESULT =null;
		IDeclaration d = (IDeclaration)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = d;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INST",44, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // INST ::= ASIG 
            {
              I RESULT =null;
		IAssignation a = (IAssignation)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = a;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INST",44, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // INST ::= SHOWFUNC 
            {
              I RESULT =null;
		IShow s = (IShow)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = s;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INST",44, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // INST ::= RETURNFUNC 
            {
              I RESULT =null;
		IReturn r = (IReturn)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = r; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INST",44, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // INST ::= LLAMADAFUNCINST 
            {
              I RESULT =null;
		IFunction l = (IFunction)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = l;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INST",44, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // SHOWFUNC ::= SHOW PAP E0 PCIERRE PUNTOYCOMA 
            {
              IShow RESULT =null;
		E e = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		RESULT = new IShow(e);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("SHOWFUNC",35, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // READFUNC ::= READ PAP PCIERRE 
            {
              ERead RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("READFUNC",14, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // RETURNFUNC ::= RETURN E0 PUNTOYCOMA 
            {
              IReturn RESULT =null;
		E e = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		RESULT = new IReturn(e);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("RETURNFUNC",36, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // RETURNFUNC ::= RETURN PUNTOYCOMA 
            {
              IReturn RESULT =null;
		RESULT = new IReturn();
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("RETURNFUNC",36, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // LLAMADAFUNCINST ::= LLAMADAFUNC PUNTOYCOMA 
            {
              IFunction RESULT =null;
		EFunction f = (EFunction)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		RESULT = new IFunction(f);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("LLAMADAFUNCINST",39, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // LLAMADAFUNC ::= IDEN PAP ARGS PCIERRE 
            {
              EFunction RESULT =null;
		TokenValue name = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)).value;
		ArrayList<E> a = (ArrayList<E>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		RESULT = new EFunction(name.lexema, a);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("LLAMADAFUNC",15, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // ARGS ::= LISTAARGS 
            {
              ArrayList<E> RESULT =null;
		ArrayList<E> l = (ArrayList<E>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = l;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ARGS",37, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // ARGS ::= 
            {
              ArrayList<E> RESULT =null;
		RESULT = new ArrayList<E>();
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ARGS",37, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // LISTAARGS ::= E0 COMA LISTAARGS 
            {
              ArrayList<E> RESULT =null;
		E e = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		ArrayList<E> l = (ArrayList<E>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		l.add(e); RESULT = l;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("LISTAARGS",38, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // LISTAARGS ::= E0 
            {
              ArrayList<E> RESULT =null;
		E e = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		ArrayList<E> l = new ArrayList<E>(); l.add(e); RESULT = l;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("LISTAARGS",38, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // BLOQUE ::= BINST 
            {
              IBlock RESULT =null;
		ArrayList<I> list = (ArrayList<I>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = new IBlock(list);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("BLOQUE",43, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // BLOQUE ::= CONDICIONALES 
            {
              IBlock RESULT =null;
		IIfElse c = (IIfElse)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = c;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("BLOQUE",43, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // BLOQUE ::= BUCLES 
            {
              IBlock RESULT =null;
		IBlock b = (IBlock)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = b;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("BLOQUE",43, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // BLOQUE ::= SWITCHES 
            {
              IBlock RESULT =null;
		IBlock s = (IBlock)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = s;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("BLOQUE",43, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // BINST ::= LLAP LISTAINST LLCIERRE 
            {
              ArrayList<I> RESULT =null;
		ArrayList<I> list = (ArrayList<I>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		RESULT = list;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("BINST",33, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // CONDICIONALES ::= IF PAP E0 PCIERRE BINST 
            {
              IIfElse RESULT =null;
		E e = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		ArrayList<I> list = (ArrayList<I>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = new IIfElse(e, list);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CONDICIONALES",40, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // CONDICIONALES ::= IF PAP E0 PCIERRE BINST ELSE BINST 
            {
              IIfElse RESULT =null;
		E e = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-4)).value;
		ArrayList<I> listIf = (ArrayList<I>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		ArrayList<I> listElse = (ArrayList<I>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = new IIfElse(e, listIf, listElse);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CONDICIONALES",40, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // BUCLES ::= WHILE PAP E0 PCIERRE BINST 
            {
              IBlock RESULT =null;
		E e = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		ArrayList<I> list = (ArrayList<I>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = new IWhile(e, list);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("BUCLES",41, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // BUCLES ::= FOR PAP DECLARACION E0 PUNTOYCOMA ACCESO IGUAL E0 PCIERRE BINST 
            {
              IBlock RESULT =null;
		IDeclaration d = (IDeclaration)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-7)).value;
		E exp = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-6)).value;
		E a = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-4)).value;
		E exp2 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		ArrayList<I> list = (ArrayList<I>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = new IFor(d, exp, new IAssignation((A) a, exp2), list);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("BUCLES",41, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // BUCLES ::= REPEAT PAP E0 PCIERRE BINST 
            {
              IBlock RESULT =null;
		E e = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		ArrayList<I> list = (ArrayList<I>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = new IRepeat(e, list);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("BUCLES",41, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // SWITCHES ::= SWITCH PAP E0 PCIERRE LLAP CASEEXP DEFAULTEXP LLCIERRE 
            {
              IBlock RESULT =null;
		E e = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-5)).value;
		ArrayList<SwitchInstruction> c = (ArrayList<SwitchInstruction>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		SwitchInstruction d = (SwitchInstruction)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		RESULT = new ISwitch(e, c, d);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("SWITCHES",42, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // SWITCHES ::= SWITCH PAP E0 PCIERRE LLAP CASEEXP LLCIERRE 
            {
              IBlock RESULT =null;
		E e = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-4)).value;
		ArrayList<SwitchInstruction> c = (ArrayList<SwitchInstruction>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		RESULT = new ISwitch(e, c);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("SWITCHES",42, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // SWITCHES ::= VALUEFOR PAP ACCESO PCIERRE LLAP CASEEXPVF DEFAULTEXPVF LLCIERRE 
            {
              IBlock RESULT =null;
		E a = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-5)).value;
		ArrayList<ValueforInstruction> c = (ArrayList<ValueforInstruction>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		ValueforInstruction d = (ValueforInstruction)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		RESULT = new IValuefor((A) a, c, d);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("SWITCHES",42, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // SWITCHES ::= VALUEFOR PAP ACCESO PCIERRE LLAP CASEEXPVF LLCIERRE 
            {
              IBlock RESULT =null;
		E a = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-4)).value;
		ArrayList<ValueforInstruction> c = (ArrayList<ValueforInstruction>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		RESULT = new IValuefor((A) a, c);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("SWITCHES",42, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // CASEEXP ::= CASE E0 DOSPUNTOS LISTAINST BREAK PUNTOYCOMA CASEEXP 
            {
              ArrayList<SwitchInstruction> RESULT =null;
		E e = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-5)).value;
		ArrayList<I> lInst = (ArrayList<I>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)).value;
		ArrayList<SwitchInstruction> l = (ArrayList<SwitchInstruction>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		l.add(new SwitchInstruction(lInst, e, true)); RESULT = l;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CASEEXP",45, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // CASEEXP ::= CASE E0 DOSPUNTOS LISTAINST PUNTOYCOMA CASEEXP 
            {
              ArrayList<SwitchInstruction> RESULT =null;
		E e = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-4)).value;
		ArrayList<I> lInst = (ArrayList<I>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		ArrayList<SwitchInstruction> l = (ArrayList<SwitchInstruction>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		l.add(new SwitchInstruction(lInst, e, false)); RESULT = l;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CASEEXP",45, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // CASEEXP ::= 
            {
              ArrayList<SwitchInstruction> RESULT =null;
		ArrayList<SwitchInstruction> l = new ArrayList<SwitchInstruction>(); RESULT = l;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CASEEXP",45, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // DEFAULTEXP ::= DEFAULT DOSPUNTOS LISTAINST 
            {
              SwitchInstruction RESULT =null;
		ArrayList<I> l = (ArrayList<I>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = new SwitchInstruction(l);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("DEFAULTEXP",46, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // CASEEXPVF ::= CASE E0 IGUAL E0 PUNTOYCOMA BREAK PUNTOYCOMA CASEEXPVF 
            {
              ArrayList<ValueforInstruction> RESULT =null;
		E e = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-6)).value;
		E result = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-4)).value;
		ArrayList<ValueforInstruction> l = (ArrayList<ValueforInstruction>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		l.add(new ValueforInstruction(e, result, true)); RESULT = l;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CASEEXPVF",47, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // CASEEXPVF ::= CASE E0 IGUAL E0 PUNTOYCOMA PUNTOYCOMA CASEEXPVF 
            {
              ArrayList<ValueforInstruction> RESULT =null;
		E e = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-5)).value;
		E result = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)).value;
		ArrayList<ValueforInstruction> l = (ArrayList<ValueforInstruction>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		l.add(new ValueforInstruction(e, result, false)); RESULT = l;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CASEEXPVF",47, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // CASEEXPVF ::= 
            {
              ArrayList<ValueforInstruction> RESULT =null;
		ArrayList<ValueforInstruction> l = new ArrayList<ValueforInstruction>(); RESULT = l;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CASEEXPVF",47, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // DEFAULTEXPVF ::= DEFAULT IGUAL E0 PUNTOYCOMA 
            {
              ValueforInstruction RESULT =null;
		E e = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		RESULT = new ValueforInstruction(e);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("DEFAULTEXPVF",48, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // E0 ::= E0 OR E1 
            {
              E RESULT =null;
		E op1 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		E op2 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new EBin(op1, op2, KindE.OR, new TBasics(KindT.BOOL));
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E0",2, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // E0 ::= E1 
            {
              E RESULT =null;
		E e = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = e;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E0",2, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // E1 ::= E1 AND E2 
            {
              E RESULT =null;
		E op1 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		E op2 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new EBin(op1, op2, KindE.AND, new TBasics(KindT.BOOL)); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E1",3, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // E1 ::= E2 
            {
              E RESULT =null;
		E e = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = e;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E1",3, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // E2 ::= E2 OP0 E3 
            {
              E RESULT =null;
		E op1 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		KindE operator = (KindE)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		E op2 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new EBin(op1, op2, operator, new TBasics(KindT.BOOL)); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E2",4, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // E2 ::= E3 
            {
              E RESULT =null;
		E e = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = e;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E2",4, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // E3 ::= E3 OP1 E4 
            {
              E RESULT =null;
		E op1 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		KindE operator = (KindE)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		E op2 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new EBin(op1, op2, operator, new TBasics(KindT.BOOL)); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E3",5, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // E3 ::= E4 
            {
              E RESULT =null;
		E e = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = e;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E3",5, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // E3 ::= NEWEXP 
            {
              E RESULT =null;
		ENew nexp = (ENew)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = nexp;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E3",5, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // E4 ::= E4 OP2 E5 
            {
              E RESULT =null;
		E op1 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		KindE operator = (KindE)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		E op2 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new EBin(op1, op2, operator, new TBasics(KindT.INT));
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E4",6, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // E4 ::= E5 
            {
              E RESULT =null;
		E e = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = e;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E4",6, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // E5 ::= E5 OP3 E6 
            {
              E RESULT =null;
		E op1 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		KindE operator = (KindE)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		E op2 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new EBin(op1, op2, operator, new TBasics(KindT.INT));
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E5",7, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // E5 ::= E6 
            {
              E RESULT =null;
		E e = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = e;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E5",7, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // E6 ::= NOT E6 
            {
              E RESULT =null;
		E op1 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = new EUnary(op1, KindE.NOT, new TBasics(KindT.BOOL));
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E6",8, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // E6 ::= E7 
            {
              E RESULT =null;
		E e = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = e;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E6",8, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // E7 ::= OP4 E7 
            {
              E RESULT =null;
		KindE operator = (KindE)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		E op1 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = new EUnary(op1, operator, new TArray(new TBasics(KindT.INT)));
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E7",9, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // E7 ::= E8 
            {
              E RESULT =null;
		E e = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = e;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E7",9, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // E8 ::= ENT 
            {
              E RESULT =null;
		TokenValue value = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = new EConst(value.lexema, new TBasics(KindT.INT));
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E8",10, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // E8 ::= TRUE 
            {
              E RESULT =null;
		TokenValue value = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = new EConst(value.lexema, new TBasics(KindT.BOOL));
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E8",10, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // E8 ::= FALSE 
            {
              E RESULT =null;
		TokenValue value = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = new EConst(value.lexema, new TBasics(KindT.BOOL));
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E8",10, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // E8 ::= ACCESO 
            {
              E RESULT =null;
		E access = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = access;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E8",10, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // E8 ::= LLAMADAFUNC 
            {
              E RESULT =null;
		EFunction callFunc = (EFunction)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = callFunc;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E8",10, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // E8 ::= READFUNC 
            {
              E RESULT =null;
		ERead read = (ERead)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = read;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E8",10, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // E8 ::= LLAP E0 E9 LLCIERRE 
            {
              E RESULT =null;
		E elem = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		ArrayList<E> elems = (ArrayList<E>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		elems.add(elem); RESULT = new EArray(elems);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E8",10, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // E9 ::= COMA E0 E9 
            {
              ArrayList<E> RESULT =null;
		E e = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		ArrayList<E> list = (ArrayList<E>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		list.add(e); RESULT = list;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E9",16, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // E9 ::= 
            {
              ArrayList<E> RESULT =null;
		ArrayList<E> l = new ArrayList<E>(); RESULT = l;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E9",16, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // OP0 ::= DISTINTO 
            {
              KindE RESULT =null;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		d = KindE.DISTINCT;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OP0",17, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // OP0 ::= IGUALDAD 
            {
              KindE RESULT =null;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		e = KindE.EQUAL;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OP0",17, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // OP1 ::= MENOR 
            {
              KindE RESULT =null;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		m = KindE.LESS;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OP1",18, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // OP1 ::= MAYOR 
            {
              KindE RESULT =null;
		Object ma = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		ma = KindE.GREATER;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OP1",18, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // OP1 ::= MENORIGUAL 
            {
              KindE RESULT =null;
		Object me = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		me = KindE.LEQ;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OP1",18, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // OP1 ::= MAYORIGUAL 
            {
              KindE RESULT =null;
		Object may = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		may = KindE.GREQ;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OP1",18, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // OP2 ::= MAS 
            {
              KindE RESULT =null;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		m = KindE.SUM;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OP2",19, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // OP2 ::= MENOS 
            {
              KindE RESULT =null;
		Object me = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		me = KindE.SUB;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OP2",19, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // OP3 ::= POR 
            {
              KindE RESULT =null;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		p = KindE.MUL;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OP3",20, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // OP3 ::= DIV 
            {
              KindE RESULT =null;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		d = KindE.DIV;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OP3",20, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // OP3 ::= MOD 
            {
              KindE RESULT =null;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		m = KindE.MOD;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OP3",20, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // OP4 ::= SUMLIST 
            {
              KindE RESULT =null;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		s = KindE.SUML;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OP4",21, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // OP4 ::= PRODLIST 
            {
              KindE RESULT =null;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		p= KindE.PRODL;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OP4",21, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // NEWEXP ::= NEW TYPE 
            {
              ENew RESULT =null;
		T t = (T)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = new ENew(t);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("NEWEXP",13, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // TYPE ::= TIPOINT 
            {
              T RESULT =null;
		 RESULT = new TBasics(KindT.INT);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TYPE",1, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // TYPE ::= TIPOBOOL 
            {
              T RESULT =null;
		 RESULT = new TBasics(KindT.BOOL);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TYPE",1, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // TYPE ::= VOID 
            {
              T RESULT =null;
		 RESULT = new TBasics(KindT.VOID);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TYPE",1, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // TYPE ::= IDEN 
            {
              T RESULT =null;
		TokenValue id = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new TStruct(id.lexema);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TYPE",1, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // TYPE ::= LIST MENOR TYPE MAYOR CAP ENT CCIERRE 
            {
              T RESULT =null;
		T t = (T)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-4)).value;
		TokenValue size = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 EConst sizeConst = new EConst(size.lexema, new TBasics(KindT.INT)); RESULT = new TArray(t, sizeConst);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TYPE",1, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // TYPE ::= TYPE POR 
            {
              T RESULT =null;
		T t = (T)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = new TPointer(t);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TYPE",1, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // ACCESO ::= ACCESO CAP E0 CCIERRE 
            {
              E RESULT =null;
		E a = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)).value;
		E e = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		RESULT = new AArray((A) a, e);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ACCESO",11, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // ACCESO ::= ACCESO PUNTO IDEN 
            {
              E RESULT =null;
		E a = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		TokenValue id = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = new AStruct((A) a, id.lexema);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ACCESO",11, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // ACCESO ::= PAP E0 PCIERRE 
            {
              E RESULT =null;
		E e = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		RESULT = e;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ACCESO",11, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // ACCESO ::= NACCESO 
            {
              E RESULT =null;
		E na = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = na;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ACCESO",11, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // NACCESO ::= IDEN 
            {
              E RESULT =null;
		TokenValue id = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new AVariable(id.lexema);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("NACCESO",12, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // NACCESO ::= POR NACCESO 
            {
              E RESULT =null;
		E na = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new APointer((A) na);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("NACCESO",12, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // NACCESO ::= AMPERSAND NACCESO 
            {
              E RESULT =null;
		E na = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = new AAdPointer((A) na);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("NACCESO",12, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$AnalizadorSintacticoTiny$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintacticoTiny$do_action(
    int                        CUP$AnalizadorSintacticoTiny$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintacticoTiny$parser,
    java.util.Stack            CUP$AnalizadorSintacticoTiny$stack,
    int                        CUP$AnalizadorSintacticoTiny$top)
    throws java.lang.Exception
    {
              return CUP$AnalizadorSintacticoTiny$do_action_part00000000(
                               CUP$AnalizadorSintacticoTiny$act_num,
                               CUP$AnalizadorSintacticoTiny$parser,
                               CUP$AnalizadorSintacticoTiny$stack,
                               CUP$AnalizadorSintacticoTiny$top);
    }
}

