package asint;

import java_cup.runtime.*;
import alex.AnalizadorLexicoTiny;
import alex.UnidadLexica;
import errors.GestionErroresTiny;

scan with {: return getScanner().next_token(); :};
parser code {: 
   private GestionErroresTiny errores;
   public void syntax_error(Symbol unidadLexica) {
     errores.errorSintactico((UnidadLexica)unidadLexica);
   }
:};
init with {: 
   errores = new GestionErroresTiny();
   AnalizadorLexicoTiny alex = (AnalizadorLexicoTiny)getScanner();
   alex.fijaGestionErrores(errores);
:};


terminal  IDEN, TIPOINT, TIPOBOOL, VOID,
         ENT, BOOLEAN, TRUE, FALSE, 
         MAS, MENOS, POR, DIV, MOD, SUMLIST, PRODLIST, CONCAT, 
         MAYOR, MENOR, MAYORIGUAL, MENORIGUAL, DISTINTO, IGUALDAD,
         AND, OR, NEGACION,
         PAP, PCIERRE, CAP, CCIERRE, LLAP, LLCIERRE, FLECHA, BARRA, PUNTOS,
         IGUAL, COMA, PUNTOYCOMA, AMPERSAND, ALMOHADILLA, COMILLASDOBLES, PUNTO, DOSPUNTOS, ARROBA, 
         WHILE, FOR, REPEAT, IF, ELSE, STRUCT, SWITCH, VALUEFOR, CASE, BREAK, DEFAULT,
         RETURN, SHOW, READ, MAIN, TYPEDEF, CONST;

non terminal S, CONSTVAR, TYPE, EXP, E0, E1, E2, E3, E4, OP0, OP1, OP2, OP3, B0, B1, B2, B3, B4, STRUCTDEC, MAINFUNC, M, INST, IFEX, BLOCK, BLEXP, WHILEEXP, FOREXP, REPEATEXP, VALUEFOREXP, SWITCHEXP, CASEEXP, CASEEXPVF ASIG, FUNCDEC, PARAMS; //TYPE es non terminal??? QUE HACEMOS CON PARAMS???

S   ::= CONSTVAR S | STRUCTDEC S | MAINFUNC | FUNCDEC S ;
CONSTVAR ::= DECL ;
STRUCTST ::= STRUCT IDEN LLAP -----ATRIBS???'----- LLCIERRE ;
FUNCDEC ::= IDEN PAP PARAMS PCIERRE FLECHA TYPE BLOCK ;
MAINFUNC ::= TIPOINT MAIN PAP PCIERRE LLAP M RETURN EXP PUNTOYCOMA LLCIERRE ;  //PARA poner el 0 de return 0??????
M   	::= INST | M ;
INST	::= DECL | ASIG | IFEXP | WHILEEXP | FOREXP | REPEATEXP | SWITCHEXP | VALUEFOREXP | PUNTOYCOMA | BLOCK ;
IFEXP	::= IF PAP COND PCIERRE BLOCK ELSE PAP BLOCK PCIERRE ;
BLOCK	::= INST | LLAP BLEXP LLCIERRE ;
BLEXP ::= INST BLEXP | ;
WHILEXP ::= WHILE PAP COND PCIERRE BLOCK ;
FOREXP ::= FOR PAP TIPOINT IDEN IGUAL EXP PUNTOYCOMA EXP PUNTOYCOMA IDEN IGUAL EXP PCIERRE BLOCK ;  //O IDEN IGUAL IDEN MAS EXP ????????
REPEATEXP ::= REPEAT PAP COND PCIERRE BLOCK ;
SWITCHEXP ::= SWITCH PAP IDEN PCIERRE LLAP CASEEXP LLCIERRE ;
VALUEFOREXP ::= VALUEFOR PAP IDEN PCIERRE LLAP CASEEXPVF LLCIERRE ;
CASEEXP	::= CASE EXP DOSPUNTOS BLOCK BREAK PUNTOYCOMA CASEEXP | DEFAULT DOSPUNTOS BLOCK ;
CASEEXPVF ::= CASE EXP IGUAL EXP PUNTOYCOMA BREAK PUNTOYCOMA CASEEXPVF | DEFAULT IGUAL EXP PUNTOYCOMA ;
ASIG	::= IDEN IGUAL EXP PUNTOYCOMA ;
DECL ::= CONST TYPE IDEN IGUAL EXP PUNTOYCOMA ;
EXP ::= E0 | B0 ;
E0  	::= E0 OP0 E1 | E1 ;
E1  	::= E1 OP1 E2 | E2 ;
E2  	::= E2 OP2 E3 | E3 ;
E3  	::= E3 OP3 E4 | E4 ;
E4  	::= ENT | IDEN | PAP E0 PCIERRE ;
OP0  ::= DISTINTO | IGUALDAD ;
OP1  ::= MENOR | MAYOR | MENORIGUAL | MAYORIGUAL ;
OP2 	::= MAS  | MENOS ;
OP3 	::= POR | DIV | MOD ;
B0   ::= B0 OP0 B1 | B1 ;
B1   ::= B1 OP1 B2 | B2 ;
B2  	::= B2 OR B3 | B3 ;
B3  	::= B3 AND B4 | B4 ;
B4  	::= NOT B5 | B5 ;
B5   ::= BOOLEAN | IDEN | PAP B0 PCIERRE ;
TYPE ::= TIPOINT | TIPOBOOL | VOID;




